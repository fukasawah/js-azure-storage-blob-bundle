{"version":3,"file":"azure-storage-blob.js","sources":["../node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js","../node_modules/@azure/logger/dist/browser/debug.js","../node_modules/@azure/logger/dist/browser/log.common.js","../node_modules/@azure/logger/dist/browser/index.js","../node_modules/@azure/core-rest-pipeline/dist/browser/log.js","../node_modules/@azure/abort-controller/dist/browser/AbortError.js","../node_modules/@azure/core-util/dist/browser/delay.js","../node_modules/@azure/core-util/dist/browser/createAbortablePromise.js","../node_modules/@azure/core-util/dist/browser/random.js","../node_modules/@azure/core-util/dist/browser/object.js","../node_modules/@azure/core-util/dist/browser/error.js","../node_modules/@azure/core-util/dist/browser/bytesEncoding.common.js","../node_modules/@azure/core-util/dist/browser/uuidUtils.js","../node_modules/@azure/core-util/dist/browser/uuidUtils.common.js","../node_modules/@azure/core-util/dist/browser/checkEnvironment.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/constants.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgentPlatform.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.common.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js","../node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.common.js","../node_modules/@azure/core-tracing/dist/browser/tracingContext.js","../node_modules/@azure/core-tracing/dist/browser/state.js","../node_modules/@azure/core-tracing/dist/browser/instrumenter.js","../node_modules/@azure/core-tracing/dist/browser/tracingClient.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.common.js","../node_modules/@azure/core-rest-pipeline/dist/browser/restError.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js","../node_modules/@azure/core-rest-pipeline/dist/browser/fetchHttpClient.js","../node_modules/@azure/core-rest-pipeline/dist/browser/defaultHttpClient.js","../node_modules/@azure/core-rest-pipeline/dist/browser/pipelineRequest.js","../node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js","../node_modules/@azure/core-rest-pipeline/dist/browser/policies/bearerTokenAuthenticationPolicy.js","../node_modules/@azure/core-auth/dist/browser/tokenCredential.js","../node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js","../node_modules/@azure/core-client/dist/browser/base64.js","../node_modules/@azure/core-client/dist/browser/interfaces.js","../node_modules/@azure/core-client/dist/browser/utils.js","../node_modules/@azure/core-client/dist/browser/serializer.js","../node_modules/@azure/core-client/dist/browser/state.js","../node_modules/@azure/core-client/dist/browser/operationHelpers.js","../node_modules/@azure/core-client/dist/browser/deserializationPolicy.js","../node_modules/@azure/core-client/dist/browser/interfaceHelpers.js","../node_modules/@azure/core-client/dist/browser/serializationPolicy.js","../node_modules/@azure/core-client/dist/browser/pipeline.js","../node_modules/@azure/core-client/dist/browser/httpClientCache.js","../node_modules/@azure/core-client/dist/browser/urlHelpers.js","../node_modules/@azure/core-client/dist/browser/log.js","../node_modules/@azure/core-client/dist/browser/serviceClient.js","../node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js","../node_modules/@azure/core-http-compat/dist/browser/util.js","../node_modules/@azure/core-http-compat/dist/browser/response.js","../node_modules/@azure/core-http-compat/dist/browser/extendedClient.js","../node_modules/@azure/core-http-compat/dist/browser/policies/requestPolicyFactoryPolicy.js","../node_modules/@azure/core-xml/dist/browser/xml.common.js","../node_modules/@azure/core-xml/dist/browser/xml.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","../node_modules/@azure/core-http-compat/dist/browser/httpClientAdapter.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.browser.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js","../node_modules/@azure/core-lro/dist/browser/legacy/poller.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js","../node_modules/events/events.js","../node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","../node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies) {\n        var _a;\n        this._policies = [];\n        this._policies = (_a = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a !== void 0 ? _a : [];\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options,\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         * 5. Sign Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        function createPhase(name) {\n            return {\n                name,\n                policies: new Set(),\n                hasRun: false,\n                hasAfterPolicies: false,\n            };\n        }\n        // Track policies for each phase.\n        const serializePhase = createPhase(\"Serialize\");\n        const noPhase = createPhase(\"None\");\n        const deserializePhase = createPhase(\"Deserialize\");\n        const retryPhase = createPhase(\"Retry\");\n        const signPhase = createPhase(\"Sign\");\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n        // Small helper function to map phase name to each Phase\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else if (phase === \"Sign\") {\n                return signPhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set(),\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n                node.afterPhase.hasAfterPolicies = true;\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.policies.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            phase.hasRun = true;\n            // Sets iterate in insertion order\n            for (const node of phase.policies) {\n                if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    // Even if the phase is empty, we should wait for it\n                    // to be walked to avoid re-ordering policies.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.policies.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                // if the phase isn't complete\n                if (phase.policies.size > 0 && phase !== noPhase) {\n                    if (!noPhase.hasRun) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n                if (phase.hasAfterPolicies) {\n                    // Run any policies unblocked by this phase\n                    walkPhase(noPhase);\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        let iteration = 0;\n        while (policyMap.size > 0) {\n            iteration++;\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time\n            // after the first full pass.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength && iteration > 1) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nexport function createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n//# sourceMappingURL=pipeline.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log.js\";\nconst debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nconst debugObj = Object.assign((namespace) => {\n    return createDebugger(namespace);\n}, {\n    enable,\n    enabled,\n    disable,\n    log,\n});\nfunction enable(namespaces) {\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    const wildcard = /\\*/g;\n    const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n    for (const ns of namespaceList) {\n        if (ns.startsWith(\"-\")) {\n            skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n        }\n        else {\n            enabledNamespaces.push(new RegExp(`^${ns}$`));\n        }\n    }\n    for (const instance of debuggers) {\n        instance.enabled = enabled(instance.namespace);\n    }\n}\nfunction enabled(namespace) {\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    for (const skipped of skippedNamespaces) {\n        if (skipped.test(namespace)) {\n            return false;\n        }\n    }\n    for (const enabledNamespace of enabledNamespaces) {\n        if (enabledNamespace.test(namespace)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction disable() {\n    const result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    const newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy,\n        log: debugObj.log,\n        namespace,\n        extend,\n    });\n    function debug(...args) {\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = `${namespace} ${args[0]}`;\n        }\n        newDebugger.log(...args);\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    const index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\nexport default debugObj;\n//# sourceMappingURL=debug.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport function log(...args) {\n    if (args.length > 0) {\n        const firstArg = String(args[0]);\n        if (firstArg.includes(\":error\")) {\n            console.error(...args);\n        }\n        else if (firstArg.includes(\":warning\")) {\n            console.warn(...args);\n        }\n        else if (firstArg.includes(\":info\")) {\n            console.info(...args);\n        }\n        else if (firstArg.includes(\":verbose\")) {\n            console.debug(...args);\n        }\n        else {\n            console.debug(...args);\n        }\n    }\n}\n//# sourceMappingURL=log.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debug from \"./debug.js\";\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n    debug.log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n    }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level) {\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n    }\n    azureLogLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n        if (shouldEnable(logger)) {\n            enabledNamespaces.push(logger.namespace);\n        }\n    }\n    debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n    return azureLogLevel;\n}\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace) {\n    const clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\"),\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n        level,\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        const enabledNamespaces = debug.disable();\n        debug.enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n//# sourceMappingURL=index.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-rest-pipeline\");\n//# sourceMappingURL=log.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n//# sourceMappingURL=AbortError.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createAbortablePromise } from \"./createAbortablePromise.js\";\nimport { getRandomIntegerInclusive } from \"./random.js\";\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return createAbortablePromise((resolve) => {\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: () => clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage,\n    });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n    return { retryAfterInMs };\n}\n//# sourceMappingURL=delay.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nexport function createAbortablePromise(buildPromise, options) {\n    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return new Promise((resolve, reject) => {\n        function rejectOnAbort() {\n            reject(new AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n        }\n        function removeListeners() {\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n            removeListeners();\n            rejectOnAbort();\n        }\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        try {\n            buildPromise((x) => {\n                removeListeners();\n                resolve(x);\n            }, (x) => {\n                removeListeners();\n                reject(x);\n            });\n        }\n        catch (err) {\n            reject(err);\n        }\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n    });\n}\n//# sourceMappingURL=createAbortablePromise.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n//# sourceMappingURL=random.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n//# sourceMappingURL=object.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObject } from \"./object.js\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n    if (isObject(e)) {\n        const hasName = typeof e.name === \"string\";\n        const hasMessage = typeof e.message === \"string\";\n        return hasName && hasMessage;\n    }\n    return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e) {\n    if (isError(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n//# sourceMappingURL=error.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n    switch (format) {\n        case \"utf-8\":\n            return uint8ArrayToUtf8String(bytes);\n        case \"base64\":\n            return uint8ArrayToBase64(bytes);\n        case \"base64url\":\n            return uint8ArrayToBase64Url(bytes);\n        case \"hex\":\n            return uint8ArrayToHexString(bytes);\n    }\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n    switch (format) {\n        case \"utf-8\":\n            return utf8StringToUint8Array(value);\n        case \"base64\":\n            return base64ToUint8Array(value);\n        case \"base64url\":\n            return base64UrlToUint8Array(value);\n        case \"hex\":\n            return hexStringToUint8Array(value);\n    }\n}\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes) {\n    return btoa([...bytes].map((x) => String.fromCharCode(x)).join(\"\"));\n}\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes) {\n    return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes) {\n    const decoder = new TextDecoder();\n    const dataString = decoder.decode(bytes);\n    return dataString;\n}\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes) {\n    return [...bytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value) {\n    return new TextEncoder().encode(value);\n}\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value) {\n    return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));\n}\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value) {\n    const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    return base64ToUint8Array(base64String);\n}\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value) {\n    // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n    const bytes = new Uint8Array(value.length / 2);\n    for (let i = 0; i < value.length / 2; ++i) {\n        const highNibble = value[2 * i];\n        const lowNibble = value[2 * i + 1];\n        if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n            // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n            return bytes.slice(0, i);\n        }\n        bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n    }\n    return bytes;\n}\n//# sourceMappingURL=bytesEncoding.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a;\nimport { generateUUID } from \"./uuidUtils.common.js\";\n// NOTE: This could be undefined if not used in a secure context\nconst uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : generateUUID;\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID() {\n    return uuidFunction();\n}\n//# sourceMappingURL=uuidUtils-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUUID() {\n    let uuid = \"\";\n    for (let i = 0; i < 32; i++) {\n        // Generate a random number between 0 and 15\n        const randomNumber = Math.floor(Math.random() * 16);\n        // Set the UUID version to 4 in the 13th position\n        if (i === 12) {\n            uuid += \"4\";\n        }\n        else if (i === 16) {\n            // Set the UUID variant to \"10\" in the 17th position\n            uuid += (randomNumber & 0x3) | 0x8;\n        }\n        else {\n            // Add a random hexadecimal digit to the UUID string\n            uuid += randomNumber.toString(16);\n        }\n        // Add hyphens to the UUID string at the appropriate positions\n        if (i === 7 || i === 11 || i === 15 || i === 19) {\n            uuid += \"-\";\n        }\n    }\n    return uuid;\n}\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID() {\n    return generateUUID();\n}\n//# sourceMappingURL=uuidUtils.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a, _b, _c, _d;\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nexport const isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker = typeof self === \"object\" &&\n    typeof (self === null || self === void 0 ? void 0 : self.importScripts) === \"function\" &&\n    (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"DedicatedWorkerGlobalScope\" ||\n        ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === \"ServiceWorkerGlobalScope\" ||\n        ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === \"SharedWorkerGlobalScope\");\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno = typeof Deno !== \"undefined\" &&\n    typeof Deno.version !== \"undefined\" &&\n    typeof Deno.version.deno !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike = typeof globalThis.process !== \"undefined\" &&\n    Boolean(globalThis.process.version) &&\n    Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n * @deprecated Use `isNodeLike` instead.\n */\nexport const isNode = isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime = isNodeLike && !isBun && !isDeno;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nexport const isReactNative = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === \"ReactNative\";\n//# sourceMappingURL=checkEnvironment.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObject } from \"@azure/core-util\";\nconst RedactedString = \"REDACTED\";\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"WWW-Authenticate\",\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nexport class Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [], } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || isObject(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null || value === \"\") {\n            return value;\n        }\n        const url = new URL(value);\n        if (!url.search) {\n            return value;\n        }\n        for (const [key] of url.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url.searchParams.set(key, RedactedString);\n            }\n        }\n        return url.toString();\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n}\n//# sourceMappingURL=sanitizer.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url = new URL(locationHeader, request.url);\n        request.url = url.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        request.headers.delete(\"Authorization\");\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n//# sourceMappingURL=redirectPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport const SDK_VERSION = \"1.18.1\";\nexport const DEFAULT_RETRY_POLICY_COUNT = 3;\n//# sourceMappingURL=constants.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform.js\";\nimport { SDK_VERSION } from \"../constants.js\";\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nexport function getUserAgentHeaderName() {\n    return getHeaderName();\n}\n/**\n * @internal\n */\nexport async function getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n    await setPlatformSpecificData(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n//# sourceMappingURL=userAgent.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n */\nexport function getHeaderName() {\n    return \"x-ms-useragent\";\n}\nfunction getBrowserInfo(userAgent) {\n    const browserRegexes = [\n        { name: \"Firefox\", regex: /Firefox\\/([\\d.]+)/ },\n        { name: \"Safari\", regex: /Version\\/([\\d.]+).*Safari/ },\n    ];\n    for (const browser of browserRegexes) {\n        const match = userAgent.match(browser.regex);\n        if (match) {\n            return { brand: browser.name, version: match[1] };\n        }\n    }\n    return undefined;\n}\nfunction getBrandVersionString(brands) {\n    const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n    for (const brand of brandOrder) {\n        const foundBrand = brands.find((b) => b.brand === brand);\n        if (foundBrand) {\n            return foundBrand;\n        }\n    }\n    return undefined;\n}\n/**\n * @internal\n */\nexport async function setPlatformSpecificData(map) {\n    const localNavigator = globalThis.navigator;\n    let osPlatform = \"unknown\";\n    if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) {\n        const entropyValues = await localNavigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"platformVersion\",\n        ]);\n        osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n        // Get the brand and version\n        const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n        if (brand) {\n            map.set(brand.brand, brand.version);\n        }\n    }\n    else if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) {\n        osPlatform = localNavigator.platform;\n        const brand = getBrowserInfo(localNavigator.userAgent);\n        if (brand) {\n            map.set(brand.brand, brand.version);\n        }\n    }\n    else if (typeof globalThis.EdgeRuntime === \"string\") {\n        map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n    }\n    map.set(\"OS\", osPlatform);\n}\n//# sourceMappingURL=userAgentPlatform-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent.js\";\nconst UserAgentHeaderName = getUserAgentHeaderName();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy(options = {}) {\n    const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, await userAgentValue);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=userAgentPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport function isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nexport function isWebReadableStream(x) {\n    return Boolean(x &&\n        typeof x.getReader === \"function\" &&\n        typeof x.tee === \"function\");\n}\nexport function isReadableStream(x) {\n    return isNodeReadableStream(x) || isWebReadableStream(x);\n}\nexport function isBlob(x) {\n    return typeof x.stream === \"function\";\n}\n//# sourceMappingURL=typeGuards.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isNodeLike } from \"@azure/core-util\";\nimport { isNodeReadableStream } from \"./typeGuards.js\";\nconst unimplementedMethods = {\n    arrayBuffer: () => {\n        throw new Error(\"Not implemented\");\n    },\n    slice: () => {\n        throw new Error(\"Not implemented\");\n    },\n    text: () => {\n        throw new Error(\"Not implemented\");\n    },\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\nfunction hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nexport function getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    }\n    else {\n        return blob.stream();\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: (_d = options.size) !== null && _d !== void 0 ? _d : -1, name, stream: () => {\n            const s = stream();\n            if (isNodeReadableStream(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        }, [rawContent]: stream });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: content.byteLength, name, arrayBuffer: async () => content.buffer, stream: () => new Blob([content]).stream(), [rawContent]: () => content });\n    }\n    else {\n        return new File([content], name, options);\n    }\n}\n//# sourceMappingURL=file.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getRawContent } from \"./file.js\";\nimport { isNodeReadableStream, isWebReadableStream } from \"./typeGuards.js\";\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream) {\n    return new Response(stream).blob();\n}\nasync function toBlobPart(source) {\n    if (source instanceof Blob || source instanceof Uint8Array) {\n        return source;\n    }\n    if (isWebReadableStream(source)) {\n        return drain(source);\n    }\n    // If it's not a true Blob, and it's not a Uint8Array, we can assume the source\n    // is a fake File created by createFileFromStream and we can get the original stream\n    // using getRawContent.\n    const rawContent = getRawContent(source);\n    // Shouldn't happen but guard for it anyway\n    if (isNodeReadableStream(rawContent)) {\n        throw new Error(\"Encountered unexpected type. In the browser, `concat` supports Web ReadableStream, Blob, Uint8Array, and files created using `createFile` only.\");\n    }\n    return toBlobPart(rawContent);\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nexport async function concat(sources) {\n    const parts = [];\n    for (const source of sources) {\n        parts.push(await toBlobPart(typeof source === \"function\" ? source() : source));\n    }\n    return new Blob(parts);\n}\n//# sourceMappingURL=concat.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { randomUUID, stringToUint8Array } from \"@azure/core-util\";\nimport { concat } from \"../util/concat.js\";\nimport { isBlob } from \"../util/typeGuards.js\";\nfunction generateBoundary() {\n    return `----AzSDKFormBoundary${randomUUID()}`;\n}\nfunction encodeHeaders(headers) {\n    let result = \"\";\n    for (const [key, value] of headers) {\n        result += `${key}: ${value}\\r\\n`;\n    }\n    return result;\n}\nfunction getLength(source) {\n    if (source instanceof Uint8Array) {\n        return source.byteLength;\n    }\n    else if (isBlob(source)) {\n        // if was created using createFile then -1 means we have an unknown size\n        return source.size === -1 ? undefined : source.size;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction getTotalLength(sources) {\n    let total = 0;\n    for (const source of sources) {\n        const partLength = getLength(source);\n        if (partLength === undefined) {\n            return undefined;\n        }\n        else {\n            total += partLength;\n        }\n    }\n    return total;\n}\nasync function buildRequestBody(request, parts, boundary) {\n    const sources = [\n        stringToUint8Array(`--${boundary}`, \"utf-8\"),\n        ...parts.flatMap((part) => [\n            stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n            stringToUint8Array(encodeHeaders(part.headers), \"utf-8\"),\n            stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n            part.body,\n            stringToUint8Array(`\\r\\n--${boundary}`, \"utf-8\"),\n        ]),\n        stringToUint8Array(\"--\\r\\n\\r\\n\", \"utf-8\"),\n    ];\n    const contentLength = getTotalLength(sources);\n    if (contentLength) {\n        request.headers.set(\"Content-Length\", contentLength);\n    }\n    request.body = await concat(sources);\n}\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = \"multipartPolicy\";\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);\nfunction assertValidBoundary(boundary) {\n    if (boundary.length > maxBoundaryLength) {\n        throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n    }\n    if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n        throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n    }\n}\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy() {\n    return {\n        name: multipartPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.multipartBody) {\n                return next(request);\n            }\n            if (request.body) {\n                throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n            }\n            let boundary = request.multipartBody.boundary;\n            const contentTypeHeader = (_a = request.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"multipart/mixed\";\n            const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n            if (!parsedHeader) {\n                throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);\n            }\n            const [, contentType, parsedBoundary] = parsedHeader;\n            if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n                throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);\n            }\n            boundary !== null && boundary !== void 0 ? boundary : (boundary = parsedBoundary);\n            if (boundary) {\n                assertValidBoundary(boundary);\n            }\n            else {\n                boundary = generateBoundary();\n            }\n            request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n            await buildRequestBody(request, request.multipartBody.parts, boundary);\n            request.multipartBody = undefined;\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=multipartPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nexport function delay(delayInMs, value, options) {\n    return new Promise((resolve, reject) => {\n        let timer = undefined;\n        let onAborted = undefined;\n        const rejectOnAbort = () => {\n            return reject(new AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));\n        };\n        const removeListeners = () => {\n            if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {\n                options.abortSignal.removeEventListener(\"abort\", onAborted);\n            }\n        };\n        onAborted = () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            removeListeners();\n            return rejectOnAbort();\n        };\n        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        timer = setTimeout(() => {\n            removeListeners();\n            resolve(value);\n        }, delayInMs);\n        if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n            options.abortSignal.addEventListener(\"abort\", onAborted);\n        }\n    });\n}\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nexport function parseHeaderValueAsNumber(response, headerName) {\n    const value = response.headers.get(headerName);\n    if (!value)\n        return;\n    const valueAsNum = Number(value);\n    if (Number.isNaN(valueAsNum))\n        return;\n    return valueAsNum;\n}\n//# sourceMappingURL=helpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { parseHeaderValueAsNumber } from \"../util/helpers.js\";\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n    if (!(response && [429, 503].includes(response.status)))\n        return undefined;\n    try {\n        // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n        for (const header of AllRetryAfterHeaders) {\n            const retryAfterValue = parseHeaderValueAsNumber(response, header);\n            if (retryAfterValue === 0 || retryAfterValue) {\n                // \"Retry-After\" header ==> seconds\n                // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n                const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n                return retryAfterValue * multiplyingFactor; // in milli-seconds\n            }\n        }\n        // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n        const retryAfterHeader = response.headers.get(RetryAfterHeader);\n        if (!retryAfterHeader)\n            return;\n        const date = Date.parse(retryAfterHeader);\n        const diff = date - Date.now();\n        // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n        return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response) {\n    return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            const retryAfterInMs = getRetryAfterInMs(response);\n            if (!Number.isFinite(retryAfterInMs)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs,\n            };\n        },\n    };\n}\n//# sourceMappingURL=throttlingRetryStrategy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { calculateRetryDelay } from \"@azure/core-util\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy.js\";\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(options = {}) {\n    var _a, _b;\n    const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return {\n        name: \"exponentialRetryStrategy\",\n        retry({ retryCount, response, responseError }) {\n            const matchedSystemError = isSystemError(responseError);\n            const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n            const isExponential = isExponentialRetryResponse(response);\n            const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n            const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n            if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n                return { skipStrategy: true };\n            }\n            if (responseError && !matchedSystemError && !isExponential) {\n                return { errorToThrow: responseError };\n            }\n            return calculateRetryDelay(retryCount, {\n                retryDelayInMs: retryInterval,\n                maxRetryDelayInMs: maxRetryInterval,\n            });\n        },\n    };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response) {\n    return Boolean(response &&\n        response.status !== undefined &&\n        (response.status >= 500 || response.status === 408) &&\n        response.status !== 501 &&\n        response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\" ||\n        err.code === \"ENOTFOUND\");\n}\n//# sourceMappingURL=exponentialRetryStrategy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"../util/helpers.js\";\nimport { createClientLogger } from \"@azure/logger\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(strategies, options = { maxRetries: DEFAULT_RETRY_POLICY_COUNT }) {\n    const logger = options.logger || retryPolicyLogger;\n    return {\n        name: retryPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            let response;\n            let responseError;\n            let retryCount = -1;\n            // eslint-disable-next-line no-constant-condition\n            retryRequest: while (true) {\n                retryCount += 1;\n                response = undefined;\n                responseError = undefined;\n                try {\n                    logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n                    response = await next(request);\n                    logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n                }\n                catch (e) {\n                    logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n                    // RestErrors are valid targets for the retry strategies.\n                    // If none of the retry strategies can work with them, they will be thrown later in this policy.\n                    // If the received error is not a RestError, it is immediately thrown.\n                    responseError = e;\n                    if (!e || responseError.name !== \"RestError\") {\n                        throw e;\n                    }\n                    response = responseError.response;\n                }\n                if ((_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    logger.error(`Retry ${retryCount}: Request aborted.`);\n                    const abortError = new AbortError();\n                    throw abortError;\n                }\n                if (retryCount >= ((_b = options.maxRetries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_POLICY_COUNT)) {\n                    logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);\n                    if (responseError) {\n                        throw responseError;\n                    }\n                    else if (response) {\n                        return response;\n                    }\n                    else {\n                        throw new Error(\"Maximum retries reached with no response or error to throw\");\n                    }\n                }\n                logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n                strategiesLoop: for (const strategy of strategies) {\n                    const strategyLogger = strategy.logger || retryPolicyLogger;\n                    strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n                    const modifiers = strategy.retry({\n                        retryCount,\n                        response,\n                        responseError,\n                    });\n                    if (modifiers.skipStrategy) {\n                        strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n                        continue strategiesLoop;\n                    }\n                    const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n                    if (errorToThrow) {\n                        strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);\n                        throw errorToThrow;\n                    }\n                    if (retryAfterInMs || retryAfterInMs === 0) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);\n                        await delay(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n                        continue retryRequest;\n                    }\n                    if (redirectTo) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);\n                        request.url = redirectTo;\n                        continue retryRequest;\n                    }\n                }\n                if (responseError) {\n                    logger.info(`None of the retry strategies could work with the received error. Throwing it.`);\n                    throw responseError;\n                }\n                if (response) {\n                    logger.info(`None of the retry strategies could work with the received response. Returning it.`);\n                    return response;\n                }\n                // If all the retries skip and there's no response,\n                // we're still in the retry loop, so a new request will be sent\n                // until `maxRetries` is reached.\n            }\n        },\n    };\n}\n//# sourceMappingURL=retryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n//# sourceMappingURL=httpHeaders.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isNodeLike, stringToUint8Array } from \"@azure/core-util\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicy\";\nfunction formDataToFormDataMap(formData) {\n    var _a;\n    const formDataMap = {};\n    for (const [key, value] of formData.entries()) {\n        (_a = formDataMap[key]) !== null && _a !== void 0 ? _a : (formDataMap[key] = []);\n        formDataMap[key].push(value);\n    }\n    return formDataMap;\n}\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (isNodeLike && typeof FormData !== \"undefined\" && request.body instanceof FormData) {\n                request.formData = formDataToFormDataMap(request.body);\n                request.body = undefined;\n            }\n            if (request.formData) {\n                const contentType = request.headers.get(\"Content-Type\");\n                if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n                    request.body = wwwFormUrlEncode(request.formData);\n                }\n                else {\n                    await prepareFormData(request.formData, request);\n                }\n                request.formData = undefined;\n            }\n            return next(request);\n        },\n    };\n}\nfunction wwwFormUrlEncode(formData) {\n    const urlSearchParams = new URLSearchParams();\n    for (const [key, value] of Object.entries(formData)) {\n        if (Array.isArray(value)) {\n            for (const subValue of value) {\n                urlSearchParams.append(key, subValue.toString());\n            }\n        }\n        else {\n            urlSearchParams.append(key, value.toString());\n        }\n    }\n    return urlSearchParams.toString();\n}\nasync function prepareFormData(formData, request) {\n    // validate content type (multipart/form-data)\n    const contentType = request.headers.get(\"Content-Type\");\n    if (contentType && !contentType.startsWith(\"multipart/form-data\")) {\n        // content type is specified and is not multipart/form-data. Exit.\n        return;\n    }\n    request.headers.set(\"Content-Type\", contentType !== null && contentType !== void 0 ? contentType : \"multipart/form-data\");\n    // set body to MultipartRequestBody using content from FormDataMap\n    const parts = [];\n    for (const [fieldName, values] of Object.entries(formData)) {\n        for (const value of Array.isArray(values) ? values : [values]) {\n            if (typeof value === \"string\") {\n                parts.push({\n                    headers: createHttpHeaders({\n                        \"Content-Disposition\": `form-data; name=\"${fieldName}\"`,\n                    }),\n                    body: stringToUint8Array(value, \"utf-8\"),\n                });\n            }\n            else if (value === undefined || value === null || typeof value !== \"object\") {\n                throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);\n            }\n            else {\n                // using || instead of ?? here since if value.name is empty we should create a file name\n                const fileName = value.name || \"blob\";\n                const headers = createHttpHeaders();\n                headers.set(\"Content-Disposition\", `form-data; name=\"${fieldName}\"; filename=\"${fileName}\"`);\n                // again, || is used since an empty value.type means the content type is unset\n                headers.set(\"Content-Type\", value.type || \"application/octet-stream\");\n                parts.push({\n                    headers,\n                    body: value,\n                });\n            }\n        }\n    }\n    request.multipartBody = { parts };\n}\n//# sourceMappingURL=formDataPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport const proxyPolicyName = \"proxyPolicy\";\nconst errorMessage = \"proxyPolicy is not supported in browser environment\";\nexport function getDefaultProxySettings() {\n    throw new Error(errorMessage);\n}\n/**\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function proxyPolicy() {\n    throw new Error(errorMessage);\n}\n/**\n * A function to reset the cached agents.\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n * @internal\n */\nexport function resetCachedProxyAgents() {\n    throw new Error(errorMessage);\n}\n//# sourceMappingURL=proxyPolicy.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @internal */\nexport const knownContextKeys = {\n    span: Symbol.for(\"@azure/core-tracing span\"),\n    namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options = {}) {\n    let context = new TracingContextImpl(options.parentContext);\n    if (options.span) {\n        context = context.setValue(knownContextKeys.span, options.span);\n    }\n    if (options.namespace) {\n        context = context.setValue(knownContextKeys.namespace, options.namespace);\n    }\n    return context;\n}\n/** @internal */\nexport class TracingContextImpl {\n    constructor(initialContext) {\n        this._contextMap =\n            initialContext instanceof TracingContextImpl\n                ? new Map(initialContext._contextMap)\n                : new Map();\n    }\n    setValue(key, value) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.set(key, value);\n        return newContext;\n    }\n    getValue(key) {\n        return this._contextMap.get(key);\n    }\n    deleteValue(key) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.delete(key);\n        return newContext;\n    }\n}\n//# sourceMappingURL=tracingContext.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nexport const state = {\n    instrumenterImplementation: undefined,\n};\n//# sourceMappingURL=state-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingContext } from \"./tracingContext.js\";\nimport { state } from \"./state.js\";\nexport function createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n        addEvent: () => {\n            // noop\n        },\n    };\n}\nexport function createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n    state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n    if (!state.instrumenterImplementation) {\n        state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return state.instrumenterImplementation;\n}\n//# sourceMappingURL=instrumenter.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getInstrumenter } from \"./instrumenter.js\";\nimport { knownContextKeys } from \"./tracingContext.js\";\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName: packageName, packageVersion: packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext }),\n        });\n        return {\n            span,\n            updatedOptions,\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({ status: \"success\" });\n            return result;\n        }\n        catch (err) {\n            span.setStatus({ status: \"error\", error: err });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return getInstrumenter().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */\n    function parseTraceparentHeader(traceparentHeader) {\n        return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */\n    function createRequestHeaders(tracingContext) {\n        return getInstrumenter().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders,\n    };\n}\n//# sourceMappingURL=tracingClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport const custom = {};\n//# sourceMappingURL=inspect.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"@azure/core-util\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        // The request and response may contain sensitive information in the headers or body.\n        // To help prevent this sensitive information being accidentally logged, the request and response\n        // properties are marked as non-enumerable here. This prevents them showing up in the output of\n        // JSON.stringify and console.log.\n        Object.defineProperty(this, \"request\", { value: options.request, enumerable: false });\n        Object.defineProperty(this, \"response\", { value: options.response, enumerable: false });\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [custom]() {\n        // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n        // response get sanitized.\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), { request: this.request, response: this.response }))}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n    if (e instanceof RestError) {\n        return true;\n    }\n    return isError(e) && e.name === \"RestError\";\n}\n//# sourceMappingURL=restError.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingClient, } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n    const userAgentPromise = getUserAgentValue(options.userAgentPrefix);\n    const sanitizer = new Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!tracingClient) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId,\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return createTracingClient({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: SDK_VERSION,\n        });\n    }\n    catch (e) {\n        logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes,\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: isError(error) ? error : undefined,\n        });\n        if (isRestError(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n            status: \"success\",\n        });\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\n//# sourceMappingURL=tracingPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logPolicy } from \"./policies/logPolicy.js\";\nimport { createEmptyPipeline } from \"./pipeline.js\";\nimport { redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = createEmptyPipeline();\n    if (isNodeLike) {\n        if (options.tlsOptions) {\n            pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n        }\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy(multipartPolicy(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\",\n    });\n    if (isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n//# sourceMappingURL=createPipelineFromOptions.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Name of the TLS Policy\n */\nexport const tlsPolicyName = \"tlsPolicy\";\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nexport function tlsPolicy(tlsSettings) {\n    return {\n        name: tlsPolicyName,\n        sendRequest: async (req, next) => {\n            // Users may define a request tlsSettings, honor those over the client level one\n            if (!req.tlsSettings) {\n                req.tlsSettings = tlsSettings;\n            }\n            return next(req);\n        },\n    };\n}\n//# sourceMappingURL=tlsPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\nexport const decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * decompressResponsePolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function decompressResponsePolicy() {\n    throw new Error(\"decompressResponsePolicy is not supported in browser environment\");\n}\n//# sourceMappingURL=decompressResponsePolicy-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=setClientRequestIdPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nexport const defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nexport function defaultRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: defaultRetryPolicyName,\n        sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=defaultRetryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger as coreLogger } from \"../log.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options = {}) {\n    var _a;\n    const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n    const sanitizer = new Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger.enabled) {\n                return next(request);\n            }\n            logger(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger(`Response status code: ${response.status}`);\n            logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n//# sourceMappingURL=logPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { RestError } from \"./restError.js\";\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport { isNodeReadableStream, isWebReadableStream } from \"./util/typeGuards.js\";\n/**\n * Checks if the body is a Blob or Blob-like\n */\nfunction isBlob(body) {\n    // File objects count as a type of Blob, so we want to use instanceof explicitly\n    return (typeof Blob === \"function\" || typeof Blob === \"object\") && body instanceof Blob;\n}\n/**\n * A HttpClient implementation that uses window.fetch to send HTTP requests.\n * @internal\n */\nclass FetchHttpClient {\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    async sendRequest(request) {\n        const url = new URL(request.url);\n        const isInsecure = url.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        if (request.proxySettings) {\n            throw new Error(\"HTTP proxy is not supported in browser environment\");\n        }\n        try {\n            return await makeRequest(request);\n        }\n        catch (e) {\n            throw getError(e, request);\n        }\n    }\n}\n/**\n * Sends a request\n */\nasync function makeRequest(request) {\n    const { abortController, abortControllerCleanup } = setupAbortSignal(request);\n    try {\n        const headers = buildFetchHeaders(request.headers);\n        const { streaming, body: requestBody } = buildRequestBody(request);\n        const requestInit = Object.assign(Object.assign({ body: requestBody, method: request.method, headers: headers, signal: abortController.signal }, (\"credentials\" in Request.prototype\n            ? { credentials: request.withCredentials ? \"include\" : \"same-origin\" }\n            : {})), (\"cache\" in Request.prototype ? { cache: \"no-store\" } : {}));\n        // According to https://fetch.spec.whatwg.org/#fetch-method,\n        // init.duplex must be set when body is a ReadableStream object.\n        // currently \"half\" is the only valid value.\n        if (streaming) {\n            requestInit.duplex = \"half\";\n        }\n        /**\n         * Developers of the future:\n         * Do not set redirect: \"manual\" as part\n         * of request options.\n         * It will not work as you expect.\n         */\n        const response = await fetch(request.url, requestInit);\n        // If we're uploading a blob, we need to fire the progress event manually\n        if (isBlob(request.body) && request.onUploadProgress) {\n            request.onUploadProgress({ loadedBytes: request.body.size });\n        }\n        return buildPipelineResponse(response, request, abortControllerCleanup);\n    }\n    catch (e) {\n        abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();\n        throw e;\n    }\n}\n/**\n * Creates a pipeline response from a Fetch response;\n */\nasync function buildPipelineResponse(httpResponse, request, abortControllerCleanup) {\n    var _a, _b;\n    const headers = buildPipelineHeaders(httpResponse);\n    const response = {\n        request,\n        headers,\n        status: httpResponse.status,\n    };\n    const bodyStream = isWebReadableStream(httpResponse.body)\n        ? buildBodyStream(httpResponse.body, {\n            onProgress: request.onDownloadProgress,\n            onEnd: abortControllerCleanup,\n        })\n        : httpResponse.body;\n    if (\n    // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n    ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(Number.POSITIVE_INFINITY)) ||\n        ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(response.status))) {\n        if (request.enableBrowserStreams) {\n            response.browserStreamBody = bodyStream !== null && bodyStream !== void 0 ? bodyStream : undefined;\n        }\n        else {\n            const responseStream = new Response(bodyStream);\n            response.blobBody = responseStream.blob();\n            abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();\n        }\n    }\n    else {\n        const responseStream = new Response(bodyStream);\n        response.bodyAsText = await responseStream.text();\n        abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();\n    }\n    return response;\n}\nfunction setupAbortSignal(request) {\n    const abortController = new AbortController();\n    // Cleanup function\n    let abortControllerCleanup;\n    /**\n     * Attach an abort listener to the request\n     */\n    let abortListener;\n    if (request.abortSignal) {\n        if (request.abortSignal.aborted) {\n            throw new AbortError(\"The operation was aborted.\");\n        }\n        abortListener = (event) => {\n            if (event.type === \"abort\") {\n                abortController.abort();\n            }\n        };\n        request.abortSignal.addEventListener(\"abort\", abortListener);\n        abortControllerCleanup = () => {\n            var _a;\n            if (abortListener) {\n                (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n            }\n        };\n    }\n    // If a timeout was passed, call the abort signal once the time elapses\n    if (request.timeout > 0) {\n        setTimeout(() => {\n            abortController.abort();\n        }, request.timeout);\n    }\n    return { abortController, abortControllerCleanup };\n}\n/**\n * Gets the specific error\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nfunction getError(e, request) {\n    var _a;\n    if (e && (e === null || e === void 0 ? void 0 : e.name) === \"AbortError\") {\n        return e;\n    }\n    else {\n        return new RestError(`Error sending request: ${e.message}`, {\n            code: (_a = e === null || e === void 0 ? void 0 : e.code) !== null && _a !== void 0 ? _a : RestError.REQUEST_SEND_ERROR,\n            request,\n        });\n    }\n}\n/**\n * Converts PipelineRequest headers to Fetch headers\n */\nfunction buildFetchHeaders(pipelineHeaders) {\n    const headers = new Headers();\n    for (const [name, value] of pipelineHeaders) {\n        headers.append(name, value);\n    }\n    return headers;\n}\nfunction buildPipelineHeaders(httpResponse) {\n    const responseHeaders = createHttpHeaders();\n    for (const [name, value] of httpResponse.headers) {\n        responseHeaders.set(name, value);\n    }\n    return responseHeaders;\n}\nfunction buildRequestBody(request) {\n    const body = typeof request.body === \"function\" ? request.body() : request.body;\n    if (isNodeReadableStream(body)) {\n        throw new Error(\"Node streams are not supported in browser environment.\");\n    }\n    return isWebReadableStream(body)\n        ? { streaming: true, body: buildBodyStream(body, { onProgress: request.onUploadProgress }) }\n        : { streaming: false, body };\n}\n/**\n * Reads the request/response original stream and stream it through a new\n * ReadableStream, this is done to be able to report progress in a way that\n * all modern browsers support. TransformStreams would be an alternative,\n * however they are not yet supported by all browsers i.e Firefox\n */\nfunction buildBodyStream(readableStream, options = {}) {\n    let loadedBytes = 0;\n    const { onProgress, onEnd } = options;\n    // If the current browser supports pipeThrough we use a TransformStream\n    // to report progress\n    if (isTransformStreamSupported(readableStream)) {\n        return readableStream.pipeThrough(new TransformStream({\n            transform(chunk, controller) {\n                if (chunk === null) {\n                    controller.terminate();\n                    return;\n                }\n                controller.enqueue(chunk);\n                loadedBytes += chunk.length;\n                if (onProgress) {\n                    onProgress({ loadedBytes });\n                }\n            },\n            flush() {\n                onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n            },\n        }));\n    }\n    else {\n        // If we can't use transform streams, wrap the original stream in a new readable stream\n        // and use pull to enqueue each chunk and report progress.\n        const reader = readableStream.getReader();\n        return new ReadableStream({\n            async pull(controller) {\n                var _a;\n                const { done, value } = await reader.read();\n                // When no more data needs to be consumed, break the reading\n                if (done || !value) {\n                    onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n                    // Close the stream\n                    controller.close();\n                    reader.releaseLock();\n                    return;\n                }\n                loadedBytes += (_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0;\n                // Enqueue the next data chunk into our target stream\n                controller.enqueue(value);\n                if (onProgress) {\n                    onProgress({ loadedBytes });\n                }\n            },\n            cancel(reason) {\n                onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n                return reader.cancel(reason);\n            },\n        });\n    }\n}\n/**\n * Create a new HttpClient instance for the browser environment.\n * @internal\n */\nexport function createFetchHttpClient() {\n    return new FetchHttpClient();\n}\nfunction isTransformStreamSupported(readableStream) {\n    return readableStream.pipeThrough !== undefined && self.TransformStream !== undefined;\n}\n//# sourceMappingURL=fetchHttpClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createFetchHttpClient } from \"./fetchHttpClient.js\";\n/**\n * Create the correct HttpClient for the current environment.\n */\nexport function createDefaultHttpClient() {\n    return createFetchHttpClient();\n}\n//# sourceMappingURL=defaultHttpClient-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport { randomUUID } from \"@azure/core-util\";\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : createHttpHeaders();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.multipartBody = options.multipartBody;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || randomUUID();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n        this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n//# sourceMappingURL=pipelineRequest.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"./helpers.js\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n    retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            if (cycler.isRefreshing) {\n                return false;\n            }\n            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n                return true;\n            }\n            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n//# sourceMappingURL=tokenCycler.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTokenCycler } from \"../util/tokenCycler.js\";\nimport { logger as coreLogger } from \"../log.js\";\nimport { isRestError } from \"../restError.js\";\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Try to send the given request.\n *\n * When a response is received, returns a tuple of the response received and, if the response was received\n * inside a thrown RestError, the RestError that was thrown.\n *\n * Otherwise, if an error was thrown while sending the request that did not provide an underlying response, it\n * will be rethrown.\n */\nasync function trySendRequest(request, next) {\n    try {\n        return [await next(request), undefined];\n    }\n    catch (e) {\n        if (isRestError(e) && e.response) {\n            return [e.response, e];\n        }\n        else {\n            throw e;\n        }\n    }\n}\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    // Enable CAE true by default\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n        enableCae: true,\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction isChallengeResponse(response) {\n    return response.status === 401 && response.headers.has(\"WWW-Authenticate\");\n}\n/**\n * Re-authorize the request for CAE challenge.\n * The response containing the challenge is `options.response`.\n * If this method returns true, the underlying request will be sent once again.\n */\nasync function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {\n    var _a;\n    const { scopes } = onChallengeOptions;\n    const accessToken = await onChallengeOptions.getAccessToken(scopes, {\n        enableCae: true,\n        claims: caeClaims,\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nexport function bearerTokenAuthenticationPolicy(options) {\n    var _a, _b, _c;\n    const { credential, scopes, challengeCallbacks } = options;\n    const logger = options.logger || coreLogger;\n    const callbacks = {\n        authorizeRequest: (_b = (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a === void 0 ? void 0 : _a.bind(challengeCallbacks)) !== null && _b !== void 0 ? _b : defaultAuthorizeRequest,\n        authorizeRequestOnChallenge: (_c = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c === void 0 ? void 0 : _c.bind(challengeCallbacks),\n    };\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? createTokenCycler(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken,\n                logger,\n            });\n            let response;\n            let error;\n            let shouldSendRequest;\n            [response, error] = await trySendRequest(request, next);\n            if (isChallengeResponse(response)) {\n                let claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                // Handle CAE by default when receive CAE claim\n                if (claims) {\n                    let parsedClaim;\n                    // Return the response immediately if claims is not a valid base64 encoded string\n                    try {\n                        parsedClaim = atob(claims);\n                    }\n                    catch (e) {\n                        logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                        return response;\n                    }\n                    shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        response,\n                        request,\n                        getAccessToken,\n                        logger,\n                    }, parsedClaim);\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                }\n                else if (callbacks.authorizeRequestOnChallenge) {\n                    // Handle custom challenges when client provides custom callback\n                    shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        request,\n                        response,\n                        getAccessToken,\n                        logger,\n                    });\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                    // If we get another CAE Claim, we will handle it by default and return whatever value we receive for this\n                    if (isChallengeResponse(response)) {\n                        claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                        if (claims) {\n                            let parsedClaim;\n                            try {\n                                parsedClaim = atob(claims);\n                            }\n                            catch (e) {\n                                logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                                return response;\n                            }\n                            shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                                response,\n                                request,\n                                getAccessToken,\n                                logger,\n                            }, parsedClaim);\n                            // Send updated request and handle response for RestError\n                            if (shouldSendRequest) {\n                                [response, error] = await trySendRequest(request, next);\n                            }\n                        }\n                    }\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        },\n    };\n}\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Pop e=\"f\", g=\"h\"`.\n * Into: `[ { scheme: 'Bearer', params: { a: 'b', c: 'd' } }, { scheme: 'Pop', params: { e: 'f', g: 'h' } } ]`.\n *\n * @internal\n */\nexport function parseChallenges(challenges) {\n    // Challenge regex seperates the string to individual challenges with different schemes in the format `Scheme a=\"b\", c=d`\n    // The challenge regex captures parameteres with either quotes values or unquoted values\n    const challengeRegex = /(\\w+)\\s+((?:\\w+=(?:\"[^\"]*\"|[^,]*),?\\s*)+)/g;\n    // Parameter regex captures the claims group removed from the scheme in the format `a=\"b\"` and `c=\"d\"`\n    // CAE challenge always have quoted parameters. For more reference, https://learn.microsoft.com/entra/identity-platform/claims-challenge\n    const paramRegex = /(\\w+)=\"([^\"]*)\"/g;\n    const parsedChallenges = [];\n    let match;\n    // Iterate over each challenge match\n    while ((match = challengeRegex.exec(challenges)) !== null) {\n        const scheme = match[1];\n        const paramsString = match[2];\n        const params = {};\n        let paramMatch;\n        // Iterate over each parameter match\n        while ((paramMatch = paramRegex.exec(paramsString)) !== null) {\n            params[paramMatch[1]] = paramMatch[2];\n        }\n        parsedChallenges.push({ scheme, params });\n    }\n    return parsedChallenges;\n}\n/**\n * Parse a pipeline response and look for a CAE challenge with \"Bearer\" scheme\n * Return the value in the header without parsing the challenge\n * @internal\n */\nfunction getCaeChallengeClaims(challenges) {\n    var _a;\n    if (!challenges) {\n        return;\n    }\n    // Find all challenges present in the header\n    const parsedChallenges = parseChallenges(challenges);\n    return (_a = parsedChallenges.find((x) => x.scheme === \"Bearer\" && x.params.claims && x.params.error === \"insufficient_claims\")) === null || _a === void 0 ? void 0 : _a.params.claims;\n}\n//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is bearer type or not\n */\nexport function isBearerToken(accessToken) {\n    return !accessToken.tokenType || accessToken.tokenType === \"Bearer\";\n}\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is Pop token or not\n */\nexport function isPopToken(accessToken) {\n    return accessToken.tokenType === \"pop\";\n}\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential) {\n    // Check for an object with a 'getToken' function and possibly with\n    // a 'signRequest' function.  We do this check to make sure that\n    // a ServiceClientCredentials implementor (like TokenClientCredentials\n    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n    // it doesn't actually implement TokenCredential also.\n    const castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.getToken === \"function\" &&\n        (castCredential.signRequest === undefined || castCredential.getToken.length > 0));\n}\n//# sourceMappingURL=tokenCredential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport const disableKeepAlivePolicyName = \"DisableKeepAlivePolicy\";\nexport function createDisableKeepAlivePolicy() {\n    return {\n        name: disableKeepAlivePolicyName,\n        async sendRequest(request, next) {\n            request.disableKeepAlive = true;\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nexport function pipelineContainsDisableKeepAlivePolicy(pipeline) {\n    return pipeline.getOrderedPolicies().some((policy) => policy.name === disableKeepAlivePolicyName);\n}\n//# sourceMappingURL=disableKeepAlivePolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nexport function encodeString(value) {\n    return btoa(value);\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nexport function encodeByteArray(value) {\n    let str = \"\";\n    for (let i = 0; i < value.length; i++) {\n        str += String.fromCharCode(value[i]);\n    }\n    return btoa(str);\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeString(value) {\n    const byteString = atob(value);\n    const arr = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n        arr[i] = byteString.charCodeAt(i);\n    }\n    return arr;\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeStringToString(value) {\n    return atob(value);\n}\n//# sourceMappingURL=base64-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nexport const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexport const XML_CHARKEY = \"_\";\n//# sourceMappingURL=interfaces.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nexport function isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nexport function isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nexport function isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nexport function flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n    });\n}\n//# sourceMappingURL=utils.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as base64 from \"./base64.js\";\nimport { XML_ATTRKEY, XML_CHARKEY, } from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false,\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = base64.decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = base64.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return base64.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n                typeof value.tee !== \"function\" && // browser ReadableStream\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n                objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = base64.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!isDuration(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n                        parentObject[XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                }\n                else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths) {\n                if (!res)\n                    break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [typeName];\n    while (typeNamesToCheck.length) {\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName\n            ? discriminatorValue\n            : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        }\n        else {\n            for (const [name, mapper] of Object.entries(discriminators)) {\n                if (name.startsWith(currentName + \".\") &&\n                    mapper.type.uberParent === currentName &&\n                    mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n//# sourceMappingURL=serializer.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nexport const state = {\n    operationRequestMap: new WeakMap(),\n};\n//# sourceMappingURL=state-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { state } from \"./state.js\";\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nexport function getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        state.operationRequestMap.set(request, info);\n    }\n    return info;\n}\n//# sourceMappingURL=operationHelpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { XML_CHARKEY, } from \"./interfaces.js\";\nimport { RestError, } from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY,\n        },\n    };\n    return {\n        name: deserializationPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        },\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = getOperationRequestInfo(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n    if (error) {\n        throw error;\n    }\n    else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n                valueToDeserialize =\n                    typeof valueToDeserialize === \"object\"\n                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                        : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n            }\n            catch (deserializeError) {\n                const restError = new RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse,\n                });\n                throw restError;\n            }\n        }\n        else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", { xml: {}, ignoreUnknownProperties: true });\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n    var _a;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse,\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders =\n                operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n        operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map((component) => component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 ||\n                contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            }\n            else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        }\n        catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || RestError.PARSE_ERROR;\n            const e = new RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse,\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n}\n//# sourceMappingURL=deserializationPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { MapperTypeNames } from \"./serializer.js\";\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n//# sourceMappingURL=interfaceHelpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { XML_ATTRKEY, XML_CHARKEY, } from \"./interfaces.js\";\nimport { getOperationArgumentValueFromParameter, getOperationRequestInfo, } from \"./operationHelpers.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        async sendRequest(request, next) {\n            const operationInfo = getOperationRequestInfo(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nexport function serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nexport function serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : XML_CHARKEY,\n        },\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable, } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey,\n                        });\n                    }\n                }\n                else if (typeName === MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n//# sourceMappingURL=serializationPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { deserializationPolicy } from \"./deserializationPolicy.js\";\nimport { bearerTokenAuthenticationPolicy, createPipelineFromOptions, } from \"@azure/core-rest-pipeline\";\nimport { serializationPolicy } from \"./serializationPolicy.js\";\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nexport function createClientPipeline(options = {}) {\n    const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy(bearerTokenAuthenticationPolicy({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n//# sourceMappingURL=pipeline.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\nlet cachedHttpClient;\nexport function getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = createDefaultHttpClient();\n    }\n    return cachedHttpClient;\n}\n//# sourceMappingURL=httpClientCache.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getOperationArgumentValueFromParameter } from \"./operationHelpers.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\",\n};\nexport function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */\n    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = getPathStringFromParameter(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams,\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs) {\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            }\n            else {\n                result.set(name, [existingValue, value]);\n            }\n        }\n        else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */\nexport function appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            }\n            else {\n                existingValue.push(value);\n            }\n        }\n        else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            }\n            else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [existingValue, value]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n        else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n//# sourceMappingURL=urlHelpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-client\");\n//# sourceMappingURL=log.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createPipelineRequest, } from \"@azure/core-rest-pipeline\";\nimport { createClientPipeline } from \"./pipeline.js\";\nimport { flattenResponse } from \"./utils.js\";\nimport { getCachedDefaultHttpClient } from \"./httpClientCache.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\nimport { getRequestUrl } from \"./urlHelpers.js\";\nimport { getStreamingResponseStatusCodes } from \"./interfaceHelpers.js\";\nimport { logger } from \"./log.js\";\n/**\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param credential - The credentials used for authentication with the service.\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._requestContentType = options.requestContentType;\n        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;\n        if (options.baseUri) {\n            logger.warning(\"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\");\n        }\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || getCachedDefaultHttpClient();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n            for (const { policy, position } of options.additionalPolicies) {\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase,\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const endpoint = operationSpec.baseUrl || this._endpoint;\n        if (!endpoint) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = getRequestUrl(endpoint, operationSpec, operationArguments, this);\n        const request = createPipelineRequest({\n            url,\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = getOperationRequestInfo(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        }\n        catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = flattenResponse(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return createClientPipeline(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        return options.credentialScopes;\n    }\n    if (options.endpoint) {\n        return `${options.endpoint}/.default`;\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=serviceClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://docs.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nexport const authorizeRequestOnTenantChallenge = async (challengeOptions) => {\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout,\n        },\n        tracingOptions: request.tracingOptions,\n    };\n}\n//# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest, } from \"@azure/core-rest-pipeline\";\n// We use a custom symbol to cache a reference to the original request without\n// exposing it on the public interface.\nconst originalRequestSymbol = Symbol(\"Original PipelineRequest\");\n// Symbol.for() will return the same symbol if it's already been created\n// This particular one is used in core-client to handle the case of when a request is\n// cloned but we need to retrieve the OperationSpec and OperationArguments from the\n// original request.\nconst originalClientRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nexport function toPipelineRequest(webResource, options = {}) {\n    const compatWebResource = webResource;\n    const request = compatWebResource[originalRequestSymbol];\n    const headers = createHttpHeaders(webResource.headers.toJson({ preserveCase: true }));\n    if (request) {\n        request.headers = headers;\n        return request;\n    }\n    else {\n        const newRequest = createPipelineRequest({\n            url: webResource.url,\n            method: webResource.method,\n            headers,\n            withCredentials: webResource.withCredentials,\n            timeout: webResource.timeout,\n            requestId: webResource.requestId,\n            abortSignal: webResource.abortSignal,\n            body: webResource.body,\n            formData: webResource.formData,\n            disableKeepAlive: !!webResource.keepAlive,\n            onDownloadProgress: webResource.onDownloadProgress,\n            onUploadProgress: webResource.onUploadProgress,\n            proxySettings: webResource.proxySettings,\n            streamResponseStatusCodes: webResource.streamResponseStatusCodes,\n        });\n        if (options.originalRequest) {\n            newRequest[originalClientRequestSymbol] =\n                options.originalRequest;\n        }\n        return newRequest;\n    }\n}\nexport function toWebResourceLike(request, options) {\n    var _a;\n    const originalRequest = (_a = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a !== void 0 ? _a : request;\n    const webResource = {\n        url: request.url,\n        method: request.method,\n        headers: toHttpHeadersLike(request.headers),\n        withCredentials: request.withCredentials,\n        timeout: request.timeout,\n        requestId: request.headers.get(\"x-ms-client-request-id\") || request.requestId,\n        abortSignal: request.abortSignal,\n        body: request.body,\n        formData: request.formData,\n        keepAlive: !!request.disableKeepAlive,\n        onDownloadProgress: request.onDownloadProgress,\n        onUploadProgress: request.onUploadProgress,\n        proxySettings: request.proxySettings,\n        streamResponseStatusCodes: request.streamResponseStatusCodes,\n        clone() {\n            throw new Error(\"Cannot clone a non-proxied WebResourceLike\");\n        },\n        prepare() {\n            throw new Error(\"WebResourceLike.prepare() is not supported by @azure/core-http-compat\");\n        },\n        validateRequestProperties() {\n            /** do nothing */\n        },\n    };\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(webResource, {\n            get(target, prop, receiver) {\n                if (prop === originalRequestSymbol) {\n                    return request;\n                }\n                else if (prop === \"clone\") {\n                    return () => {\n                        return toWebResourceLike(toPipelineRequest(webResource, { originalRequest }), {\n                            createProxy: true,\n                            originalRequest,\n                        });\n                    };\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"keepAlive\") {\n                    request.disableKeepAlive = !value;\n                }\n                const passThroughProps = [\n                    \"url\",\n                    \"method\",\n                    \"withCredentials\",\n                    \"timeout\",\n                    \"requestId\",\n                    \"abortSignal\",\n                    \"body\",\n                    \"formData\",\n                    \"onDownloadProgress\",\n                    \"onUploadProgress\",\n                    \"proxySettings\",\n                    \"streamResponseStatusCodes\",\n                ];\n                if (typeof prop === \"string\" && passThroughProps.includes(prop)) {\n                    request[prop] = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return webResource;\n    }\n}\n/**\n * Converts HttpHeaders from core-rest-pipeline to look like\n * HttpHeaders from core-http.\n * @param headers - HttpHeaders from core-rest-pipeline\n * @returns HttpHeaders as they looked in core-http\n */\nexport function toHttpHeadersLike(headers) {\n    return new HttpHeaders(headers.toJSON({ preserveCase: true }));\n}\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n    return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n    constructor(rawHeaders) {\n        this._headersMap = {};\n        if (rawHeaders) {\n            for (const headerName in rawHeaders) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param headerName - The name of the header to set. This value is case-insensitive.\n     * @param headerValue - The value of the header to set.\n     */\n    set(headerName, headerValue) {\n        this._headersMap[getHeaderKey(headerName)] = {\n            name: headerName,\n            value: headerValue.toString(),\n        };\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName - The name of the header.\n     */\n    get(headerName) {\n        const header = this._headersMap[getHeaderKey(headerName)];\n        return !header ? undefined : header.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n    contains(headerName) {\n        return !!this._headersMap[getHeaderKey(headerName)];\n    }\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName - The name of the header to remove.\n     */\n    remove(headerName) {\n        const result = this.contains(headerName);\n        delete this._headersMap[getHeaderKey(headerName)];\n        return result;\n    }\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n    rawHeaders() {\n        return this.toJson({ preserveCase: true });\n    }\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n    headersArray() {\n        const headers = [];\n        for (const headerKey in this._headersMap) {\n            headers.push(this._headersMap[headerKey]);\n        }\n        return headers;\n    }\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    headerNames() {\n        const headerNames = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerNames.push(headers[i].name);\n        }\n        return headerNames;\n    }\n    /**\n     * Get the header values that are contained in this collection.\n     */\n    headerValues() {\n        const headerValues = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerValues.push(headers[i].value);\n        }\n        return headerValues;\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJson(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[header.name] = header.value;\n            }\n        }\n        else {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[getHeaderKey(header.name)] = header.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJson({ preserveCase: true }));\n    }\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n    clone() {\n        const resultPreservingCasing = {};\n        for (const headerKey in this._headersMap) {\n            const header = this._headersMap[headerKey];\n            resultPreservingCasing[header.name] = header.value;\n        }\n        return new HttpHeaders(resultPreservingCasing);\n    }\n}\n//# sourceMappingURL=util.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { toHttpHeadersLike, toPipelineRequest, toWebResourceLike, } from \"./util.js\";\nconst originalResponse = Symbol(\"Original FullOperationResponse\");\n/**\n * A helper to convert response objects from the new pipeline back to the old one.\n * @param response - A response object from core-client.\n * @returns A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toCompatResponse(response, options) {\n    let request = toWebResourceLike(response.request);\n    let headers = toHttpHeadersLike(response.headers);\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(response, {\n            get(target, prop, receiver) {\n                if (prop === \"headers\") {\n                    return headers;\n                }\n                else if (prop === \"request\") {\n                    return request;\n                }\n                else if (prop === originalResponse) {\n                    return response;\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"headers\") {\n                    headers = value;\n                }\n                else if (prop === \"request\") {\n                    request = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return Object.assign(Object.assign({}, response), { request,\n            headers });\n    }\n}\n/**\n * A helper to convert back to a PipelineResponse\n * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toPipelineResponse(compatResponse) {\n    const extendedCompatResponse = compatResponse;\n    const response = extendedCompatResponse[originalResponse];\n    const headers = createHttpHeaders(compatResponse.headers.toJson({ preserveCase: true }));\n    if (response) {\n        response.headers = headers;\n        return response;\n    }\n    else {\n        return Object.assign(Object.assign({}, compatResponse), { headers, request: toPipelineRequest(compatResponse.request) });\n    }\n}\n//# sourceMappingURL=response.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createDisableKeepAlivePolicy, pipelineContainsDisableKeepAlivePolicy, } from \"./policies/disableKeepAlivePolicy.js\";\nimport { redirectPolicyName } from \"@azure/core-rest-pipeline\";\nimport { ServiceClient, } from \"@azure/core-client\";\nimport { toCompatResponse } from \"./response.js\";\n/**\n * Client to provide compatability between core V1 & V2.\n */\nexport class ExtendedServiceClient extends ServiceClient {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        if (((_a = options.keepAliveOptions) === null || _a === void 0 ? void 0 : _a.enable) === false &&\n            !pipelineContainsDisableKeepAlivePolicy(this.pipeline)) {\n            this.pipeline.addPolicy(createDisableKeepAlivePolicy());\n        }\n        if (((_b = options.redirectOptions) === null || _b === void 0 ? void 0 : _b.handleRedirects) === false) {\n            this.pipeline.removePolicy({\n                name: redirectPolicyName,\n            });\n        }\n    }\n    /**\n     * Compatible send operation request function.\n     *\n     * @param operationArguments - Operation arguments\n     * @param operationSpec - Operation Spec\n     * @returns\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        var _a;\n        const userProvidedCallBack = (_a = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n        let lastResponse;\n        function onResponse(rawResponse, flatResponse, error) {\n            lastResponse = rawResponse;\n            if (userProvidedCallBack) {\n                userProvidedCallBack(rawResponse, flatResponse, error);\n            }\n        }\n        operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), { onResponse });\n        const result = await super.sendOperationRequest(operationArguments, operationSpec);\n        if (lastResponse) {\n            Object.defineProperty(result, \"_response\", {\n                value: toCompatResponse(lastResponse),\n            });\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=extendedClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { toPipelineRequest, toWebResourceLike } from \"../util.js\";\nimport { toCompatResponse, toPipelineResponse } from \"../response.js\";\n/**\n * An enum for compatibility with RequestPolicy\n */\nexport var HttpPipelineLogLevel;\n(function (HttpPipelineLogLevel) {\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"INFO\"] = 3] = \"INFO\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"OFF\"] = 0] = \"OFF\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"WARNING\"] = 2] = \"WARNING\";\n})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));\nconst mockRequestPolicyOptions = {\n    log(_logLevel, _message) {\n        /* do nothing */\n    },\n    shouldLog(_logLevel) {\n        return false;\n    },\n};\n/**\n * The name of the RequestPolicyFactoryPolicy\n */\nexport const requestPolicyFactoryPolicyName = \"RequestPolicyFactoryPolicy\";\n/**\n * A policy that wraps policies written for core-http.\n * @param factories - An array of `RequestPolicyFactory` objects from a core-http pipeline\n */\nexport function createRequestPolicyFactoryPolicy(factories) {\n    const orderedFactories = factories.slice().reverse();\n    return {\n        name: requestPolicyFactoryPolicyName,\n        async sendRequest(request, next) {\n            let httpPipeline = {\n                async sendRequest(httpRequest) {\n                    const response = await next(toPipelineRequest(httpRequest));\n                    return toCompatResponse(response, { createProxy: true });\n                },\n            };\n            for (const factory of orderedFactories) {\n                httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);\n            }\n            const webResourceLike = toWebResourceLike(request, { createProxy: true });\n            const response = await httpPipeline.sendRequest(webResourceLike);\n            return toPipelineResponse(response);\n        },\n    };\n}\n//# sourceMappingURL=requestPolicyFactoryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Default key used to access the XML attributes.\n */\nexport const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexport const XML_CHARKEY = \"_\";\n//# sourceMappingURL=xml.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"dom\"/>\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./xml.common.js\";\nif (!document || !DOMParser || !Node || !XMLSerializer) {\n    throw new Error(`This library depends on the following DOM objects: [\"document\", \"DOMParser\", \"Node\", \"XMLSerializer\"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. `);\n}\n// Policy to make our code Trusted Types compliant at running time.\n//   https://github.com/w3c/webappsec-trusted-types\n// We are calling DOMParser.parseFromString() to parse XML payload from Azure services.\n// The parsed DOM object is not exposed to outside. Scripts are disabled when parsing\n// according to the spec.  There are no HTML/XSS security concerns on the usage of\n// parseFromString() here.\nlet ttPolicy;\ntry {\n    if (typeof self.trustedTypes !== \"undefined\") {\n        ttPolicy = self.trustedTypes.createPolicy(\"@azure/core-xml#xml.browser\", {\n            createHTML: (s) => s,\n        });\n    }\n}\ncatch (e) {\n    console.warn('Could not create trusted types policy \"@azure/core-xml#xml.browser\"');\n}\nconst doc = document.implementation.createDocument(null, null, null);\nconst parser = new DOMParser();\nexport function parseXML(str, opts = {}) {\n    var _a, _b, _c, _d, _e, _f;\n    try {\n        const updatedOptions = {\n            rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : \"\",\n            includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,\n            xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            cdataPropName: (_d = opts.cdataPropName) !== null && _d !== void 0 ? _d : \"__cdata\",\n            stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : [],\n        };\n        const dom = parser.parseFromString(((_f = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _f !== void 0 ? _f : str), \"application/xml\");\n        throwIfError(dom);\n        let obj;\n        if (updatedOptions.includeRoot) {\n            obj = domToObject(dom, updatedOptions);\n        }\n        else {\n            obj = domToObject(dom.childNodes[0], updatedOptions);\n        }\n        return Promise.resolve(obj);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\nlet errorNS;\nfunction getErrorNamespace() {\n    var _a, _b;\n    if (errorNS === undefined) {\n        try {\n            const invalidXML = ((_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(\"INVALID\")) !== null && _a !== void 0 ? _a : \"INVALID\");\n            errorNS =\n                (_b = parser.parseFromString(invalidXML, \"text/xml\").getElementsByTagName(\"parsererror\")[0]\n                    .namespaceURI) !== null && _b !== void 0 ? _b : \"\";\n        }\n        catch (ignored) {\n            // Most browsers will return a document containing <parsererror>, but IE will throw.\n            errorNS = \"\";\n        }\n    }\n    return errorNS;\n}\nfunction throwIfError(dom) {\n    const parserErrors = dom.getElementsByTagName(\"parsererror\");\n    if (parserErrors.length > 0 && getErrorNamespace()) {\n        for (let i = 0; i < parserErrors.length; i++) {\n            if (parserErrors[i].namespaceURI === errorNS) {\n                throw new Error(parserErrors[i].innerHTML);\n            }\n        }\n    }\n}\nfunction isElement(node) {\n    return !!node.attributes;\n}\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node) {\n    return isElement(node) && node.hasAttributes() ? node : undefined;\n}\nfunction domToObject(node, options) {\n    var _a;\n    let result = {};\n    const childNodeCount = node.childNodes.length;\n    const firstChildNode = node.childNodes[0];\n    const onlyChildTextValue = (firstChildNode &&\n        childNodeCount === 1 &&\n        firstChildNode.nodeType === Node.TEXT_NODE &&\n        firstChildNode.nodeValue) ||\n        undefined;\n    const elementWithAttributes = asElementWithAttributes(node);\n    if (elementWithAttributes) {\n        result[XML_ATTRKEY] = {};\n        for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n            const attr = elementWithAttributes.attributes[i];\n            result[XML_ATTRKEY][attr.nodeName] = attr.nodeValue;\n        }\n        if (onlyChildTextValue) {\n            result[options.xmlCharKey] = onlyChildTextValue;\n        }\n    }\n    else if (childNodeCount === 0) {\n        result = \"\";\n    }\n    else if (onlyChildTextValue) {\n        result = onlyChildTextValue;\n    }\n    if (!onlyChildTextValue) {\n        for (let i = 0; i < childNodeCount; i++) {\n            const child = node.childNodes[i];\n            // Check if CData\n            if ((child === null || child === void 0 ? void 0 : child.nodeType) === Node.CDATA_SECTION_NODE) {\n                // Already in the CDATA\n                result = child.textContent;\n            }\n            else if (((_a = child === null || child === void 0 ? void 0 : child.firstChild) === null || _a === void 0 ? void 0 : _a.nodeType) === Node.CDATA_SECTION_NODE) {\n                // Look if child is CDATA\n                result[child.nodeName] = child.textContent;\n            }\n            else if (child.nodeType !== Node.TEXT_NODE) {\n                // Ignore leading/trailing whitespace nodes\n                const childObject = domToObject(child, options);\n                if (!result[child.nodeName]) {\n                    result[child.nodeName] = childObject;\n                }\n                else if (Array.isArray(result[child.nodeName])) {\n                    result[child.nodeName].push(childObject);\n                }\n                else {\n                    result[child.nodeName] = [result[child.nodeName], childObject];\n                }\n            }\n        }\n    }\n    return result;\n}\nconst serializer = new XMLSerializer();\nexport function stringifyXML(content, opts = {}) {\n    var _a, _b, _c, _d, _e;\n    const updatedOptions = {\n        rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : \"root\",\n        includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,\n        xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n        cdataPropName: (_d = opts.cdataPropName) !== null && _d !== void 0 ? _d : \"__cdata\",\n        stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : [],\n    };\n    const dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];\n    return ('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' +\n        serializer.serializeToString(dom).replace(/ xmlns=\"\"/g, \"\"));\n}\nfunction buildAttributes(attrs) {\n    const result = [];\n    for (const key of Object.keys(attrs)) {\n        const attr = doc.createAttribute(key);\n        attr.value = attrs[key].toString();\n        result.push(attr);\n    }\n    return result;\n}\nfunction buildNode(obj, elementName, options) {\n    var _a;\n    if (obj === undefined ||\n        obj === null ||\n        typeof obj === \"string\" ||\n        typeof obj === \"number\" ||\n        typeof obj === \"boolean\") {\n        const elem = doc.createElement(elementName);\n        elem.textContent = obj === undefined || obj === null ? \"\" : obj.toString();\n        return [elem];\n    }\n    else if (Array.isArray(obj)) {\n        const result = [];\n        for (const arrayElem of obj) {\n            for (const child of buildNode(arrayElem, elementName, options)) {\n                result.push(child);\n            }\n        }\n        return result;\n    }\n    else if (typeof obj === \"object\") {\n        let elem;\n        if ((_a = obj[XML_ATTRKEY]) === null || _a === void 0 ? void 0 : _a[\"xmlns\"]) {\n            elem = doc.createElementNS(obj[XML_ATTRKEY][\"xmlns\"], elementName);\n        }\n        else {\n            elem = doc.createElement(elementName);\n        }\n        for (const key of Object.keys(obj)) {\n            if (key === XML_ATTRKEY) {\n                for (const attr of buildAttributes(obj[key])) {\n                    elem.attributes.setNamedItem(attr);\n                }\n            }\n            else if (key === options.xmlCharKey) {\n                elem.textContent = obj[key].toString();\n            }\n            else if (key === options.cdataPropName) {\n                const cdataElement = doc.createCDATASection(obj[key].toString());\n                elem.appendChild(cdataElement);\n            }\n            else {\n                for (const child of buildNode(obj[key], key, options)) {\n                    elem.appendChild(child);\n                }\n            }\n        }\n        return [elem];\n    }\n    else {\n        throw new Error(`Illegal value passed to buildObject: ${obj}`);\n    }\n}\n//# sourceMappingURL=xml-browser.mjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createClientLogger } from \"@azure/logger\";\n/**\n * The `@azure/logger` configuration for this package.\n */\nexport const logger = createClientLogger(\"storage-blob\");\n//# sourceMappingURL=log.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The base class from which all request policies derive.\n */\nexport class BaseRequestPolicy {\n    /**\n     * The main method to implement that manipulates a request/response.\n     */\n    constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    _nextPolicy, \n    /**\n     * The options that can be passed to a given request policy.\n     */\n    _options) {\n        this._nextPolicy = _nextPolicy;\n        this._options = _options;\n    }\n    /**\n     * Get whether or not a log with the provided log level should be logged.\n     * @param logLevel - The log level of the log that will be logged.\n     * @returns Whether or not a log with the provided log level should be logged.\n     */\n    shouldLog(logLevel) {\n        return this._options.shouldLog(logLevel);\n    }\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel - The log level of this log.\n     * @param message - The message of this log.\n     */\n    log(logLevel, message) {\n        this._options.log(logLevel, message);\n    }\n}\n//# sourceMappingURL=RequestPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport const SDK_VERSION = \"12.26.0\";\nexport const SERVICE_VERSION = \"2025-01-05\";\nexport const BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB\nexport const BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB\nexport const BLOCK_BLOB_MAX_BLOCKS = 50000;\nexport const DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB\nexport const DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB\nexport const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;\nexport const REQUEST_TIMEOUT = 100 * 1000; // In ms\n/**\n * The OAuth scope to use with Azure Storage.\n */\nexport const StorageOAuthScopes = \"https://storage.azure.com/.default\";\nexport const URLConstants = {\n    Parameters: {\n        FORCE_BROWSER_NO_CACHE: \"_\",\n        SIGNATURE: \"sig\",\n        SNAPSHOT: \"snapshot\",\n        VERSIONID: \"versionid\",\n        TIMEOUT: \"timeout\",\n    },\n};\nexport const HTTPURLConnection = {\n    HTTP_ACCEPTED: 202,\n    HTTP_CONFLICT: 409,\n    HTTP_NOT_FOUND: 404,\n    HTTP_PRECON_FAILED: 412,\n    HTTP_RANGE_NOT_SATISFIABLE: 416,\n};\nexport const HeaderConstants = {\n    AUTHORIZATION: \"Authorization\",\n    AUTHORIZATION_SCHEME: \"Bearer\",\n    CONTENT_ENCODING: \"Content-Encoding\",\n    CONTENT_ID: \"Content-ID\",\n    CONTENT_LANGUAGE: \"Content-Language\",\n    CONTENT_LENGTH: \"Content-Length\",\n    CONTENT_MD5: \"Content-Md5\",\n    CONTENT_TRANSFER_ENCODING: \"Content-Transfer-Encoding\",\n    CONTENT_TYPE: \"Content-Type\",\n    COOKIE: \"Cookie\",\n    DATE: \"date\",\n    IF_MATCH: \"if-match\",\n    IF_MODIFIED_SINCE: \"if-modified-since\",\n    IF_NONE_MATCH: \"if-none-match\",\n    IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n    PREFIX_FOR_STORAGE: \"x-ms-\",\n    RANGE: \"Range\",\n    USER_AGENT: \"User-Agent\",\n    X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n    X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n    X_MS_DATE: \"x-ms-date\",\n    X_MS_ERROR_CODE: \"x-ms-error-code\",\n    X_MS_VERSION: \"x-ms-version\",\n    X_MS_CopySourceErrorCode: \"x-ms-copy-source-error-code\",\n};\nexport const ETagNone = \"\";\nexport const ETagAny = \"*\";\nexport const SIZE_1_MB = 1 * 1024 * 1024;\nexport const BATCH_MAX_REQUEST = 256;\nexport const BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;\nexport const HTTP_LINE_ENDING = \"\\r\\n\";\nexport const HTTP_VERSION_1_1 = \"HTTP/1.1\";\nexport const EncryptionAlgorithmAES25 = \"AES256\";\nexport const DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;\nexport const StorageBlobLoggingAllowedHeaderNames = [\n    \"Access-Control-Allow-Origin\",\n    \"Cache-Control\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"Request-Id\",\n    \"traceparent\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"x-ms-client-request-id\",\n    \"x-ms-date\",\n    \"x-ms-error-code\",\n    \"x-ms-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-version\",\n    \"Accept-Ranges\",\n    \"Content-Disposition\",\n    \"Content-Encoding\",\n    \"Content-Language\",\n    \"Content-MD5\",\n    \"Content-Range\",\n    \"ETag\",\n    \"Last-Modified\",\n    \"Server\",\n    \"Vary\",\n    \"x-ms-content-crc64\",\n    \"x-ms-copy-action\",\n    \"x-ms-copy-completion-time\",\n    \"x-ms-copy-id\",\n    \"x-ms-copy-progress\",\n    \"x-ms-copy-status\",\n    \"x-ms-has-immutability-policy\",\n    \"x-ms-has-legal-hold\",\n    \"x-ms-lease-state\",\n    \"x-ms-lease-status\",\n    \"x-ms-range\",\n    \"x-ms-request-server-encrypted\",\n    \"x-ms-server-encrypted\",\n    \"x-ms-snapshot\",\n    \"x-ms-source-range\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"x-ms-access-tier\",\n    \"x-ms-access-tier-change-time\",\n    \"x-ms-access-tier-inferred\",\n    \"x-ms-account-kind\",\n    \"x-ms-archive-status\",\n    \"x-ms-blob-append-offset\",\n    \"x-ms-blob-cache-control\",\n    \"x-ms-blob-committed-block-count\",\n    \"x-ms-blob-condition-appendpos\",\n    \"x-ms-blob-condition-maxsize\",\n    \"x-ms-blob-content-disposition\",\n    \"x-ms-blob-content-encoding\",\n    \"x-ms-blob-content-language\",\n    \"x-ms-blob-content-length\",\n    \"x-ms-blob-content-md5\",\n    \"x-ms-blob-content-type\",\n    \"x-ms-blob-public-access\",\n    \"x-ms-blob-sequence-number\",\n    \"x-ms-blob-type\",\n    \"x-ms-copy-destination-snapshot\",\n    \"x-ms-creation-time\",\n    \"x-ms-default-encryption-scope\",\n    \"x-ms-delete-snapshots\",\n    \"x-ms-delete-type-permanent\",\n    \"x-ms-deny-encryption-scope-override\",\n    \"x-ms-encryption-algorithm\",\n    \"x-ms-if-sequence-number-eq\",\n    \"x-ms-if-sequence-number-le\",\n    \"x-ms-if-sequence-number-lt\",\n    \"x-ms-incremental-copy\",\n    \"x-ms-lease-action\",\n    \"x-ms-lease-break-period\",\n    \"x-ms-lease-duration\",\n    \"x-ms-lease-id\",\n    \"x-ms-lease-time\",\n    \"x-ms-page-write\",\n    \"x-ms-proposed-lease-id\",\n    \"x-ms-range-get-content-md5\",\n    \"x-ms-rehydrate-priority\",\n    \"x-ms-sequence-number-action\",\n    \"x-ms-sku-name\",\n    \"x-ms-source-content-md5\",\n    \"x-ms-source-if-match\",\n    \"x-ms-source-if-modified-since\",\n    \"x-ms-source-if-none-match\",\n    \"x-ms-source-if-unmodified-since\",\n    \"x-ms-tag-count\",\n    \"x-ms-encryption-key-sha256\",\n    \"x-ms-copy-source-error-code\",\n    \"x-ms-copy-source-status-code\",\n    \"x-ms-if-tags\",\n    \"x-ms-source-if-tags\",\n];\nexport const StorageBlobLoggingAllowedQueryParameters = [\n    \"comp\",\n    \"maxresults\",\n    \"rscc\",\n    \"rscd\",\n    \"rsce\",\n    \"rscl\",\n    \"rsct\",\n    \"se\",\n    \"si\",\n    \"sip\",\n    \"sp\",\n    \"spr\",\n    \"sr\",\n    \"srt\",\n    \"ss\",\n    \"st\",\n    \"sv\",\n    \"include\",\n    \"marker\",\n    \"prefix\",\n    \"copyid\",\n    \"restype\",\n    \"blockid\",\n    \"blocklisttype\",\n    \"delimiter\",\n    \"prevsnapshot\",\n    \"ske\",\n    \"skoid\",\n    \"sks\",\n    \"skt\",\n    \"sktid\",\n    \"skv\",\n    \"snapshot\",\n];\nexport const BlobUsesCustomerSpecifiedEncryptionMsg = \"BlobUsesCustomerSpecifiedEncryption\";\nexport const BlobDoesNotUseCustomerSpecifiedEncryption = \"BlobDoesNotUseCustomerSpecifiedEncryption\";\n/// List of ports used for path style addressing.\n/// Path style addressing means that storage account is put in URI's Path segment in instead of in host.\nexport const PathStylePorts = [\n    \"10000\",\n    \"10001\",\n    \"10002\",\n    \"10003\",\n    \"10004\",\n    \"10100\",\n    \"10101\",\n    \"10102\",\n    \"10103\",\n    \"10104\",\n    \"11000\",\n    \"11001\",\n    \"11002\",\n    \"11003\",\n    \"11004\",\n    \"11100\",\n    \"11101\",\n    \"11102\",\n    \"11103\",\n    \"11104\",\n];\n//# sourceMappingURL=constants.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { isNode } from \"@azure/core-util\";\nimport { DevelopmentConnectionString, HeaderConstants, PathStylePorts, URLConstants, } from \"./constants\";\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path || \"/\";\n    path = escape(path);\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\nfunction getProxyUriFromDevConnString(connectionString) {\n    // Development Connection String\n    // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n    let proxyUri = \"\";\n    if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n        const matchCredentials = connectionString.split(\";\");\n        for (const element of matchCredentials) {\n            if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n                proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")[1];\n            }\n        }\n    }\n    return proxyUri;\n}\nexport function getValueInConnString(connectionString, argument) {\n    const elements = connectionString.split(\";\");\n    for (const element of elements) {\n        if (element.trim().startsWith(argument)) {\n            return element.trim().match(argument + \"=(.*)\")[1];\n        }\n    }\n    return \"\";\n}\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString) {\n    let proxyUri = \"\";\n    if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n        // Development connection string\n        proxyUri = getProxyUriFromDevConnString(connectionString);\n        connectionString = DevelopmentConnectionString;\n    }\n    // Matching BlobEndpoint in the Account connection string\n    let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n    // Slicing off '/' at the end if exists\n    // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n    blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n    if (connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n        connectionString.search(\"AccountKey=\") !== -1) {\n        // Account connection string\n        let defaultEndpointsProtocol = \"\";\n        let accountName = \"\";\n        let accountKey = Buffer.from(\"accountKey\", \"base64\");\n        let endpointSuffix = \"\";\n        // Get account name and key\n        accountName = getValueInConnString(connectionString, \"AccountName\");\n        accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n        if (!blobEndpoint) {\n            // BlobEndpoint is not present in the Account connection string\n            // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n            defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n            const protocol = defaultEndpointsProtocol.toLowerCase();\n            if (protocol !== \"https\" && protocol !== \"http\") {\n                throw new Error(\"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\");\n            }\n            endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n            if (!endpointSuffix) {\n                throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n            }\n            blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n        }\n        if (!accountName) {\n            throw new Error(\"Invalid AccountName in the provided Connection String\");\n        }\n        else if (accountKey.length === 0) {\n            throw new Error(\"Invalid AccountKey in the provided Connection String\");\n        }\n        return {\n            kind: \"AccountConnString\",\n            url: blobEndpoint,\n            accountName,\n            accountKey,\n            proxyUri,\n        };\n    }\n    else {\n        // SAS connection string\n        let accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n        let accountName = getValueInConnString(connectionString, \"AccountName\");\n        // if accountName is empty, try to read it from BlobEndpoint\n        if (!accountName) {\n            accountName = getAccountNameFromUrl(blobEndpoint);\n        }\n        if (!blobEndpoint) {\n            throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n        }\n        else if (!accountSas) {\n            throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n        }\n        // client constructors assume accountSas does *not* start with ?\n        if (accountSas.startsWith(\"?\")) {\n            accountSas = accountSas.substring(1);\n        }\n        return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n    }\n}\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text) {\n    return encodeURIComponent(text)\n        .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n        .replace(/'/g, \"%27\") // Escape for \"'\"\n        .replace(/\\+/g, \"%20\")\n        .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url, name) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url, name, value) {\n    const urlParsed = new URL(url);\n    const encodedName = encodeURIComponent(name);\n    const encodedValue = value ? encodeURIComponent(value) : undefined;\n    // mutating searchParams will change the encoding, so we have to do this ourselves\n    const searchString = urlParsed.search === \"\" ? \"?\" : urlParsed.search;\n    const searchPieces = [];\n    for (const pair of searchString.slice(1).split(\"&\")) {\n        if (pair) {\n            const [key] = pair.split(\"=\", 2);\n            if (key !== encodedName) {\n                searchPieces.push(pair);\n            }\n        }\n    }\n    if (encodedValue) {\n        searchPieces.push(`${encodedName}=${encodedValue}`);\n    }\n    urlParsed.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return urlParsed.toString();\n}\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url, name) {\n    var _a;\n    const urlParsed = new URL(url);\n    return (_a = urlParsed.searchParams.get(name)) !== null && _a !== void 0 ? _a : undefined;\n}\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url, host) {\n    const urlParsed = new URL(url);\n    urlParsed.hostname = host;\n    return urlParsed.toString();\n}\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.pathname;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.protocol.endsWith(\":\") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url) {\n    const urlParsed = new URL(url);\n    const pathString = urlParsed.pathname;\n    if (!pathString) {\n        throw new RangeError(\"Invalid url without valid path.\");\n    }\n    let queryString = urlParsed.search || \"\";\n    queryString = queryString.trim();\n    if (queryString !== \"\") {\n        queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n    }\n    return `${pathString}${queryString}`;\n}\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url) {\n    let queryString = new URL(url).search;\n    if (!queryString) {\n        return {};\n    }\n    queryString = queryString.trim();\n    queryString = queryString.startsWith(\"?\") ? queryString.substring(1) : queryString;\n    let querySubStrings = queryString.split(\"&\");\n    querySubStrings = querySubStrings.filter((value) => {\n        const indexOfEqual = value.indexOf(\"=\");\n        const lastIndexOfEqual = value.lastIndexOf(\"=\");\n        return (indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1);\n    });\n    const queries = {};\n    for (const querySubString of querySubStrings) {\n        const splitResults = querySubString.split(\"=\");\n        const key = splitResults[0];\n        const value = splitResults[1];\n        queries[key] = value;\n    }\n    return queries;\n}\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url, queryParts) {\n    const urlParsed = new URL(url);\n    let query = urlParsed.search;\n    if (query) {\n        query += \"&\" + queryParts;\n    }\n    else {\n        query = queryParts;\n    }\n    urlParsed.search = query;\n    return urlParsed.toString();\n}\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date, withMilliseconds = true) {\n    // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n    const dateString = date.toISOString();\n    return withMilliseconds\n        ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n        : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content) {\n    return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString) {\n    return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix, blockIndex) {\n    // To generate a 64 bytes base64 string, source string should be 48\n    const maxSourceStringLength = 48;\n    // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n    const maxBlockIndexLength = 6;\n    const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n    if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n        blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n    }\n    const res = blockIDPrefix +\n        padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n    return base64encode(res);\n}\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport async function delay(timeInMs, aborter, abortError) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable-next-line prefer-const */\n        let timeout;\n        const abortHandler = () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            reject(abortError);\n        };\n        const resolveHandler = () => {\n            if (aborter !== undefined) {\n                aborter.removeEventListener(\"abort\", abortHandler);\n            }\n            resolve();\n        };\n        timeout = setTimeout(resolveHandler, timeInMs);\n        if (aborter !== undefined) {\n            aborter.addEventListener(\"abort\", abortHandler);\n        }\n    });\n}\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nexport function padStart(currentString, targetLength, padString = \" \") {\n    // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n    if (String.prototype.padStart) {\n        return currentString.padStart(targetLength, padString);\n    }\n    padString = padString || \" \";\n    if (currentString.length > targetLength) {\n        return currentString;\n    }\n    else {\n        targetLength = targetLength - currentString.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + currentString;\n    }\n}\nexport function sanitizeURL(url) {\n    let safeURL = url;\n    if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n        safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n    }\n    return safeURL;\n}\nexport function sanitizeHeaders(originalHeader) {\n    const headers = createHttpHeaders();\n    for (const [name, value] of originalHeader) {\n        if (name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n            headers.set(name, \"*****\");\n        }\n        else if (name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n            headers.set(name, sanitizeURL(value));\n        }\n        else {\n            headers.set(name, value);\n        }\n    }\n    return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1, str2) {\n    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nexport function getAccountNameFromUrl(url) {\n    const parsedUrl = new URL(url);\n    let accountName;\n    try {\n        if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n            // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n            accountName = parsedUrl.hostname.split(\".\")[0];\n        }\n        else if (isIpEndpointStyle(parsedUrl)) {\n            // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n            // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n            // .getPath() -> /devstoreaccount1/\n            accountName = parsedUrl.pathname.split(\"/\")[1];\n        }\n        else {\n            // Custom domain case: \"https://customdomain.com/containername/blob\".\n            accountName = \"\";\n        }\n        return accountName;\n    }\n    catch (error) {\n        throw new Error(\"Unable to extract accountName with provided information.\");\n    }\n}\nexport function isIpEndpointStyle(parsedUrl) {\n    const host = parsedUrl.host;\n    // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n    // Case 2: localhost(:port) or host.docker.internal, use broad regex to match port part.\n    // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n    // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n    return (/^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(host) ||\n        (Boolean(parsedUrl.port) && PathStylePorts.includes(parsedUrl.port)));\n}\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nexport function toBlobTagsString(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const tagPairs = [];\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return tagPairs.join(\"&\");\n}\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nexport function toBlobTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {\n        blobTagSet: [],\n    };\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            res.blobTagSet.push({\n                key,\n                value,\n            });\n        }\n    }\n    return res;\n}\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nexport function toTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {};\n    for (const blobTag of tags.blobTagSet) {\n        res[blobTag.key] = blobTag.value;\n    }\n    return res;\n}\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nexport function toQuerySerialization(textConfiguration) {\n    if (textConfiguration === undefined) {\n        return undefined;\n    }\n    switch (textConfiguration.kind) {\n        case \"csv\":\n            return {\n                format: {\n                    type: \"delimited\",\n                    delimitedTextConfiguration: {\n                        columnSeparator: textConfiguration.columnSeparator || \",\",\n                        fieldQuote: textConfiguration.fieldQuote || \"\",\n                        recordSeparator: textConfiguration.recordSeparator,\n                        escapeChar: textConfiguration.escapeCharacter || \"\",\n                        headersPresent: textConfiguration.hasHeaders || false,\n                    },\n                },\n            };\n        case \"json\":\n            return {\n                format: {\n                    type: \"json\",\n                    jsonTextConfiguration: {\n                        recordSeparator: textConfiguration.recordSeparator,\n                    },\n                },\n            };\n        case \"arrow\":\n            return {\n                format: {\n                    type: \"arrow\",\n                    arrowConfiguration: {\n                        schema: textConfiguration.schema,\n                    },\n                },\n            };\n        case \"parquet\":\n            return {\n                format: {\n                    type: \"parquet\",\n                },\n            };\n        default:\n            throw Error(\"Invalid BlobQueryTextConfiguration.\");\n    }\n}\nexport function parseObjectReplicationRecord(objectReplicationRecord) {\n    if (!objectReplicationRecord) {\n        return undefined;\n    }\n    if (\"policy-id\" in objectReplicationRecord) {\n        // If the dictionary contains a key with policy id, we are not required to do any parsing since\n        // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n        return undefined;\n    }\n    const orProperties = [];\n    for (const key in objectReplicationRecord) {\n        const ids = key.split(\"_\");\n        const policyPrefix = \"or-\";\n        if (ids[0].startsWith(policyPrefix)) {\n            ids[0] = ids[0].substring(policyPrefix.length);\n        }\n        const rule = {\n            ruleId: ids[1],\n            replicationStatus: objectReplicationRecord[key],\n        };\n        const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n        if (policyIndex > -1) {\n            orProperties[policyIndex].rules.push(rule);\n        }\n        else {\n            orProperties.push({\n                policyId: ids[0],\n                rules: [rule],\n            });\n        }\n    }\n    return orProperties;\n}\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nexport function attachCredential(thing, credential) {\n    thing.credential = credential;\n    return thing;\n}\nexport function httpAuthorizationToString(httpAuthorization) {\n    return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\nexport function BlobNameToString(name) {\n    if (name.encoded) {\n        return decodeURIComponent(name.content);\n    }\n    else {\n        return name.content;\n    }\n}\nexport function ConvertInternalResponseOfListBlobFlat(internalResponse) {\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nexport function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {\n    var _a;\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });\n                return blobPrefix;\n            }),\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nexport function* ExtractPageRangeInfoItems(getPageRangesSegment) {\n    let pageRange = [];\n    let clearRange = [];\n    if (getPageRangesSegment.pageRange)\n        pageRange = getPageRangesSegment.pageRange;\n    if (getPageRangesSegment.clearRange)\n        clearRange = getPageRangesSegment.clearRange;\n    let pageRangeIndex = 0;\n    let clearRangeIndex = 0;\n    while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n        if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n            yield {\n                start: pageRange[pageRangeIndex].start,\n                end: pageRange[pageRangeIndex].end,\n                isClear: false,\n            };\n            ++pageRangeIndex;\n        }\n        else {\n            yield {\n                start: clearRange[clearRangeIndex].start,\n                end: clearRange[clearRangeIndex].end,\n                isClear: true,\n            };\n            ++clearRangeIndex;\n        }\n    }\n    for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n        yield {\n            start: pageRange[pageRangeIndex].start,\n            end: pageRange[pageRangeIndex].end,\n            isClear: false,\n        };\n    }\n    for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n        yield {\n            start: clearRange[clearRangeIndex].start,\n            end: clearRange[clearRangeIndex].end,\n            isClear: true,\n        };\n    }\n}\n/**\n * Escape the blobName but keep path separator ('/').\n */\nexport function EscapePath(blobName) {\n    const split = blobName.split(\"/\");\n    for (let i = 0; i < split.length; i++) {\n        split[i] = encodeURIComponent(split[i]);\n    }\n    return split.join(\"/\");\n}\n/**\n * A typesafe helper for ensuring that a given response object has\n * the original _response attached.\n * @param response - A response object from calling a client operation\n * @returns The same object, but with known _response property\n */\nexport function assertResponse(response) {\n    if (`_response` in response) {\n        return response;\n    }\n    throw new TypeError(`Unexpected response object ${response}`);\n}\n//# sourceMappingURL=utils.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"./RequestPolicy\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions) {\n    return {\n        create: (nextPolicy, options) => {\n            return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n        },\n    };\n}\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n    /**\n     * Creates an instance of RetryPolicy.\n     *\n     * @param nextPolicy -\n     * @param options -\n     * @param retryOptions -\n     */\n    constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n        super(nextPolicy, options);\n        // Initialize retry options\n        this.retryOptions = {\n            retryPolicyType: retryOptions.retryPolicyType\n                ? retryOptions.retryPolicyType\n                : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1\n                ? Math.floor(retryOptions.maxTries)\n                : DEFAULT_RETRY_OPTIONS.maxTries,\n            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n                ? retryOptions.tryTimeoutInMs\n                : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n                ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs\n                    ? retryOptions.maxRetryDelayInMs\n                    : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs)\n                : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n            secondaryHost: retryOptions.secondaryHost\n                ? retryOptions.secondaryHost\n                : DEFAULT_RETRY_OPTIONS.secondaryHost,\n        };\n    }\n    /**\n     * Sends request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        return this.attemptSendRequest(request, false, 1);\n    }\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n    async attemptSendRequest(request, secondaryHas404, attempt) {\n        const newRequest = request.clone();\n        const isPrimaryRetry = secondaryHas404 ||\n            !this.retryOptions.secondaryHost ||\n            !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n            attempt % 2 === 1;\n        if (!isPrimaryRetry) {\n            newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);\n        }\n        // Set the server-side timeout query parameter \"timeout=[seconds]\"\n        if (this.retryOptions.tryTimeoutInMs) {\n            newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n        }\n        let response;\n        try {\n            logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n            response = await this._nextPolicy.sendRequest(newRequest);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                return response;\n            }\n            secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n        }\n        catch (err) {\n            logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n                throw err;\n            }\n        }\n        await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n        return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n    }\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n    shouldRetry(isPrimaryRetry, attempt, response, err) {\n        if (attempt >= this.retryOptions.maxTries) {\n            logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n                .maxTries}, no further try.`);\n            return false;\n        }\n        // Handle network failures, you may need to customize the list when you implement\n        // your own http client\n        const retriableErrors = [\n            \"ETIMEDOUT\",\n            \"ESOCKETTIMEDOUT\",\n            \"ECONNREFUSED\",\n            \"ECONNRESET\",\n            \"ENOENT\",\n            \"ENOTFOUND\",\n            \"TIMEOUT\",\n            \"EPIPE\",\n            \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n        ];\n        if (err) {\n            for (const retriableError of retriableErrors) {\n                if (err.name.toUpperCase().includes(retriableError) ||\n                    err.message.toUpperCase().includes(retriableError) ||\n                    (err.code && err.code.toString().toUpperCase() === retriableError)) {\n                    logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || err) {\n            const statusCode = response ? response.status : err ? err.statusCode : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n            logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n    async delay(isPrimaryRetry, attempt, abortSignal) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (this.retryOptions.retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = this.retryOptions.retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StorageRetryPolicy, StorageRetryPolicyType } from \"./policies/StorageRetryPolicy\";\nexport { StorageRetryPolicyType, StorageRetryPolicy };\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n */\nexport class StorageRetryPolicyFactory {\n    /**\n     * Creates an instance of StorageRetryPolicyFactory.\n     * @param retryOptions -\n     */\n    constructor(retryOptions) {\n        this.retryOptions = retryOptions;\n    }\n    /**\n     * Creates a StorageRetryPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicyFactory.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport class StorageSharedKeyCredential {\n}\n//# sourceMappingURL=StorageSharedKeyCredential.browser.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { BaseRequestPolicy } from \"./RequestPolicy\";\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n */\nexport class CredentialPolicy extends BaseRequestPolicy {\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    sendRequest(request) {\n        return this._nextPolicy.sendRequest(this.signRequest(request));\n    }\n    /**\n     * Child classes must implement this method with request signing. This method\n     * will be executed in {@link sendRequest}.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        // Child classes must override this method with request signing. This method\n        // will be executed in sendRequest().\n        return request;\n    }\n}\n//# sourceMappingURL=CredentialPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n    /**\n     * Creates an instance of AnonymousCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredentialPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n */\nexport class Credential {\n    /**\n     * Creates a RequestPolicy object.\n     *\n     * @param _nextPolicy -\n     * @param _options -\n     */\n    create(_nextPolicy, _options) {\n        throw new Error(\"Method should be implemented in children classes.\");\n    }\n}\n//# sourceMappingURL=Credential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n */\nexport class AnonymousCredential extends Credential {\n    /**\n     * Creates an {@link AnonymousCredentialPolicy} object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new AnonymousCredentialPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\nlet _defaultHttpClient;\nexport function getCachedDefaultHttpClient() {\n    if (!_defaultHttpClient) {\n        _defaultHttpClient = createDefaultHttpClient();\n    }\n    return _defaultHttpClient;\n}\n//# sourceMappingURL=cache.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { isRestError, RestError } from \"@azure/core-rest-pipeline\";\nimport { getErrorMessage } from \"@azure/core-util\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * Name of the {@link storageRetryPolicy}\n */\nexport const storageRetryPolicyName = \"storageRetryPolicy\";\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst retriableErrors = [\n    \"ETIMEDOUT\",\n    \"ESOCKETTIMEDOUT\",\n    \"ECONNREFUSED\",\n    \"ECONNRESET\",\n    \"ENOENT\",\n    \"ENOTFOUND\",\n    \"TIMEOUT\",\n    \"EPIPE\",\n    \"REQUEST_SEND_ERROR\",\n];\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport function storageRetryPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f;\n    const retryPolicyType = (_a = options.retryPolicyType) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_OPTIONS.retryPolicyType;\n    const maxTries = (_b = options.maxTries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_OPTIONS.maxTries;\n    const retryDelayInMs = (_c = options.retryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_RETRY_OPTIONS.retryDelayInMs;\n    const maxRetryDelayInMs = (_d = options.maxRetryDelayInMs) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs;\n    const secondaryHost = (_e = options.secondaryHost) !== null && _e !== void 0 ? _e : DEFAULT_RETRY_OPTIONS.secondaryHost;\n    const tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;\n    function shouldRetry({ isPrimaryRetry, attempt, response, error, }) {\n        var _a, _b;\n        if (attempt >= maxTries) {\n            logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`);\n            return false;\n        }\n        if (error) {\n            for (const retriableError of retriableErrors) {\n                if (error.name.toUpperCase().includes(retriableError) ||\n                    error.message.toUpperCase().includes(retriableError) ||\n                    (error.code && error.code.toString().toUpperCase() === retriableError)) {\n                    logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n            if ((error === null || error === void 0 ? void 0 : error.code) === \"PARSE_ERROR\" &&\n                (error === null || error === void 0 ? void 0 : error.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n                logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n                return true;\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || error) {\n            const statusCode = (_b = (_a = response === null || response === void 0 ? void 0 : response.status) !== null && _a !== void 0 ? _a : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b !== void 0 ? _b : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        return false;\n    }\n    function calculateDelay(isPrimaryRetry, attempt) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delayTimeInMs;\n    }\n    return {\n        name: storageRetryPolicyName,\n        async sendRequest(request, next) {\n            // Set the server-side timeout query parameter \"timeout=[seconds]\"\n            if (tryTimeoutInMs) {\n                request.url = setURLParameter(request.url, URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1000)));\n            }\n            const primaryUrl = request.url;\n            const secondaryUrl = secondaryHost ? setURLHost(request.url, secondaryHost) : undefined;\n            let secondaryHas404 = false;\n            let attempt = 1;\n            let retryAgain = true;\n            let response;\n            let error;\n            while (retryAgain) {\n                const isPrimaryRetry = secondaryHas404 ||\n                    !secondaryUrl ||\n                    ![\"GET\", \"HEAD\", \"OPTIONS\"].includes(request.method) ||\n                    attempt % 2 === 1;\n                request.url = isPrimaryRetry ? primaryUrl : secondaryUrl;\n                response = undefined;\n                error = undefined;\n                try {\n                    logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n                    response = await next(request);\n                    secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n                }\n                catch (e) {\n                    if (isRestError(e)) {\n                        logger.error(`RetryPolicy: Caught error, message: ${e.message}, code: ${e.code}`);\n                        error = e;\n                    }\n                    else {\n                        logger.error(`RetryPolicy: Caught error, message: ${getErrorMessage(e)}`);\n                        throw e;\n                    }\n                }\n                retryAgain = shouldRetry({ isPrimaryRetry, attempt, response, error });\n                if (retryAgain) {\n                    await delay(calculateDelay(isPrimaryRetry, attempt), request.abortSignal, RETRY_ABORT_ERROR);\n                }\n                attempt++;\n            }\n            if (response) {\n                return response;\n            }\n            throw error !== null && error !== void 0 ? error : new RestError(\"RetryPolicy failed without known error.\");\n        },\n    };\n}\n//# sourceMappingURL=StorageRetryPolicyV2.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { BaseRequestPolicy } from \"./RequestPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n    /**\n     * Creates an instance of StorageBrowserPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        if (isNode) {\n            return this._nextPolicy.sendRequest(request);\n        }\n        if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n            request.url = setURLParameter(request.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n        }\n        request.headers.remove(HeaderConstants.COOKIE);\n        // According to XHR standards, content-length should be fully controlled by browsers\n        request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n        return this._nextPolicy.sendRequest(request);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StorageBrowserPolicy } from \"./policies/StorageBrowserPolicy\";\nexport { StorageBrowserPolicy };\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.\n */\nexport class StorageBrowserPolicyFactory {\n    /**\n     * Creates a StorageBrowserPolicyFactory object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new StorageBrowserPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicyFactory.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __rest } from \"tslib\";\nimport { convertHttpClient, createRequestPolicyFactoryPolicy, } from \"@azure/core-http-compat\";\nimport { bearerTokenAuthenticationPolicy, decompressResponsePolicyName, } from \"@azure/core-rest-pipeline\";\nimport { authorizeRequestOnTenantChallenge, createClientPipeline } from \"@azure/core-client\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { logger } from \"./log\";\nimport { StorageRetryPolicyFactory } from \"./StorageRetryPolicyFactory\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageOAuthScopes, StorageBlobLoggingAllowedHeaderNames, StorageBlobLoggingAllowedQueryParameters, SDK_VERSION, } from \"./utils/constants\";\nimport { getCachedDefaultHttpClient } from \"./utils/cache\";\nimport { storageBrowserPolicy } from \"./policies/StorageBrowserPolicyV2\";\nimport { storageRetryPolicy } from \"./policies/StorageRetryPolicyV2\";\nimport { storageSharedKeyCredentialPolicy } from \"./policies/StorageSharedKeyCredentialPolicyV2\";\nimport { StorageBrowserPolicyFactory } from \"./StorageBrowserPolicyFactory\";\nimport { storageCorrectContentLengthPolicy } from \"./policies/StorageCorrectContentLengthPolicy\";\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport { StorageOAuthScopes, };\n/**\n * A helper to decide if a given argument satisfies the Pipeline contract\n * @param pipeline - An argument that may be a Pipeline\n * @returns true when the argument satisfies the Pipeline contract\n */\nexport function isPipelineLike(pipeline) {\n    if (!pipeline || typeof pipeline !== \"object\") {\n        return false;\n    }\n    const castPipeline = pipeline;\n    return (Array.isArray(castPipeline.factories) &&\n        typeof castPipeline.options === \"object\" &&\n        typeof castPipeline.toServiceClientOptions === \"function\");\n}\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nexport class Pipeline {\n    /**\n     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n     *\n     * @param factories -\n     * @param options -\n     */\n    constructor(factories, options = {}) {\n        this.factories = factories;\n        this.options = options;\n    }\n    /**\n     * Transfer Pipeline object to ServiceClientOptions object which is required by\n     * ServiceClient constructor.\n     *\n     * @returns The ServiceClientOptions object from this Pipeline.\n     */\n    toServiceClientOptions() {\n        return {\n            httpClient: this.options.httpClient,\n            requestPolicyFactories: this.factories,\n        };\n    }\n}\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nexport function newPipeline(credential, pipelineOptions = {}) {\n    if (!credential) {\n        credential = new AnonymousCredential();\n    }\n    const pipeline = new Pipeline([], pipelineOptions);\n    pipeline._credential = credential;\n    return pipeline;\n}\nfunction processDownlevelPipeline(pipeline) {\n    const knownFactoryFunctions = [\n        isAnonymousCredential,\n        isStorageSharedKeyCredential,\n        isCoreHttpBearerTokenFactory,\n        isStorageBrowserPolicyFactory,\n        isStorageRetryPolicyFactory,\n        isStorageTelemetryPolicyFactory,\n        isCoreHttpPolicyFactory,\n    ];\n    if (pipeline.factories.length) {\n        const novelFactories = pipeline.factories.filter((factory) => {\n            return !knownFactoryFunctions.some((knownFactory) => knownFactory(factory));\n        });\n        if (novelFactories.length) {\n            const hasInjector = novelFactories.some((factory) => isInjectorPolicyFactory(factory));\n            // if there are any left over, wrap in a requestPolicyFactoryPolicy\n            return {\n                wrappedPolicies: createRequestPolicyFactoryPolicy(novelFactories),\n                afterRetry: hasInjector,\n            };\n        }\n    }\n    return undefined;\n}\nexport function getCoreClientOptions(pipeline) {\n    var _a;\n    const _b = pipeline.options, { httpClient: v1Client } = _b, restOptions = __rest(_b, [\"httpClient\"]);\n    let httpClient = pipeline._coreHttpClient;\n    if (!httpClient) {\n        httpClient = v1Client ? convertHttpClient(v1Client) : getCachedDefaultHttpClient();\n        pipeline._coreHttpClient = httpClient;\n    }\n    let corePipeline = pipeline._corePipeline;\n    if (!corePipeline) {\n        const packageDetails = `azsdk-js-azure-storage-blob/${SDK_VERSION}`;\n        const userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix\n            ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        corePipeline = createClientPipeline(Object.assign(Object.assign({}, restOptions), { loggingOptions: {\n                additionalAllowedHeaderNames: StorageBlobLoggingAllowedHeaderNames,\n                additionalAllowedQueryParameters: StorageBlobLoggingAllowedQueryParameters,\n                logger: logger.info,\n            }, userAgentOptions: {\n                userAgentPrefix,\n            }, serializationOptions: {\n                stringifyXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            }, deserializationOptions: {\n                parseXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            } }));\n        corePipeline.removePolicy({ phase: \"Retry\" });\n        corePipeline.removePolicy({ name: decompressResponsePolicyName });\n        corePipeline.addPolicy(storageCorrectContentLengthPolicy());\n        corePipeline.addPolicy(storageRetryPolicy(restOptions.retryOptions), { phase: \"Retry\" });\n        corePipeline.addPolicy(storageBrowserPolicy());\n        const downlevelResults = processDownlevelPipeline(pipeline);\n        if (downlevelResults) {\n            corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? { afterPhase: \"Retry\" } : undefined);\n        }\n        const credential = getCredentialFromPipeline(pipeline);\n        if (isTokenCredential(credential)) {\n            corePipeline.addPolicy(bearerTokenAuthenticationPolicy({\n                credential,\n                scopes: (_a = restOptions.audience) !== null && _a !== void 0 ? _a : StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof StorageSharedKeyCredential) {\n            corePipeline.addPolicy(storageSharedKeyCredentialPolicy({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        pipeline._corePipeline = corePipeline;\n    }\n    return Object.assign(Object.assign({}, restOptions), { allowInsecureConnection: true, httpClient, pipeline: corePipeline });\n}\nexport function getCredentialFromPipeline(pipeline) {\n    // see if we squirreled one away on the type itself\n    if (pipeline._credential) {\n        return pipeline._credential;\n    }\n    // if it came from another package, loop over the factories and look for one like before\n    let credential = new AnonymousCredential();\n    for (const factory of pipeline.factories) {\n        if (isTokenCredential(factory.credential)) {\n            // Only works if the factory has been attached a \"credential\" property.\n            // We do that in newPipeline() when using TokenCredential.\n            credential = factory.credential;\n        }\n        else if (isStorageSharedKeyCredential(factory)) {\n            return factory;\n        }\n    }\n    return credential;\n}\nfunction isStorageSharedKeyCredential(factory) {\n    if (factory instanceof StorageSharedKeyCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageSharedKeyCredential\";\n}\nfunction isAnonymousCredential(factory) {\n    if (factory instanceof AnonymousCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"AnonymousCredential\";\n}\nfunction isCoreHttpBearerTokenFactory(factory) {\n    return isTokenCredential(factory.credential);\n}\nfunction isStorageBrowserPolicyFactory(factory) {\n    if (factory instanceof StorageBrowserPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageBrowserPolicyFactory\";\n}\nfunction isStorageRetryPolicyFactory(factory) {\n    if (factory instanceof StorageRetryPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageRetryPolicyFactory\";\n}\nfunction isStorageTelemetryPolicyFactory(factory) {\n    return factory.constructor.name === \"TelemetryPolicyFactory\";\n}\nfunction isInjectorPolicyFactory(factory) {\n    return factory.constructor.name === \"InjectorPolicyFactory\";\n}\nfunction isCoreHttpPolicyFactory(factory) {\n    const knownPolicies = [\n        \"GenerateClientRequestIdPolicy\",\n        \"TracingPolicy\",\n        \"LogPolicy\",\n        \"ProxyPolicy\",\n        \"DisableResponseDecompressionPolicy\",\n        \"KeepAlivePolicy\",\n        \"DeserializationPolicy\",\n    ];\n    const mockHttpClient = {\n        sendRequest: async (request) => {\n            return {\n                request,\n                headers: request.headers.clone(),\n                status: 500,\n            };\n        },\n    };\n    const mockRequestPolicyOptions = {\n        log(_logLevel, _message) {\n            /* do nothing */\n        },\n        shouldLog(_logLevel) {\n            return false;\n        },\n    };\n    const policyInstance = factory.create(mockHttpClient, mockRequestPolicyOptions);\n    const policyName = policyInstance.constructor.name;\n    // bundlers sometimes add a custom suffix to the class name to make it unique\n    return knownPolicies.some((knownPolicyName) => {\n        return policyName.startsWith(knownPolicyName);\n    });\n}\n//# sourceMappingURL=Pipeline.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { toPipelineResponse } from \"./response.js\";\nimport { toWebResourceLike } from \"./util.js\";\n/**\n * Converts a RequestPolicy based HttpClient to a PipelineRequest based HttpClient.\n * @param requestPolicyClient - A HttpClient compatible with core-http\n * @returns A HttpClient compatible with core-rest-pipeline\n */\nexport function convertHttpClient(requestPolicyClient) {\n    return {\n        sendRequest: async (request) => {\n            const response = await requestPolicyClient.sendRequest(toWebResourceLike(request, { createProxy: true }));\n            return toPipelineResponse(response);\n        },\n    };\n}\n//# sourceMappingURL=httpClientAdapter.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the storageCorrectContentLengthPolicy.\n */\nexport const storageCorrectContentLengthPolicyName = \"StorageCorrectContentLengthPolicy\";\n/**\n * storageCorrectContentLengthPolicy to correctly set Content-Length header with request body length.\n */\nexport function storageCorrectContentLengthPolicy() {\n    return {\n        name: storageCorrectContentLengthPolicyName,\n        async sendRequest(request, next) {\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageCorrectContentLengthPolicy.browser.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isNode } from \"@azure/core-util\";\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n/**\n * The programmatic identifier of the StorageBrowserPolicy.\n */\nexport const storageBrowserPolicyName = \"storageBrowserPolicy\";\n/**\n * storageBrowserPolicy is a policy used to prevent browsers from caching requests\n * and to remove cookies and explicit content-length headers.\n */\nexport function storageBrowserPolicy() {\n    return {\n        name: storageBrowserPolicyName,\n        async sendRequest(request, next) {\n            if (isNode) {\n                return next(request);\n            }\n            if (request.method === \"GET\" || request.method === \"HEAD\") {\n                request.url = setURLParameter(request.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n            }\n            request.headers.delete(HeaderConstants.COOKIE);\n            // According to XHR standards, content-length should be fully controlled by browsers\n            request.headers.delete(HeaderConstants.CONTENT_LENGTH);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageBrowserPolicyV2.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the storageSharedKeyCredentialPolicy.\n */\nexport const storageSharedKeyCredentialPolicyName = \"storageSharedKeyCredentialPolicy\";\n/**\n * storageSharedKeyCredentialPolicy handles signing requests using storage account keys.\n */\nexport function storageSharedKeyCredentialPolicy(_options) {\n    return {\n        name: storageSharedKeyCredentialPolicyName,\n        async sendRequest(request, next) {\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicyV2.browser.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nexport const BlobServiceProperties = {\n    serializedName: \"BlobServiceProperties\",\n    xmlName: \"StorageServiceProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceProperties\",\n        modelProperties: {\n            blobAnalyticsLogging: {\n                serializedName: \"Logging\",\n                xmlName: \"Logging\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Logging\",\n                },\n            },\n            hourMetrics: {\n                serializedName: \"HourMetrics\",\n                xmlName: \"HourMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            minuteMetrics: {\n                serializedName: \"MinuteMetrics\",\n                xmlName: \"MinuteMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            cors: {\n                serializedName: \"Cors\",\n                xmlName: \"Cors\",\n                xmlIsWrapped: true,\n                xmlElementName: \"CorsRule\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"CorsRule\",\n                        },\n                    },\n                },\n            },\n            defaultServiceVersion: {\n                serializedName: \"DefaultServiceVersion\",\n                xmlName: \"DefaultServiceVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteRetentionPolicy: {\n                serializedName: \"DeleteRetentionPolicy\",\n                xmlName: \"DeleteRetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n            staticWebsite: {\n                serializedName: \"StaticWebsite\",\n                xmlName: \"StaticWebsite\",\n                type: {\n                    name: \"Composite\",\n                    className: \"StaticWebsite\",\n                },\n            },\n        },\n    },\n};\nexport const Logging = {\n    serializedName: \"Logging\",\n    type: {\n        name: \"Composite\",\n        className: \"Logging\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                required: true,\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteProperty: {\n                serializedName: \"Delete\",\n                required: true,\n                xmlName: \"Delete\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            read: {\n                serializedName: \"Read\",\n                required: true,\n                xmlName: \"Read\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            write: {\n                serializedName: \"Write\",\n                required: true,\n                xmlName: \"Write\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nexport const RetentionPolicy = {\n    serializedName: \"RetentionPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"RetentionPolicy\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            days: {\n                constraints: {\n                    InclusiveMinimum: 1,\n                },\n                serializedName: \"Days\",\n                xmlName: \"Days\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const Metrics = {\n    serializedName: \"Metrics\",\n    type: {\n        name: \"Composite\",\n        className: \"Metrics\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            includeAPIs: {\n                serializedName: \"IncludeAPIs\",\n                xmlName: \"IncludeAPIs\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nexport const CorsRule = {\n    serializedName: \"CorsRule\",\n    type: {\n        name: \"Composite\",\n        className: \"CorsRule\",\n        modelProperties: {\n            allowedOrigins: {\n                serializedName: \"AllowedOrigins\",\n                required: true,\n                xmlName: \"AllowedOrigins\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedMethods: {\n                serializedName: \"AllowedMethods\",\n                required: true,\n                xmlName: \"AllowedMethods\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedHeaders: {\n                serializedName: \"AllowedHeaders\",\n                required: true,\n                xmlName: \"AllowedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            exposedHeaders: {\n                serializedName: \"ExposedHeaders\",\n                required: true,\n                xmlName: \"ExposedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxAgeInSeconds: {\n                constraints: {\n                    InclusiveMinimum: 0,\n                },\n                serializedName: \"MaxAgeInSeconds\",\n                required: true,\n                xmlName: \"MaxAgeInSeconds\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const StaticWebsite = {\n    serializedName: \"StaticWebsite\",\n    type: {\n        name: \"Composite\",\n        className: \"StaticWebsite\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            indexDocument: {\n                serializedName: \"IndexDocument\",\n                xmlName: \"IndexDocument\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorDocument404Path: {\n                serializedName: \"ErrorDocument404Path\",\n                xmlName: \"ErrorDocument404Path\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            defaultIndexDocumentPath: {\n                serializedName: \"DefaultIndexDocumentPath\",\n                xmlName: \"DefaultIndexDocumentPath\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const StorageError = {\n    serializedName: \"StorageError\",\n    type: {\n        name: \"Composite\",\n        className: \"StorageError\",\n        modelProperties: {\n            message: {\n                serializedName: \"Message\",\n                xmlName: \"Message\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            code: {\n                serializedName: \"Code\",\n                xmlName: \"Code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            authenticationErrorDetail: {\n                serializedName: \"AuthenticationErrorDetail\",\n                xmlName: \"AuthenticationErrorDetail\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobServiceStatistics = {\n    serializedName: \"BlobServiceStatistics\",\n    xmlName: \"StorageServiceStats\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceStatistics\",\n        modelProperties: {\n            geoReplication: {\n                serializedName: \"GeoReplication\",\n                xmlName: \"GeoReplication\",\n                type: {\n                    name: \"Composite\",\n                    className: \"GeoReplication\",\n                },\n            },\n        },\n    },\n};\nexport const GeoReplication = {\n    serializedName: \"GeoReplication\",\n    type: {\n        name: \"Composite\",\n        className: \"GeoReplication\",\n        modelProperties: {\n            status: {\n                serializedName: \"Status\",\n                required: true,\n                xmlName: \"Status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"live\", \"bootstrap\", \"unavailable\"],\n                },\n            },\n            lastSyncOn: {\n                serializedName: \"LastSyncTime\",\n                required: true,\n                xmlName: \"LastSyncTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ListContainersSegmentResponse = {\n    serializedName: \"ListContainersSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListContainersSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            containerItems: {\n                serializedName: \"ContainerItems\",\n                required: true,\n                xmlName: \"Containers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Container\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ContainerItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerItem = {\n    serializedName: \"ContainerItem\",\n    xmlName: \"Container\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ContainerProperties\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n        },\n    },\n};\nexport const ContainerProperties = {\n    serializedName: \"ContainerProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerProperties\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            publicAccess: {\n                serializedName: \"PublicAccess\",\n                xmlName: \"PublicAccess\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"HasImmutabilityPolicy\",\n                xmlName: \"HasImmutabilityPolicy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"HasLegalHold\",\n                xmlName: \"HasLegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"DefaultEncryptionScope\",\n                xmlName: \"DefaultEncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            preventEncryptionScopeOverride: {\n                serializedName: \"DenyEncryptionScopeOverride\",\n                xmlName: \"DenyEncryptionScopeOverride\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"ImmutableStorageWithVersioningEnabled\",\n                xmlName: \"ImmutableStorageWithVersioningEnabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const KeyInfo = {\n    serializedName: \"KeyInfo\",\n    type: {\n        name: \"Composite\",\n        className: \"KeyInfo\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                required: true,\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const UserDelegationKey = {\n    serializedName: \"UserDelegationKey\",\n    type: {\n        name: \"Composite\",\n        className: \"UserDelegationKey\",\n        modelProperties: {\n            signedObjectId: {\n                serializedName: \"SignedOid\",\n                required: true,\n                xmlName: \"SignedOid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedTenantId: {\n                serializedName: \"SignedTid\",\n                required: true,\n                xmlName: \"SignedTid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedStartsOn: {\n                serializedName: \"SignedStart\",\n                required: true,\n                xmlName: \"SignedStart\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedExpiresOn: {\n                serializedName: \"SignedExpiry\",\n                required: true,\n                xmlName: \"SignedExpiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedService: {\n                serializedName: \"SignedService\",\n                required: true,\n                xmlName: \"SignedService\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedVersion: {\n                serializedName: \"SignedVersion\",\n                required: true,\n                xmlName: \"SignedVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const FilterBlobSegment = {\n    serializedName: \"FilterBlobSegment\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobSegment\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            where: {\n                serializedName: \"Where\",\n                required: true,\n                xmlName: \"Where\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobs: {\n                serializedName: \"Blobs\",\n                required: true,\n                xmlName: \"Blobs\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"FilterBlobItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const FilterBlobItem = {\n    serializedName: \"FilterBlobItem\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            tags: {\n                serializedName: \"Tags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n        },\n    },\n};\nexport const BlobTags = {\n    serializedName: \"BlobTags\",\n    xmlName: \"Tags\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTags\",\n        modelProperties: {\n            blobTagSet: {\n                serializedName: \"BlobTagSet\",\n                required: true,\n                xmlName: \"TagSet\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Tag\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobTag\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlobTag = {\n    serializedName: \"BlobTag\",\n    xmlName: \"Tag\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTag\",\n        modelProperties: {\n            key: {\n                serializedName: \"Key\",\n                required: true,\n                xmlName: \"Key\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const SignedIdentifier = {\n    serializedName: \"SignedIdentifier\",\n    xmlName: \"SignedIdentifier\",\n    type: {\n        name: \"Composite\",\n        className: \"SignedIdentifier\",\n        modelProperties: {\n            id: {\n                serializedName: \"Id\",\n                required: true,\n                xmlName: \"Id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessPolicy: {\n                serializedName: \"AccessPolicy\",\n                xmlName: \"AccessPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"AccessPolicy\",\n                },\n            },\n        },\n    },\n};\nexport const AccessPolicy = {\n    serializedName: \"AccessPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"AccessPolicy\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            permissions: {\n                serializedName: \"Permission\",\n                xmlName: \"Permission\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ListBlobsFlatSegmentResponse = {\n    serializedName: \"ListBlobsFlatSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsFlatSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobFlatListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobFlatListSegment = {\n    serializedName: \"BlobFlatListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobFlatListSegment\",\n        modelProperties: {\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlobItemInternal = {\n    serializedName: \"BlobItemInternal\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobItemInternal\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                required: true,\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            snapshot: {\n                serializedName: \"Snapshot\",\n                required: true,\n                xmlName: \"Snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"VersionId\",\n                xmlName: \"VersionId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"IsCurrentVersion\",\n                xmlName: \"IsCurrentVersion\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobPropertiesInternal\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobTags: {\n                serializedName: \"BlobTags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n            objectReplicationMetadata: {\n                serializedName: \"ObjectReplicationMetadata\",\n                xmlName: \"OrMetadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            hasVersionsOnly: {\n                serializedName: \"HasVersionsOnly\",\n                xmlName: \"HasVersionsOnly\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const BlobName = {\n    serializedName: \"BlobName\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobName\",\n        modelProperties: {\n            encoded: {\n                serializedName: \"Encoded\",\n                xmlName: \"Encoded\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            content: {\n                serializedName: \"content\",\n                xmlName: \"content\",\n                xmlIsMsText: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobPropertiesInternal = {\n    serializedName: \"BlobPropertiesInternal\",\n    xmlName: \"Properties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPropertiesInternal\",\n        modelProperties: {\n            createdOn: {\n                serializedName: \"Creation-Time\",\n                xmlName: \"Creation-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLength: {\n                serializedName: \"Content-Length\",\n                xmlName: \"Content-Length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"Content-Type\",\n                xmlName: \"Content-Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"Content-Encoding\",\n                xmlName: \"Content-Encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"Content-Language\",\n                xmlName: \"Content-Language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"Content-MD5\",\n                xmlName: \"Content-MD5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"Content-Disposition\",\n                xmlName: \"Content-Disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"Cache-Control\",\n                xmlName: \"Cache-Control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"BlobType\",\n                xmlName: \"BlobType\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            copyId: {\n                serializedName: \"CopyId\",\n                xmlName: \"CopyId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"CopyStatus\",\n                xmlName: \"CopyStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            copySource: {\n                serializedName: \"CopySource\",\n                xmlName: \"CopySource\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"CopyProgress\",\n                xmlName: \"CopyProgress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"CopyCompletionTime\",\n                xmlName: \"CopyCompletionTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"CopyStatusDescription\",\n                xmlName: \"CopyStatusDescription\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            serverEncrypted: {\n                serializedName: \"ServerEncrypted\",\n                xmlName: \"ServerEncrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            incrementalCopy: {\n                serializedName: \"IncrementalCopy\",\n                xmlName: \"IncrementalCopy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"DestinationSnapshot\",\n                xmlName: \"DestinationSnapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            accessTier: {\n                serializedName: \"AccessTier\",\n                xmlName: \"AccessTier\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"P4\",\n                        \"P6\",\n                        \"P10\",\n                        \"P15\",\n                        \"P20\",\n                        \"P30\",\n                        \"P40\",\n                        \"P50\",\n                        \"P60\",\n                        \"P70\",\n                        \"P80\",\n                        \"Hot\",\n                        \"Cool\",\n                        \"Archive\",\n                        \"Cold\",\n                    ],\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"AccessTierInferred\",\n                xmlName: \"AccessTierInferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"ArchiveStatus\",\n                xmlName: \"ArchiveStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"rehydrate-pending-to-hot\",\n                        \"rehydrate-pending-to-cool\",\n                        \"rehydrate-pending-to-cold\",\n                    ],\n                },\n            },\n            customerProvidedKeySha256: {\n                serializedName: \"CustomerProvidedKeySha256\",\n                xmlName: \"CustomerProvidedKeySha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"EncryptionScope\",\n                xmlName: \"EncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"AccessTierChangeTime\",\n                xmlName: \"AccessTierChangeTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            tagCount: {\n                serializedName: \"TagCount\",\n                xmlName: \"TagCount\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry-Time\",\n                xmlName: \"Expiry-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"Sealed\",\n                xmlName: \"Sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"RehydratePriority\",\n                xmlName: \"RehydratePriority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessedOn: {\n                serializedName: \"LastAccessTime\",\n                xmlName: \"LastAccessTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"ImmutabilityPolicyUntilDate\",\n                xmlName: \"ImmutabilityPolicyUntilDate\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"ImmutabilityPolicyMode\",\n                xmlName: \"ImmutabilityPolicyMode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"LegalHold\",\n                xmlName: \"LegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const ListBlobsHierarchySegmentResponse = {\n    serializedName: \"ListBlobsHierarchySegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsHierarchySegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            delimiter: {\n                serializedName: \"Delimiter\",\n                xmlName: \"Delimiter\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobHierarchyListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobHierarchyListSegment = {\n    serializedName: \"BlobHierarchyListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobHierarchyListSegment\",\n        modelProperties: {\n            blobPrefixes: {\n                serializedName: \"BlobPrefixes\",\n                xmlName: \"BlobPrefixes\",\n                xmlElementName: \"BlobPrefix\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobPrefix\",\n                        },\n                    },\n                },\n            },\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlobPrefix = {\n    serializedName: \"BlobPrefix\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPrefix\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n        },\n    },\n};\nexport const BlockLookupList = {\n    serializedName: \"BlockLookupList\",\n    xmlName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockLookupList\",\n        modelProperties: {\n            committed: {\n                serializedName: \"Committed\",\n                xmlName: \"Committed\",\n                xmlElementName: \"Committed\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            uncommitted: {\n                serializedName: \"Uncommitted\",\n                xmlName: \"Uncommitted\",\n                xmlElementName: \"Uncommitted\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            latest: {\n                serializedName: \"Latest\",\n                xmlName: \"Latest\",\n                xmlElementName: \"Latest\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlockList = {\n    serializedName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockList\",\n        modelProperties: {\n            committedBlocks: {\n                serializedName: \"CommittedBlocks\",\n                xmlName: \"CommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n            uncommittedBlocks: {\n                serializedName: \"UncommittedBlocks\",\n                xmlName: \"UncommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const Block = {\n    serializedName: \"Block\",\n    type: {\n        name: \"Composite\",\n        className: \"Block\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            size: {\n                serializedName: \"Size\",\n                required: true,\n                xmlName: \"Size\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const PageList = {\n    serializedName: \"PageList\",\n    type: {\n        name: \"Composite\",\n        className: \"PageList\",\n        modelProperties: {\n            pageRange: {\n                serializedName: \"PageRange\",\n                xmlName: \"PageRange\",\n                xmlElementName: \"PageRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"PageRange\",\n                        },\n                    },\n                },\n            },\n            clearRange: {\n                serializedName: \"ClearRange\",\n                xmlName: \"ClearRange\",\n                xmlElementName: \"ClearRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ClearRange\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageRange = {\n    serializedName: \"PageRange\",\n    xmlName: \"PageRange\",\n    type: {\n        name: \"Composite\",\n        className: \"PageRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const ClearRange = {\n    serializedName: \"ClearRange\",\n    xmlName: \"ClearRange\",\n    type: {\n        name: \"Composite\",\n        className: \"ClearRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const QueryRequest = {\n    serializedName: \"QueryRequest\",\n    xmlName: \"QueryRequest\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryRequest\",\n        modelProperties: {\n            queryType: {\n                serializedName: \"QueryType\",\n                required: true,\n                xmlName: \"QueryType\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expression: {\n                serializedName: \"Expression\",\n                required: true,\n                xmlName: \"Expression\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            inputSerialization: {\n                serializedName: \"InputSerialization\",\n                xmlName: \"InputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n            outputSerialization: {\n                serializedName: \"OutputSerialization\",\n                xmlName: \"OutputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n        },\n    },\n};\nexport const QuerySerialization = {\n    serializedName: \"QuerySerialization\",\n    type: {\n        name: \"Composite\",\n        className: \"QuerySerialization\",\n        modelProperties: {\n            format: {\n                serializedName: \"Format\",\n                xmlName: \"Format\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QueryFormat\",\n                },\n            },\n        },\n    },\n};\nexport const QueryFormat = {\n    serializedName: \"QueryFormat\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryFormat\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"delimited\", \"json\", \"arrow\", \"parquet\"],\n                },\n            },\n            delimitedTextConfiguration: {\n                serializedName: \"DelimitedTextConfiguration\",\n                xmlName: \"DelimitedTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"DelimitedTextConfiguration\",\n                },\n            },\n            jsonTextConfiguration: {\n                serializedName: \"JsonTextConfiguration\",\n                xmlName: \"JsonTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"JsonTextConfiguration\",\n                },\n            },\n            arrowConfiguration: {\n                serializedName: \"ArrowConfiguration\",\n                xmlName: \"ArrowConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ArrowConfiguration\",\n                },\n            },\n            parquetTextConfiguration: {\n                serializedName: \"ParquetTextConfiguration\",\n                xmlName: \"ParquetTextConfiguration\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"any\" } },\n                },\n            },\n        },\n    },\n};\nexport const DelimitedTextConfiguration = {\n    serializedName: \"DelimitedTextConfiguration\",\n    xmlName: \"DelimitedTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"DelimitedTextConfiguration\",\n        modelProperties: {\n            columnSeparator: {\n                serializedName: \"ColumnSeparator\",\n                xmlName: \"ColumnSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            fieldQuote: {\n                serializedName: \"FieldQuote\",\n                xmlName: \"FieldQuote\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            escapeChar: {\n                serializedName: \"EscapeChar\",\n                xmlName: \"EscapeChar\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            headersPresent: {\n                serializedName: \"HeadersPresent\",\n                xmlName: \"HasHeaders\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const JsonTextConfiguration = {\n    serializedName: \"JsonTextConfiguration\",\n    xmlName: \"JsonTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"JsonTextConfiguration\",\n        modelProperties: {\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ArrowConfiguration = {\n    serializedName: \"ArrowConfiguration\",\n    xmlName: \"ArrowConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowConfiguration\",\n        modelProperties: {\n            schema: {\n                serializedName: \"Schema\",\n                required: true,\n                xmlName: \"Schema\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Field\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArrowField\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const ArrowField = {\n    serializedName: \"ArrowField\",\n    xmlName: \"Field\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowField\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            precision: {\n                serializedName: \"Precision\",\n                xmlName: \"Precision\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            scale: {\n                serializedName: \"Scale\",\n                xmlName: \"Scale\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSetPropertiesHeaders = {\n    serializedName: \"Service_setPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSetPropertiesExceptionHeaders = {\n    serializedName: \"Service_setPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetPropertiesHeaders = {\n    serializedName: \"Service_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetPropertiesExceptionHeaders = {\n    serializedName: \"Service_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetStatisticsHeaders = {\n    serializedName: \"Service_getStatisticsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetStatisticsExceptionHeaders = {\n    serializedName: \"Service_getStatisticsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceListContainersSegmentHeaders = {\n    serializedName: \"Service_listContainersSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceListContainersSegmentExceptionHeaders = {\n    serializedName: \"Service_listContainersSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetUserDelegationKeyHeaders = {\n    serializedName: \"Service_getUserDelegationKeyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetUserDelegationKeyExceptionHeaders = {\n    serializedName: \"Service_getUserDelegationKeyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetAccountInfoHeaders = {\n    serializedName: \"Service_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetAccountInfoExceptionHeaders = {\n    serializedName: \"Service_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSubmitBatchHeaders = {\n    serializedName: \"Service_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSubmitBatchExceptionHeaders = {\n    serializedName: \"Service_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceFilterBlobsHeaders = {\n    serializedName: \"Service_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceFilterBlobsExceptionHeaders = {\n    serializedName: \"Service_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerCreateHeaders = {\n    serializedName: \"Container_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerCreateExceptionHeaders = {\n    serializedName: \"Container_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetPropertiesHeaders = {\n    serializedName: \"Container_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesHeaders\",\n        modelProperties: {\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"x-ms-has-immutability-policy\",\n                xmlName: \"x-ms-has-immutability-policy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"x-ms-has-legal-hold\",\n                xmlName: \"x-ms-has-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"x-ms-default-encryption-scope\",\n                xmlName: \"x-ms-default-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            denyEncryptionScopeOverride: {\n                serializedName: \"x-ms-deny-encryption-scope-override\",\n                xmlName: \"x-ms-deny-encryption-scope-override\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                xmlName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetPropertiesExceptionHeaders = {\n    serializedName: \"Container_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerDeleteHeaders = {\n    serializedName: \"Container_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerDeleteExceptionHeaders = {\n    serializedName: \"Container_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetMetadataHeaders = {\n    serializedName: \"Container_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetMetadataExceptionHeaders = {\n    serializedName: \"Container_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccessPolicyHeaders = {\n    serializedName: \"Container_getAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyHeaders\",\n        modelProperties: {\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_getAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetAccessPolicyHeaders = {\n    serializedName: \"Container_setAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_setAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRestoreHeaders = {\n    serializedName: \"Container_restoreHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRestoreExceptionHeaders = {\n    serializedName: \"Container_restoreExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenameHeaders = {\n    serializedName: \"Container_renameHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenameExceptionHeaders = {\n    serializedName: \"Container_renameExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSubmitBatchHeaders = {\n    serializedName: \"Container_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSubmitBatchExceptionHeaders = {\n    serializedName: \"Container_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerFilterBlobsHeaders = {\n    serializedName: \"Container_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerFilterBlobsExceptionHeaders = {\n    serializedName: \"Container_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerAcquireLeaseHeaders = {\n    serializedName: \"Container_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerAcquireLeaseExceptionHeaders = {\n    serializedName: \"Container_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerReleaseLeaseHeaders = {\n    serializedName: \"Container_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerReleaseLeaseExceptionHeaders = {\n    serializedName: \"Container_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenewLeaseHeaders = {\n    serializedName: \"Container_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenewLeaseExceptionHeaders = {\n    serializedName: \"Container_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerBreakLeaseHeaders = {\n    serializedName: \"Container_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerBreakLeaseExceptionHeaders = {\n    serializedName: \"Container_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerChangeLeaseHeaders = {\n    serializedName: \"Container_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerChangeLeaseExceptionHeaders = {\n    serializedName: \"Container_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobFlatSegmentHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobFlatSegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobHierarchySegmentHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobHierarchySegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccountInfoHeaders = {\n    serializedName: \"Container_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccountInfoExceptionHeaders = {\n    serializedName: \"Container_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDownloadHeaders = {\n    serializedName: \"Blob_downloadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDownloadExceptionHeaders = {\n    serializedName: \"Blob_downloadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetPropertiesHeaders = {\n    serializedName: \"Blob_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            isIncrementalCopy: {\n                serializedName: \"x-ms-incremental-copy\",\n                xmlName: \"x-ms-incremental-copy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"x-ms-copy-destination-snapshot\",\n                xmlName: \"x-ms-copy-destination-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTier: {\n                serializedName: \"x-ms-access-tier\",\n                xmlName: \"x-ms-access-tier\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"x-ms-access-tier-inferred\",\n                xmlName: \"x-ms-access-tier-inferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"x-ms-archive-status\",\n                xmlName: \"x-ms-archive-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"x-ms-access-tier-change-time\",\n                xmlName: \"x-ms-access-tier-change-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"x-ms-expiry-time\",\n                xmlName: \"x-ms-expiry-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"x-ms-rehydrate-priority\",\n                xmlName: \"x-ms-rehydrate-priority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetPropertiesExceptionHeaders = {\n    serializedName: \"Blob_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteHeaders = {\n    serializedName: \"Blob_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteExceptionHeaders = {\n    serializedName: \"Blob_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobUndeleteHeaders = {\n    serializedName: \"Blob_undeleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobUndeleteExceptionHeaders = {\n    serializedName: \"Blob_undeleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetExpiryHeaders = {\n    serializedName: \"Blob_setExpiryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetExpiryExceptionHeaders = {\n    serializedName: \"Blob_setExpiryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetHttpHeadersHeaders = {\n    serializedName: \"Blob_setHttpHeadersHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetHttpHeadersExceptionHeaders = {\n    serializedName: \"Blob_setHttpHeadersExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiry: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n        },\n    },\n};\nexport const BlobSetImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetLegalHoldHeaders = {\n    serializedName: \"Blob_setLegalHoldHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetLegalHoldExceptionHeaders = {\n    serializedName: \"Blob_setLegalHoldExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetMetadataHeaders = {\n    serializedName: \"Blob_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetMetadataExceptionHeaders = {\n    serializedName: \"Blob_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAcquireLeaseHeaders = {\n    serializedName: \"Blob_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAcquireLeaseExceptionHeaders = {\n    serializedName: \"Blob_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobReleaseLeaseHeaders = {\n    serializedName: \"Blob_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobReleaseLeaseExceptionHeaders = {\n    serializedName: \"Blob_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobRenewLeaseHeaders = {\n    serializedName: \"Blob_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobRenewLeaseExceptionHeaders = {\n    serializedName: \"Blob_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobChangeLeaseHeaders = {\n    serializedName: \"Blob_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobChangeLeaseExceptionHeaders = {\n    serializedName: \"Blob_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobBreakLeaseHeaders = {\n    serializedName: \"Blob_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobBreakLeaseExceptionHeaders = {\n    serializedName: \"Blob_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCreateSnapshotHeaders = {\n    serializedName: \"Blob_createSnapshotHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotHeaders\",\n        modelProperties: {\n            snapshot: {\n                serializedName: \"x-ms-snapshot\",\n                xmlName: \"x-ms-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCreateSnapshotExceptionHeaders = {\n    serializedName: \"Blob_createSnapshotExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobStartCopyFromURLHeaders = {\n    serializedName: \"Blob_startCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobStartCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_startCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCopyFromURLHeaders = {\n    serializedName: \"Blob_copyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                defaultValue: \"success\",\n                isConstant: true,\n                serializedName: \"x-ms-copy-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_copyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAbortCopyFromURLHeaders = {\n    serializedName: \"Blob_abortCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAbortCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_abortCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTierHeaders = {\n    serializedName: \"Blob_setTierHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTierExceptionHeaders = {\n    serializedName: \"Blob_setTierExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetAccountInfoHeaders = {\n    serializedName: \"Blob_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetAccountInfoExceptionHeaders = {\n    serializedName: \"Blob_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobQueryHeaders = {\n    serializedName: \"Blob_queryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletionTime: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nexport const BlobQueryExceptionHeaders = {\n    serializedName: \"Blob_queryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetTagsHeaders = {\n    serializedName: \"Blob_getTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetTagsExceptionHeaders = {\n    serializedName: \"Blob_getTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTagsHeaders = {\n    serializedName: \"Blob_setTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTagsExceptionHeaders = {\n    serializedName: \"Blob_setTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCreateHeaders = {\n    serializedName: \"PageBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCreateExceptionHeaders = {\n    serializedName: \"PageBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesHeaders = {\n    serializedName: \"PageBlob_uploadPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobClearPagesHeaders = {\n    serializedName: \"PageBlob_clearPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobClearPagesExceptionHeaders = {\n    serializedName: \"PageBlob_clearPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesFromURLHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesFromURLExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesHeaders = {\n    serializedName: \"PageBlob_getPageRangesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesDiffHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesDiffExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobResizeHeaders = {\n    serializedName: \"PageBlob_resizeHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobResizeExceptionHeaders = {\n    serializedName: \"PageBlob_resizeExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUpdateSequenceNumberHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUpdateSequenceNumberExceptionHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCopyIncrementalHeaders = {\n    serializedName: \"PageBlob_copyIncrementalHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCopyIncrementalExceptionHeaders = {\n    serializedName: \"PageBlob_copyIncrementalExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobCreateHeaders = {\n    serializedName: \"AppendBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobCreateExceptionHeaders = {\n    serializedName: \"AppendBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockHeaders = {\n    serializedName: \"AppendBlob_appendBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockFromUrlHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockFromUrlExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobSealHeaders = {\n    serializedName: \"AppendBlob_sealHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobSealExceptionHeaders = {\n    serializedName: \"AppendBlob_sealExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobUploadHeaders = {\n    serializedName: \"BlockBlob_uploadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobUploadExceptionHeaders = {\n    serializedName: \"BlockBlob_uploadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobPutBlobFromUrlHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobPutBlobFromUrlExceptionHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockHeaders = {\n    serializedName: \"BlockBlob_stageBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockFromURLHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockFromURLExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobCommitBlockListHeaders = {\n    serializedName: \"BlockBlob_commitBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobCommitBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_commitBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobGetBlockListHeaders = {\n    serializedName: \"BlockBlob_getBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobGetBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_getBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\n//# sourceMappingURL=mappers.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { BlobServiceProperties as BlobServicePropertiesMapper, KeyInfo as KeyInfoMapper, QueryRequest as QueryRequestMapper, BlobTags as BlobTagsMapper, BlockLookupList as BlockLookupListMapper, } from \"../models/mappers\";\nexport const contentType = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobServiceProperties = {\n    parameterPath: \"blobServiceProperties\",\n    mapper: BlobServicePropertiesMapper,\n};\nexport const accept = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const url = {\n    parameterPath: \"url\",\n    mapper: {\n        serializedName: \"url\",\n        required: true,\n        xmlName: \"url\",\n        type: {\n            name: \"String\",\n        },\n    },\n    skipEncoding: true,\n};\nexport const restype = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"service\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"properties\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const timeoutInSeconds = {\n    parameterPath: [\"options\", \"timeoutInSeconds\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 0,\n        },\n        serializedName: \"timeout\",\n        xmlName: \"timeout\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const version = {\n    parameterPath: \"version\",\n    mapper: {\n        defaultValue: \"2025-01-05\",\n        isConstant: true,\n        serializedName: \"x-ms-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const requestId = {\n    parameterPath: [\"options\", \"requestId\"],\n    mapper: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const accept1 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp1 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"stats\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp2 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"list\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const prefix = {\n    parameterPath: [\"options\", \"prefix\"],\n    mapper: {\n        serializedName: \"prefix\",\n        xmlName: \"prefix\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const marker = {\n    parameterPath: [\"options\", \"marker\"],\n    mapper: {\n        serializedName: \"marker\",\n        xmlName: \"marker\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const maxPageSize = {\n    parameterPath: [\"options\", \"maxPageSize\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 1,\n        },\n        serializedName: \"maxresults\",\n        xmlName: \"maxresults\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const include = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListContainersIncludeType\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"metadata\", \"deleted\", \"system\"],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nexport const keyInfo = {\n    parameterPath: \"keyInfo\",\n    mapper: KeyInfoMapper,\n};\nexport const comp3 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"userdelegationkey\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const restype1 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"account\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const body = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nexport const comp4 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"batch\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const contentLength = {\n    parameterPath: \"contentLength\",\n    mapper: {\n        serializedName: \"Content-Length\",\n        required: true,\n        xmlName: \"Content-Length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const multipartContentType = {\n    parameterPath: \"multipartContentType\",\n    mapper: {\n        serializedName: \"Content-Type\",\n        required: true,\n        xmlName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp5 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blobs\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const where = {\n    parameterPath: [\"options\", \"where\"],\n    mapper: {\n        serializedName: \"where\",\n        xmlName: \"where\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const restype2 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"container\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const metadata = {\n    parameterPath: [\"options\", \"metadata\"],\n    mapper: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        headerCollectionPrefix: \"x-ms-meta-\",\n        type: {\n            name: \"Dictionary\",\n            value: { type: { name: \"String\" } },\n        },\n    },\n};\nexport const access = {\n    parameterPath: [\"options\", \"access\"],\n    mapper: {\n        serializedName: \"x-ms-blob-public-access\",\n        xmlName: \"x-ms-blob-public-access\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"container\", \"blob\"],\n        },\n    },\n};\nexport const defaultEncryptionScope = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"defaultEncryptionScope\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-default-encryption-scope\",\n        xmlName: \"x-ms-default-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const preventEncryptionScopeOverride = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"preventEncryptionScopeOverride\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-deny-encryption-scope-override\",\n        xmlName: \"x-ms-deny-encryption-scope-override\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const leaseId = {\n    parameterPath: [\"options\", \"leaseAccessConditions\", \"leaseId\"],\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifModifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifModifiedSince\"],\n    mapper: {\n        serializedName: \"If-Modified-Since\",\n        xmlName: \"If-Modified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const ifUnmodifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifUnmodifiedSince\"],\n    mapper: {\n        serializedName: \"If-Unmodified-Since\",\n        xmlName: \"If-Unmodified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const comp6 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"metadata\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp7 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"acl\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const containerAcl = {\n    parameterPath: [\"options\", \"containerAcl\"],\n    mapper: {\n        serializedName: \"containerAcl\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Composite\",\n                    className: \"SignedIdentifier\",\n                },\n            },\n        },\n    },\n};\nexport const comp8 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"undelete\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const deletedContainerName = {\n    parameterPath: [\"options\", \"deletedContainerName\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-name\",\n        xmlName: \"x-ms-deleted-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const deletedContainerVersion = {\n    parameterPath: [\"options\", \"deletedContainerVersion\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-version\",\n        xmlName: \"x-ms-deleted-container-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp9 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"rename\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceContainerName = {\n    parameterPath: \"sourceContainerName\",\n    mapper: {\n        serializedName: \"x-ms-source-container-name\",\n        required: true,\n        xmlName: \"x-ms-source-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceLeaseId = {\n    parameterPath: [\"options\", \"sourceLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-source-lease-id\",\n        xmlName: \"x-ms-source-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp10 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"lease\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"acquire\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const duration = {\n    parameterPath: [\"options\", \"duration\"],\n    mapper: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const proposedLeaseId = {\n    parameterPath: [\"options\", \"proposedLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action1 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"release\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const leaseId1 = {\n    parameterPath: \"leaseId\",\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        required: true,\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action2 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"renew\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action3 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"break\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const breakPeriod = {\n    parameterPath: [\"options\", \"breakPeriod\"],\n    mapper: {\n        serializedName: \"x-ms-lease-break-period\",\n        xmlName: \"x-ms-lease-break-period\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const action4 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"change\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const proposedLeaseId1 = {\n    parameterPath: \"proposedLeaseId\",\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        required: true,\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const include1 = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListBlobsIncludeItem\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"copy\",\n                        \"deleted\",\n                        \"metadata\",\n                        \"snapshots\",\n                        \"uncommittedblobs\",\n                        \"versions\",\n                        \"tags\",\n                        \"immutabilitypolicy\",\n                        \"legalhold\",\n                        \"deletedwithversions\",\n                    ],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nexport const delimiter = {\n    parameterPath: \"delimiter\",\n    mapper: {\n        serializedName: \"delimiter\",\n        required: true,\n        xmlName: \"delimiter\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const snapshot = {\n    parameterPath: [\"options\", \"snapshot\"],\n    mapper: {\n        serializedName: \"snapshot\",\n        xmlName: \"snapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const versionId = {\n    parameterPath: [\"options\", \"versionId\"],\n    mapper: {\n        serializedName: \"versionid\",\n        xmlName: \"versionid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const range = {\n    parameterPath: [\"options\", \"range\"],\n    mapper: {\n        serializedName: \"x-ms-range\",\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const rangeGetContentMD5 = {\n    parameterPath: [\"options\", \"rangeGetContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-md5\",\n        xmlName: \"x-ms-range-get-content-md5\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const rangeGetContentCRC64 = {\n    parameterPath: [\"options\", \"rangeGetContentCRC64\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-crc64\",\n        xmlName: \"x-ms-range-get-content-crc64\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const encryptionKey = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKey\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key\",\n        xmlName: \"x-ms-encryption-key\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const encryptionKeySha256 = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKeySha256\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const encryptionAlgorithm = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionAlgorithm\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-algorithm\",\n        xmlName: \"x-ms-encryption-algorithm\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifMatch\"],\n    mapper: {\n        serializedName: \"If-Match\",\n        xmlName: \"If-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifNoneMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifNoneMatch\"],\n    mapper: {\n        serializedName: \"If-None-Match\",\n        xmlName: \"If-None-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifTags = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifTags\"],\n    mapper: {\n        serializedName: \"x-ms-if-tags\",\n        xmlName: \"x-ms-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const deleteSnapshots = {\n    parameterPath: [\"options\", \"deleteSnapshots\"],\n    mapper: {\n        serializedName: \"x-ms-delete-snapshots\",\n        xmlName: \"x-ms-delete-snapshots\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"include\", \"only\"],\n        },\n    },\n};\nexport const blobDeleteType = {\n    parameterPath: [\"options\", \"blobDeleteType\"],\n    mapper: {\n        serializedName: \"deletetype\",\n        xmlName: \"deletetype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp11 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"expiry\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const expiryOptions = {\n    parameterPath: \"expiryOptions\",\n    mapper: {\n        serializedName: \"x-ms-expiry-option\",\n        required: true,\n        xmlName: \"x-ms-expiry-option\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const expiresOn = {\n    parameterPath: [\"options\", \"expiresOn\"],\n    mapper: {\n        serializedName: \"x-ms-expiry-time\",\n        xmlName: \"x-ms-expiry-time\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobCacheControl = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobCacheControl\"],\n    mapper: {\n        serializedName: \"x-ms-blob-cache-control\",\n        xmlName: \"x-ms-blob-cache-control\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentType = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentType\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-type\",\n        xmlName: \"x-ms-blob-content-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentMD5 = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-md5\",\n        xmlName: \"x-ms-blob-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const blobContentEncoding = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentEncoding\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-encoding\",\n        xmlName: \"x-ms-blob-content-encoding\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentLanguage = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentLanguage\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-language\",\n        xmlName: \"x-ms-blob-content-language\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentDisposition = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentDisposition\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-disposition\",\n        xmlName: \"x-ms-blob-content-disposition\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp12 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"immutabilityPolicies\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const immutabilityPolicyExpiry = {\n    parameterPath: [\"options\", \"immutabilityPolicyExpiry\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const immutabilityPolicyMode = {\n    parameterPath: [\"options\", \"immutabilityPolicyMode\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n        },\n    },\n};\nexport const comp13 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"legalhold\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const legalHold = {\n    parameterPath: \"legalHold\",\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        required: true,\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const encryptionScope = {\n    parameterPath: [\"options\", \"encryptionScope\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp14 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"snapshot\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const tier = {\n    parameterPath: [\"options\", \"tier\"],\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nexport const rehydratePriority = {\n    parameterPath: [\"options\", \"rehydratePriority\"],\n    mapper: {\n        serializedName: \"x-ms-rehydrate-priority\",\n        xmlName: \"x-ms-rehydrate-priority\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"High\", \"Standard\"],\n        },\n    },\n};\nexport const sourceIfModifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfModifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-modified-since\",\n        xmlName: \"x-ms-source-if-modified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const sourceIfUnmodifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfUnmodifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-unmodified-since\",\n        xmlName: \"x-ms-source-if-unmodified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const sourceIfMatch = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfMatch\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-match\",\n        xmlName: \"x-ms-source-if-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceIfNoneMatch = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfNoneMatch\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-none-match\",\n        xmlName: \"x-ms-source-if-none-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceIfTags = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfTags\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-tags\",\n        xmlName: \"x-ms-source-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copySource = {\n    parameterPath: \"copySource\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobTagsString = {\n    parameterPath: [\"options\", \"blobTagsString\"],\n    mapper: {\n        serializedName: \"x-ms-tags\",\n        xmlName: \"x-ms-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sealBlob = {\n    parameterPath: [\"options\", \"sealBlob\"],\n    mapper: {\n        serializedName: \"x-ms-seal-blob\",\n        xmlName: \"x-ms-seal-blob\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const legalHold1 = {\n    parameterPath: [\"options\", \"legalHold\"],\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const xMsRequiresSync = {\n    parameterPath: \"xMsRequiresSync\",\n    mapper: {\n        defaultValue: \"true\",\n        isConstant: true,\n        serializedName: \"x-ms-requires-sync\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceContentMD5 = {\n    parameterPath: [\"options\", \"sourceContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-md5\",\n        xmlName: \"x-ms-source-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const copySourceAuthorization = {\n    parameterPath: [\"options\", \"copySourceAuthorization\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-authorization\",\n        xmlName: \"x-ms-copy-source-authorization\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copySourceTags = {\n    parameterPath: [\"options\", \"copySourceTags\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-tag-option\",\n        xmlName: \"x-ms-copy-source-tag-option\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"REPLACE\", \"COPY\"],\n        },\n    },\n};\nexport const comp15 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"copy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copyActionAbortConstant = {\n    parameterPath: \"copyActionAbortConstant\",\n    mapper: {\n        defaultValue: \"abort\",\n        isConstant: true,\n        serializedName: \"x-ms-copy-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copyId = {\n    parameterPath: \"copyId\",\n    mapper: {\n        serializedName: \"copyid\",\n        required: true,\n        xmlName: \"copyid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp16 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tier\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const tier1 = {\n    parameterPath: \"tier\",\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        required: true,\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nexport const queryRequest = {\n    parameterPath: [\"options\", \"queryRequest\"],\n    mapper: QueryRequestMapper,\n};\nexport const comp17 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"query\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp18 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tags\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const tags = {\n    parameterPath: [\"options\", \"tags\"],\n    mapper: BlobTagsMapper,\n};\nexport const transactionalContentMD5 = {\n    parameterPath: [\"options\", \"transactionalContentMD5\"],\n    mapper: {\n        serializedName: \"Content-MD5\",\n        xmlName: \"Content-MD5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const transactionalContentCrc64 = {\n    parameterPath: [\"options\", \"transactionalContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const blobType = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"PageBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentLength = {\n    parameterPath: \"blobContentLength\",\n    mapper: {\n        serializedName: \"x-ms-blob-content-length\",\n        required: true,\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const blobSequenceNumber = {\n    parameterPath: [\"options\", \"blobSequenceNumber\"],\n    mapper: {\n        defaultValue: 0,\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const contentType1 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/octet-stream\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const body1 = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nexport const accept2 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp19 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"page\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const pageWrite = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"update\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifSequenceNumberLessThanOrEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThanOrEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-le\",\n        xmlName: \"x-ms-if-sequence-number-le\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const ifSequenceNumberLessThan = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThan\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-lt\",\n        xmlName: \"x-ms-if-sequence-number-lt\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const ifSequenceNumberEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-eq\",\n        xmlName: \"x-ms-if-sequence-number-eq\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const pageWrite1 = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"clear\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceUrl = {\n    parameterPath: \"sourceUrl\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceRange = {\n    parameterPath: \"sourceRange\",\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        required: true,\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceContentCrc64 = {\n    parameterPath: [\"options\", \"sourceContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-crc64\",\n        xmlName: \"x-ms-source-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const range1 = {\n    parameterPath: \"range\",\n    mapper: {\n        serializedName: \"x-ms-range\",\n        required: true,\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp20 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"pagelist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const prevsnapshot = {\n    parameterPath: [\"options\", \"prevsnapshot\"],\n    mapper: {\n        serializedName: \"prevsnapshot\",\n        xmlName: \"prevsnapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const prevSnapshotUrl = {\n    parameterPath: [\"options\", \"prevSnapshotUrl\"],\n    mapper: {\n        serializedName: \"x-ms-previous-snapshot-url\",\n        xmlName: \"x-ms-previous-snapshot-url\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sequenceNumberAction = {\n    parameterPath: \"sequenceNumberAction\",\n    mapper: {\n        serializedName: \"x-ms-sequence-number-action\",\n        required: true,\n        xmlName: \"x-ms-sequence-number-action\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"max\", \"update\", \"increment\"],\n        },\n    },\n};\nexport const comp21 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"incrementalcopy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobType1 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"AppendBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp22 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"appendblock\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const maxSize = {\n    parameterPath: [\"options\", \"appendPositionAccessConditions\", \"maxSize\"],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-maxsize\",\n        xmlName: \"x-ms-blob-condition-maxsize\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const appendPosition = {\n    parameterPath: [\n        \"options\",\n        \"appendPositionAccessConditions\",\n        \"appendPosition\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-appendpos\",\n        xmlName: \"x-ms-blob-condition-appendpos\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const sourceRange1 = {\n    parameterPath: [\"options\", \"sourceRange\"],\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp23 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"seal\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobType2 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"BlockBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copySourceBlobProperties = {\n    parameterPath: [\"options\", \"copySourceBlobProperties\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-blob-properties\",\n        xmlName: \"x-ms-copy-source-blob-properties\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const comp24 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"block\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blockId = {\n    parameterPath: \"blockId\",\n    mapper: {\n        serializedName: \"blockid\",\n        required: true,\n        xmlName: \"blockid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blocks = {\n    parameterPath: \"blocks\",\n    mapper: BlockLookupListMapper,\n};\nexport const comp25 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blocklist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const listType = {\n    parameterPath: \"listType\",\n    mapper: {\n        defaultValue: \"committed\",\n        serializedName: \"blocklisttype\",\n        required: true,\n        xmlName: \"blocklisttype\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"committed\", \"uncommitted\", \"all\"],\n        },\n    },\n};\n//# sourceMappingURL=parameters.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing Service operations. */\nexport class ServiceImpl {\n    /**\n     * Initialize a new instance of the class Service class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n     * Analytics and CORS (Cross-Origin Resource Sharing) rules\n     * @param blobServiceProperties The StorageService properties.\n     * @param options The options parameters.\n     */\n    setProperties(blobServiceProperties, options) {\n        return this.client.sendOperationRequest({ blobServiceProperties, options }, setPropertiesOperationSpec);\n    }\n    /**\n     * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n     * and CORS (Cross-Origin Resource Sharing) rules.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only available on the\n     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n     * account.\n     * @param options The options parameters.\n     */\n    getStatistics(options) {\n        return this.client.sendOperationRequest({ options }, getStatisticsOperationSpec);\n    }\n    /**\n     * The List Containers Segment operation returns a list of the containers under the specified account\n     * @param options The options parameters.\n     */\n    listContainersSegment(options) {\n        return this.client.sendOperationRequest({ options }, listContainersSegmentOperationSpec);\n    }\n    /**\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     * @param keyInfo Key information\n     * @param options The options parameters.\n     */\n    getUserDelegationKey(keyInfo, options) {\n        return this.client.sendOperationRequest({ keyInfo, options }, getUserDelegationKeyOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n     * given search expression.  Filter blobs searches across all containers within a storage account but\n     * can be scoped within the expression to a single container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst setPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.ServiceSetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.blobServiceProperties,\n    queryParameters: [\n        Parameters.restype,\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlobServiceProperties,\n            headersMapper: Mappers.ServiceGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.restype,\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getStatisticsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlobServiceStatistics,\n            headersMapper: Mappers.ServiceGetStatisticsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.restype,\n        Parameters.timeoutInSeconds,\n        Parameters.comp1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listContainersSegmentOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ListContainersSegmentResponse,\n            headersMapper: Mappers.ServiceListContainersSegmentHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp2,\n        Parameters.prefix,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.include,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getUserDelegationKeyOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.UserDelegationKey,\n            headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.keyInfo,\n    queryParameters: [\n        Parameters.restype,\n        Parameters.timeoutInSeconds,\n        Parameters.comp3,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ServiceGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n        Parameters.restype1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.ServiceSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.FilterBlobSegment,\n            headersMapper: Mappers.ServiceFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.comp5,\n        Parameters.where,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=service.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing Container operations. */\nexport class ContainerImpl {\n    /**\n     * Initialize a new instance of the class Container class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * creates a new container under the specified account. If the container with the same name already\n     * exists, the operation fails\n     * @param options The options parameters.\n     */\n    create(options) {\n        return this.client.sendOperationRequest({ options }, createOperationSpec);\n    }\n    /**\n     * returns all user-defined metadata and system properties for the specified container. The data\n     * returned does not include the container's list of blobs\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * operation marks the specified container for deletion. The container and any blobs contained within\n     * it are later deleted during garbage collection\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * operation sets one or more user-defined name-value pairs for the specified container.\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * gets the permissions for the specified container. The permissions indicate whether container data\n     * may be accessed publicly.\n     * @param options The options parameters.\n     */\n    getAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, getAccessPolicyOperationSpec);\n    }\n    /**\n     * sets the permissions for the specified container. The permissions indicate whether blobs in a\n     * container may be accessed publicly.\n     * @param options The options parameters.\n     */\n    setAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setAccessPolicyOperationSpec);\n    }\n    /**\n     * Restores a previously-deleted container.\n     * @param options The options parameters.\n     */\n    restore(options) {\n        return this.client.sendOperationRequest({ options }, restoreOperationSpec);\n    }\n    /**\n     * Renames an existing container.\n     * @param sourceContainerName Required.  Specifies the name of the container to rename.\n     * @param options The options parameters.\n     */\n    rename(sourceContainerName, options) {\n        return this.client.sendOperationRequest({ sourceContainerName, options }, renameOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n     * search expression.  Filter blobs searches within the given container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param options The options parameters.\n     */\n    listBlobFlatSegment(options) {\n        return this.client.sendOperationRequest({ options }, listBlobFlatSegmentOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n     *                  character or a string.\n     * @param options The options parameters.\n     */\n    listBlobHierarchySegment(delimiter, options) {\n        return this.client.sendOperationRequest({ delimiter, options }, listBlobHierarchySegmentOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.ContainerCreateHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.access,\n        Parameters.defaultEncryptionScope,\n        Parameters.preventEncryptionScopeOverride,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: Mappers.ContainerDeleteHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp6,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: { name: \"Composite\", className: \"SignedIdentifier\" },\n                    },\n                },\n                serializedName: \"SignedIdentifiers\",\n                xmlName: \"SignedIdentifiers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"SignedIdentifier\",\n            },\n            headersMapper: Mappers.ContainerGetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp7,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerSetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.containerAcl,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp7,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.access,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst restoreOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.ContainerRestoreHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerRestoreExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp8,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.deletedContainerName,\n        Parameters.deletedContainerVersion,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renameOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerRenameHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerRenameExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp9,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.sourceContainerName,\n        Parameters.sourceLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.ContainerSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp4,\n        Parameters.restype2,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.FilterBlobSegment,\n            headersMapper: Mappers.ContainerFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.comp5,\n        Parameters.where,\n        Parameters.restype2,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.ContainerAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action,\n        Parameters.duration,\n        Parameters.proposedLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action1,\n        Parameters.leaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action2,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.ContainerBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action3,\n        Parameters.breakPeriod,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action4,\n        Parameters.proposedLeaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobFlatSegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n            headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp2,\n        Parameters.prefix,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.restype2,\n        Parameters.include1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobHierarchySegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n            headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp2,\n        Parameters.prefix,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.restype2,\n        Parameters.include1,\n        Parameters.delimiter,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n        Parameters.restype1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=container.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing Blob operations. */\nexport class BlobImpl {\n    /**\n     * Initialize a new instance of the class Blob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Download operation reads or downloads a blob from the system, including its metadata and\n     * properties. You can also call Download to read a snapshot.\n     * @param options The options parameters.\n     */\n    download(options) {\n        return this.client.sendOperationRequest({ options }, downloadOperationSpec);\n    }\n    /**\n     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n     * properties for the blob. It does not return the content of the blob.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n     * permanently removed from the storage account. If the storage account's soft delete feature is\n     * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n     * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n     * by the DeleteRetentionPolicy section of [Storage service properties]\n     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n     * permanently removed from the storage account. Note that you continue to be charged for the\n     * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n     * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n     * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n     * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n     * (ResourceNotFound).\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * Undelete a blob that was previously soft deleted\n     * @param options The options parameters.\n     */\n    undelete(options) {\n        return this.client.sendOperationRequest({ options }, undeleteOperationSpec);\n    }\n    /**\n     * Sets the time a blob will expire and be deleted.\n     * @param expiryOptions Required. Indicates mode of the expiry time\n     * @param options The options parameters.\n     */\n    setExpiry(expiryOptions, options) {\n        return this.client.sendOperationRequest({ expiryOptions, options }, setExpiryOperationSpec);\n    }\n    /**\n     * The Set HTTP Headers operation sets system properties on the blob\n     * @param options The options parameters.\n     */\n    setHttpHeaders(options) {\n        return this.client.sendOperationRequest({ options }, setHttpHeadersOperationSpec);\n    }\n    /**\n     * The Set Immutability Policy operation sets the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    setImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Delete Immutability Policy operation deletes the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    deleteImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, deleteImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Set Legal Hold operation sets a legal hold on the blob.\n     * @param legalHold Specified if a legal hold should be set on the blob.\n     * @param options The options parameters.\n     */\n    setLegalHold(legalHold, options) {\n        return this.client.sendOperationRequest({ legalHold, options }, setLegalHoldOperationSpec);\n    }\n    /**\n     * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n     * name-value pairs\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * The Create Snapshot operation creates a read-only snapshot of a blob\n     * @param options The options parameters.\n     */\n    createSnapshot(options) {\n        return this.client.sendOperationRequest({ options }, createSnapshotOperationSpec);\n    }\n    /**\n     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    startCopyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, startCopyFromURLOperationSpec);\n    }\n    /**\n     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n     * a response until the copy is complete.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyFromURLOperationSpec);\n    }\n    /**\n     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n     * blob with zero length and full metadata.\n     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n     *               operation.\n     * @param options The options parameters.\n     */\n    abortCopyFromURL(copyId, options) {\n        return this.client.sendOperationRequest({ copyId, options }, abortCopyFromURLOperationSpec);\n    }\n    /**\n     * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n     * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n     * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n     * ETag.\n     * @param tier Indicates the tier to be set on the blob.\n     * @param options The options parameters.\n     */\n    setTier(tier, options) {\n        return this.client.sendOperationRequest({ tier, options }, setTierOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Query operation enables users to select/project on blob data by providing simple query\n     * expressions.\n     * @param options The options parameters.\n     */\n    query(options) {\n        return this.client.sendOperationRequest({ options }, queryOperationSpec);\n    }\n    /**\n     * The Get Tags operation enables users to get the tags associated with a blob.\n     * @param options The options parameters.\n     */\n    getTags(options) {\n        return this.client.sendOperationRequest({ options }, getTagsOperationSpec);\n    }\n    /**\n     * The Set Tags operation enables users to set tags on a blob.\n     * @param options The options parameters.\n     */\n    setTags(options) {\n        return this.client.sendOperationRequest({ options }, setTagsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst downloadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobDownloadHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobDownloadHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobDownloadExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.rangeGetContentMD5,\n        Parameters.rangeGetContentCRC64,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"HEAD\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobDeleteHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.blobDeleteType,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.deleteSnapshots,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst undeleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobUndeleteHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobUndeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setExpiryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetExpiryHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetExpiryExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.expiryOptions,\n        Parameters.expiresOn,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setHttpHeadersOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetHttpHeadersHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.comp12,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifUnmodifiedSince,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.comp12,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setLegalHoldOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetLegalHoldHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.comp13,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.legalHold,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlobAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action,\n        Parameters.duration,\n        Parameters.proposedLeaseId,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action1,\n        Parameters.leaseId1,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action2,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action4,\n        Parameters.proposedLeaseId1,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action3,\n        Parameters.breakPeriod,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst createSnapshotOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlobCreateSnapshotHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst startCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobStartCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.tier,\n        Parameters.rehydratePriority,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceIfTags,\n        Parameters.copySource,\n        Parameters.blobTagsString,\n        Parameters.sealBlob,\n        Parameters.legalHold1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.copySource,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.xMsRequiresSync,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.copySourceTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst abortCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: Mappers.BlobAbortCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp15,\n        Parameters.copyId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.copyActionAbortConstant,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTierOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetTierHeaders,\n        },\n        202: {\n            headersMapper: Mappers.BlobSetTierHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetTierExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.comp16,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifTags,\n        Parameters.rehydratePriority,\n        Parameters.tier1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n        Parameters.restype1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst queryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobQueryHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobQueryHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobQueryExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.queryRequest,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.comp17,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlobTags,\n            headersMapper: Mappers.BlobGetTagsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobGetTagsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.comp18,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: Mappers.BlobSetTagsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetTagsExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.tags,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.versionId,\n        Parameters.comp18,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.leaseId,\n        Parameters.ifTags,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing PageBlob operations. */\nexport class PageBlobImpl {\n    /**\n     * Initialize a new instance of the class PageBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create operation creates a new page blob.\n     * @param contentLength The length of the request.\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    create(contentLength, blobContentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, blobContentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    uploadPages(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadPagesOperationSpec);\n    }\n    /**\n     * The Clear Pages operation clears a set of pages from a page blob\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    clearPages(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, clearPagesOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n     * URL\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param sourceRange Bytes of source data in the specified range. The length of this range should\n     *                    match the ContentLength header and x-ms-range/Range destination range header.\n     * @param contentLength The length of the request.\n     * @param range The range of bytes to which the source range would be written. The range should be 512\n     *              aligned and range-end is required.\n     * @param options The options parameters.\n     */\n    uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n        return this.client.sendOperationRequest({ sourceUrl, sourceRange, contentLength, range, options }, uploadPagesFromURLOperationSpec);\n    }\n    /**\n     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n     * page blob\n     * @param options The options parameters.\n     */\n    getPageRanges(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesOperationSpec);\n    }\n    /**\n     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n     * changed between target blob and previous snapshot.\n     * @param options The options parameters.\n     */\n    getPageRangesDiff(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesDiffOperationSpec);\n    }\n    /**\n     * Resize the Blob\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    resize(blobContentLength, options) {\n        return this.client.sendOperationRequest({ blobContentLength, options }, resizeOperationSpec);\n    }\n    /**\n     * Update the sequence number of the blob\n     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n     *                             This property applies to page blobs only. This property indicates how the service should modify the\n     *                             blob's sequence number\n     * @param options The options parameters.\n     */\n    updateSequenceNumber(sequenceNumberAction, options) {\n        return this.client.sendOperationRequest({ sequenceNumberAction, options }, updateSequenceNumberOperationSpec);\n    }\n    /**\n     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n     * The snapshot is copied such that only the differential changes between the previously copied\n     * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n     * original snapshot and can be read or copied from as usual. This API is supported since REST version\n     * 2016-05-31.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyIncremental(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyIncrementalOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.blobType,\n        Parameters.blobContentLength,\n        Parameters.blobSequenceNumber,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobUploadPagesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n        Parameters.pageWrite,\n        Parameters.ifSequenceNumberLessThanOrEqualTo,\n        Parameters.ifSequenceNumberLessThan,\n        Parameters.ifSequenceNumberEqualTo,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst clearPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobClearPagesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobClearPagesExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.ifSequenceNumberLessThanOrEqualTo,\n        Parameters.ifSequenceNumberLessThan,\n        Parameters.ifSequenceNumberEqualTo,\n        Parameters.pageWrite1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.pageWrite,\n        Parameters.ifSequenceNumberLessThanOrEqualTo,\n        Parameters.ifSequenceNumberLessThan,\n        Parameters.ifSequenceNumberEqualTo,\n        Parameters.sourceUrl,\n        Parameters.sourceRange,\n        Parameters.sourceContentCrc64,\n        Parameters.range1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.PageList,\n            headersMapper: Mappers.PageBlobGetPageRangesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.snapshot,\n        Parameters.comp20,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesDiffOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.PageList,\n            headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.snapshot,\n        Parameters.comp20,\n        Parameters.prevsnapshot,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.prevSnapshotUrl,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst resizeOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.PageBlobResizeHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobResizeExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.blobContentLength,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst updateSequenceNumberOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobSequenceNumber,\n        Parameters.sequenceNumberAction,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyIncrementalOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.PageBlobCopyIncrementalHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.copySource,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=pageBlob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing AppendBlob operations. */\nexport class AppendBlobImpl {\n    /**\n     * Initialize a new instance of the class AppendBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create Append Blob operation creates a new append blob.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    create(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob. The\n     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    appendBlock(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, appendBlockOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob where\n     * the contents are read from a source url. The Append Block operation is permitted only if the blob\n     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n     * 2015-02-21 version or later.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    appendBlockFromUrl(sourceUrl, contentLength, options) {\n        return this.client.sendOperationRequest({ sourceUrl, contentLength, options }, appendBlockFromUrlOperationSpec);\n    }\n    /**\n     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n     * 2019-12-12 version or later.\n     * @param options The options parameters.\n     */\n    seal(options) {\n        return this.client.sendOperationRequest({ options }, sealOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.AppendBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.blobType1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst appendBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.AppendBlobAppendBlockHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n        Parameters.maxSize,\n        Parameters.appendPosition,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst appendBlockFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.transactionalContentMD5,\n        Parameters.sourceUrl,\n        Parameters.sourceContentCrc64,\n        Parameters.maxSize,\n        Parameters.appendPosition,\n        Parameters.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst sealOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.AppendBlobSealHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobSealExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.appendPosition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=appendBlob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing BlockBlob operations. */\nexport class BlockBlobImpl {\n    /**\n     * Initialize a new instance of the class BlockBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n     * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n     * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n     * partial update of the content of a block blob, use the Put Block List operation.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    upload(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadOperationSpec);\n    }\n    /**\n     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n     * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,\n     * use the Put Block from URL API in conjunction with Put Block List.\n     * @param contentLength The length of the request.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    putBlobFromUrl(contentLength, copySource, options) {\n        return this.client.sendOperationRequest({ contentLength, copySource, options }, putBlobFromUrlOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    stageBlock(blockId, contentLength, body, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, body, options }, stageBlockOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n     * are read from a URL.\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param options The options parameters.\n     */\n    stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, sourceUrl, options }, stageBlockFromURLOperationSpec);\n    }\n    /**\n     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n     * blob. In order to be written as part of a blob, a block must have been successfully written to the\n     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n     * only those blocks that have changed, then committing the new and existing blocks together. You can\n     * do this by specifying whether to commit a block from the committed block list or from the\n     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n     * it may belong to.\n     * @param blocks Blob Blocks.\n     * @param options The options parameters.\n     */\n    commitBlockList(blocks, options) {\n        return this.client.sendOperationRequest({ blocks, options }, commitBlockListOperationSpec);\n    }\n    /**\n     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n     * blob\n     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n     *                 blocks, or both lists together.\n     * @param options The options parameters.\n     */\n    getBlockList(listType, options) {\n        return this.client.sendOperationRequest({ listType, options }, getBlockListOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst uploadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobUploadHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobUploadExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n        Parameters.blobType2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst putBlobFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceIfTags,\n        Parameters.copySource,\n        Parameters.blobTagsString,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.copySourceTags,\n        Parameters.transactionalContentMD5,\n        Parameters.blobType2,\n        Parameters.copySourceBlobProperties,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst stageBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobStageBlockHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp24,\n        Parameters.blockId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.encryptionScope,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst stageBlockFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp24,\n        Parameters.blockId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.encryptionScope,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.sourceUrl,\n        Parameters.sourceContentCrc64,\n        Parameters.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst commitBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobCommitBlockListHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.blocks,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlockList,\n            headersMapper: Mappers.BlockBlobGetBlockListHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.comp25,\n        Parameters.listType,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blockBlob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttpCompat from \"@azure/core-http-compat\";\nimport { ServiceImpl, ContainerImpl, BlobImpl, PageBlobImpl, AppendBlobImpl, BlockBlobImpl, } from \"./operations\";\nexport class StorageClient extends coreHttpCompat.ExtendedServiceClient {\n    /**\n     * Initializes a new instance of the StorageClient class.\n     * @param url The URL of the service account, container, or blob that is the target of the desired\n     *            operation.\n     * @param options The parameter options\n     */\n    constructor(url, options) {\n        var _a, _b;\n        if (url === undefined) {\n            throw new Error(\"'url' cannot be null\");\n        }\n        // Initializing default values for options\n        if (!options) {\n            options = {};\n        }\n        const defaults = {\n            requestContentType: \"application/json; charset=utf-8\",\n        };\n        const packageDetails = `azsdk-js-azure-storage-blob/12.26.0`;\n        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {\n                userAgentPrefix,\n            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : \"{url}\" });\n        super(optionsWithDefaults);\n        // Parameter assignments\n        this.url = url;\n        // Assigning values to Constant parameters\n        this.version = options.version || \"2025-01-05\";\n        this.service = new ServiceImpl(this);\n        this.container = new ContainerImpl(this);\n        this.blob = new BlobImpl(this);\n        this.pageBlob = new PageBlobImpl(this);\n        this.appendBlob = new AppendBlobImpl(this);\n        this.blockBlob = new BlockBlobImpl(this);\n    }\n}\n//# sourceMappingURL=storageClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StorageClient } from \"./generated/src\";\n/**\n * @internal\n */\nexport class StorageContextClient extends StorageClient {\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const operationSpecToSend = Object.assign({}, operationSpec);\n        if (operationSpecToSend.path === \"/{containerName}\" ||\n            operationSpecToSend.path === \"/{containerName}/{blob}\") {\n            operationSpecToSend.path = \"\";\n        }\n        return super.sendOperationRequest(operationArguments, operationSpecToSend);\n    }\n}\n//# sourceMappingURL=StorageContextClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StorageContextClient } from \"./StorageContextClient\";\nimport { getCoreClientOptions, getCredentialFromPipeline } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport class StorageClient {\n    /**\n     * Creates an instance of StorageClient.\n     * @param url - url to resource\n     * @param pipeline - request policy pipeline.\n     */\n    constructor(url, pipeline) {\n        // URL should be encoded and only once, protocol layer shouldn't encode URL again\n        this.url = escapeURLPath(url);\n        this.accountName = getAccountNameFromUrl(url);\n        this.pipeline = pipeline;\n        this.storageClientContext = new StorageContextClient(this.url, getCoreClientOptions(pipeline));\n        this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n        this.credential = getCredentialFromPipeline(pipeline);\n        // Override protocol layer's default content-type\n        const storageClientContext = this.storageClientContext;\n        storageClientContext.requestContentType = undefined;\n    }\n}\n//# sourceMappingURL=StorageClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants\";\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const tracingClient = createTracingClient({\n    packageName: \"@azure/storage-blob\",\n    packageVersion: SDK_VERSION,\n    namespace: \"Microsoft.Storage\",\n});\n//# sourceMappingURL=tracing.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const blobSASPermissions = new BlobSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    blobSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    blobSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    blobSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    blobSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    blobSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    blobSASPermissions.deleteVersion = true;\n                    break;\n                case \"t\":\n                    blobSASPermissions.tag = true;\n                    break;\n                case \"m\":\n                    blobSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    blobSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    blobSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    blobSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission: ${char}`);\n            }\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const blobSASPermissions = new BlobSASPermissions();\n        if (permissionLike.read) {\n            blobSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            blobSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            blobSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            blobSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            blobSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            blobSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            blobSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            blobSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            blobSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            blobSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            blobSASPermissions.permanentDelete = true;\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * @returns A string which represents the BlobSASPermissions\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=BlobSASPermissions.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specifies List access granted.\n         */\n        this.list = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n        /**\n         * Specifies that Filter Blobs by Tags is permitted.\n         */\n        this.filterByTags = false;\n    }\n    /**\n     * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    containerSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    containerSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    containerSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    containerSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    containerSASPermissions.delete = true;\n                    break;\n                case \"l\":\n                    containerSASPermissions.list = true;\n                    break;\n                case \"t\":\n                    containerSASPermissions.tag = true;\n                    break;\n                case \"x\":\n                    containerSASPermissions.deleteVersion = true;\n                    break;\n                case \"m\":\n                    containerSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    containerSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    containerSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    containerSASPermissions.permanentDelete = true;\n                    break;\n                case \"f\":\n                    containerSASPermissions.filterByTags = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission ${char}`);\n            }\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        if (permissionLike.read) {\n            containerSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            containerSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            containerSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            containerSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            containerSASPermissions.delete = true;\n        }\n        if (permissionLike.list) {\n            containerSASPermissions.list = true;\n        }\n        if (permissionLike.deleteVersion) {\n            containerSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            containerSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            containerSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            containerSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            containerSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            containerSASPermissions.permanentDelete = true;\n        }\n        if (permissionLike.filterByTags) {\n            containerSASPermissions.filterByTags = true;\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * The order of the characters should be as specified here to ensure correctness.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        if (this.filterByTags) {\n            permissions.push(\"f\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=ContainerSASPermissions.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport class UserDelegationKeyCredential {\n}\n//# sourceMappingURL=UserDelegationKeyCredential.browser.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nexport function ipRangeToString(ipRange) {\n    return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n//# sourceMappingURL=SasIPRange.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n/**\n * Protocols for generated SAS.\n */\nexport var SASProtocol;\n(function (SASProtocol) {\n    /**\n     * Protocol that allows HTTPS only\n     */\n    SASProtocol[\"Https\"] = \"https\";\n    /**\n     * Protocol that allows both HTTPS and HTTP\n     */\n    SASProtocol[\"HttpsAndHttp\"] = \"https,http\";\n})(SASProtocol || (SASProtocol = {}));\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nexport class SASQueryParameters {\n    /**\n     * Optional. IP range allowed for this SAS.\n     *\n     * @readonly\n     */\n    get ipRange() {\n        if (this.ipRangeInner) {\n            return {\n                end: this.ipRangeInner.end,\n                start: this.ipRangeInner.start,\n            };\n        }\n        return undefined;\n    }\n    constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {\n        this.version = version;\n        this.signature = signature;\n        if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n            // SASQueryParametersOptions\n            this.permissions = permissionsOrOptions.permissions;\n            this.services = permissionsOrOptions.services;\n            this.resourceTypes = permissionsOrOptions.resourceTypes;\n            this.protocol = permissionsOrOptions.protocol;\n            this.startsOn = permissionsOrOptions.startsOn;\n            this.expiresOn = permissionsOrOptions.expiresOn;\n            this.ipRangeInner = permissionsOrOptions.ipRange;\n            this.identifier = permissionsOrOptions.identifier;\n            this.encryptionScope = permissionsOrOptions.encryptionScope;\n            this.resource = permissionsOrOptions.resource;\n            this.cacheControl = permissionsOrOptions.cacheControl;\n            this.contentDisposition = permissionsOrOptions.contentDisposition;\n            this.contentEncoding = permissionsOrOptions.contentEncoding;\n            this.contentLanguage = permissionsOrOptions.contentLanguage;\n            this.contentType = permissionsOrOptions.contentType;\n            if (permissionsOrOptions.userDelegationKey) {\n                this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n                this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n                this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n                this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n                this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n                this.correlationId = permissionsOrOptions.correlationId;\n            }\n        }\n        else {\n            this.services = services;\n            this.resourceTypes = resourceTypes;\n            this.expiresOn = expiresOn;\n            this.permissions = permissionsOrOptions;\n            this.protocol = protocol;\n            this.startsOn = startsOn;\n            this.ipRangeInner = ipRange;\n            this.encryptionScope = encryptionScope;\n            this.identifier = identifier;\n            this.resource = resource;\n            this.cacheControl = cacheControl;\n            this.contentDisposition = contentDisposition;\n            this.contentEncoding = contentEncoding;\n            this.contentLanguage = contentLanguage;\n            this.contentType = contentType;\n            if (userDelegationKey) {\n                this.signedOid = userDelegationKey.signedObjectId;\n                this.signedTenantId = userDelegationKey.signedTenantId;\n                this.signedStartsOn = userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n                this.signedService = userDelegationKey.signedService;\n                this.signedVersion = userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n                this.correlationId = correlationId;\n            }\n        }\n    }\n    /**\n     * Encodes all SAS query parameters into a string that can be appended to a URL.\n     *\n     */\n    toString() {\n        const params = [\n            \"sv\",\n            \"ss\",\n            \"srt\",\n            \"spr\",\n            \"st\",\n            \"se\",\n            \"sip\",\n            \"si\",\n            \"ses\",\n            \"skoid\", // Signed object ID\n            \"sktid\", // Signed tenant ID\n            \"skt\", // Signed key start time\n            \"ske\", // Signed key expiry time\n            \"sks\", // Signed key service\n            \"skv\", // Signed key version\n            \"sr\",\n            \"sp\",\n            \"sig\",\n            \"rscc\",\n            \"rscd\",\n            \"rsce\",\n            \"rscl\",\n            \"rsct\",\n            \"saoid\",\n            \"scid\",\n        ];\n        const queries = [];\n        for (const param of params) {\n            switch (param) {\n                case \"sv\":\n                    this.tryAppendQueryParameter(queries, param, this.version);\n                    break;\n                case \"ss\":\n                    this.tryAppendQueryParameter(queries, param, this.services);\n                    break;\n                case \"srt\":\n                    this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n                    break;\n                case \"spr\":\n                    this.tryAppendQueryParameter(queries, param, this.protocol);\n                    break;\n                case \"st\":\n                    this.tryAppendQueryParameter(queries, param, this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined);\n                    break;\n                case \"se\":\n                    this.tryAppendQueryParameter(queries, param, this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined);\n                    break;\n                case \"sip\":\n                    this.tryAppendQueryParameter(queries, param, this.ipRange ? ipRangeToString(this.ipRange) : undefined);\n                    break;\n                case \"si\":\n                    this.tryAppendQueryParameter(queries, param, this.identifier);\n                    break;\n                case \"ses\":\n                    this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n                    break;\n                case \"skoid\": // Signed object ID\n                    this.tryAppendQueryParameter(queries, param, this.signedOid);\n                    break;\n                case \"sktid\": // Signed tenant ID\n                    this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n                    break;\n                case \"skt\": // Signed key start time\n                    this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : undefined);\n                    break;\n                case \"ske\": // Signed key expiry time\n                    this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : undefined);\n                    break;\n                case \"sks\": // Signed key service\n                    this.tryAppendQueryParameter(queries, param, this.signedService);\n                    break;\n                case \"skv\": // Signed key version\n                    this.tryAppendQueryParameter(queries, param, this.signedVersion);\n                    break;\n                case \"sr\":\n                    this.tryAppendQueryParameter(queries, param, this.resource);\n                    break;\n                case \"sp\":\n                    this.tryAppendQueryParameter(queries, param, this.permissions);\n                    break;\n                case \"sig\":\n                    this.tryAppendQueryParameter(queries, param, this.signature);\n                    break;\n                case \"rscc\":\n                    this.tryAppendQueryParameter(queries, param, this.cacheControl);\n                    break;\n                case \"rscd\":\n                    this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n                    break;\n                case \"rsce\":\n                    this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n                    break;\n                case \"rscl\":\n                    this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n                    break;\n                case \"rsct\":\n                    this.tryAppendQueryParameter(queries, param, this.contentType);\n                    break;\n                case \"saoid\":\n                    this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n                    break;\n                case \"scid\":\n                    this.tryAppendQueryParameter(queries, param, this.correlationId);\n                    break;\n            }\n        }\n        return queries.join(\"&\");\n    }\n    /**\n     * A private helper method used to filter and append query key/value pairs into an array.\n     *\n     * @param queries -\n     * @param key -\n     * @param value -\n     */\n    tryAppendQueryParameter(queries, key, value) {\n        if (!value) {\n            return;\n        }\n        key = encodeURIComponent(key);\n        value = encodeURIComponent(value);\n        if (key.length > 0 && value.length > 0) {\n            queries.push(`${key}=${value}`);\n        }\n    }\n}\n//# sourceMappingURL=SASQueryParameters.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { BlobSASPermissions } from \"./BlobSASPermissions\";\nimport { ContainerSASPermissions } from \"./ContainerSASPermissions\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { UserDelegationKeyCredential } from \"../credentials/UserDelegationKeyCredential\";\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\nexport function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    return generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName).sasQueryParameters;\n}\nexport function generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n    const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential\n        ? sharedKeyCredentialOrUserDelegationKey\n        : undefined;\n    let userDelegationKeyCredential;\n    if (sharedKeyCredential === undefined && accountName !== undefined) {\n        userDelegationKeyCredential = new UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);\n    }\n    if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n        throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n    }\n    // Version 2020-12-06 adds support for encryptionscope in SAS.\n    if (version >= \"2020-12-06\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);\n        }\n    }\n    // Version 2019-12-12 adds support for the blob tags permission.\n    // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n    if (version >= \"2018-11-09\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n            if (version >= \"2020-02-10\") {\n                return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n            else {\n                return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n        }\n    }\n    if (version >= \"2015-04-05\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            throw new RangeError(\"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\");\n        }\n    }\n    throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\nfunction getCanonicalName(accountName, containerName, blobName) {\n    // Container: \"/blob/account/containerName\"\n    // Blob:      \"/blob/account/containerName/blobName\"\n    const elements = [`/blob/${accountName}/${containerName}`];\n    if (blobName) {\n        elements.push(`/${blobName}`);\n    }\n    return elements.join(\"\");\n}\nfunction SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n    if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n        throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n        throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n        throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        blobSASSignatureValues.permissions &&\n        (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n    }\n    if (version < \"2021-04-10\" &&\n        blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.filterByTags) {\n        throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\");\n    }\n    if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    blobSASSignatureValues.version = version;\n    return blobSASSignatureValues;\n}\n//# sourceMappingURL=BlobSASSignatureValues.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { randomUUID } from \"@azure/core-util\";\nimport { ETagNone } from \"./utils/constants\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { assertResponse } from \"./utils/utils.common\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     */\n    get leaseId() {\n        return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Creates an instance of BlobLeaseClient.\n     * @param client - The client to make the lease operation requests.\n     * @param leaseId - Initial proposed lease id.\n     */\n    constructor(client, leaseId) {\n        const clientContext = client.storageClientContext;\n        this._url = client.url;\n        if (client.name === undefined) {\n            this._isContainer = true;\n            this._containerOrBlobOperation = clientContext.container;\n        }\n        else {\n            this._isContainer = false;\n            this._containerOrBlobOperation = clientContext.blob;\n        }\n        if (!leaseId) {\n            leaseId = randomUUID();\n        }\n        this._leaseId = leaseId;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n    async acquireLease(duration, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-acquireLease\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this._containerOrBlobOperation.acquireLease({\n                abortSignal: options.abortSignal,\n                duration,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                proposedLeaseId: this._leaseId,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n    async changeLease(proposedLeaseId, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-changeLease\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            this._leaseId = proposedLeaseId;\n            return response;\n        });\n    }\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n    async releaseLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-releaseLease\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n    async renewLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-renewLease\", options, async (updatedOptions) => {\n            var _a;\n            return this._containerOrBlobOperation.renewLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            });\n        });\n    }\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n    async breakLease(breakPeriod, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-breakLease\", options, async (updatedOptions) => {\n            var _a;\n            const operationOptions = {\n                abortSignal: options.abortSignal,\n                breakPeriod,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            };\n            return assertResponse(await this._containerOrBlobOperation.breakLease(operationOptions));\n        });\n    }\n}\n//# sourceMappingURL=BlobLeaseClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN BROWSER RUNTIME.\n *\n * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will\n * parse avor data returned by blob query.\n */\nexport class BlobQueryResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return undefined;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the File service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get blobBody() {\n        throw Error(`Quick query in browser is not supported yet.`);\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobQueryResponse.\n     *\n     * @param originalResponse -\n     * @param options -\n     */\n    constructor(originalResponse, _options = {}) {\n        this.originalResponse = originalResponse;\n    }\n}\n//# sourceMappingURL=BlobQueryResponse.browser.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { EncryptionAlgorithmAES25 } from \"./utils/constants\";\n/**\n * Represents the access tier on a blob.\n * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}\n */\nexport var BlockBlobTier;\n(function (BlockBlobTier) {\n    /**\n     * Optimized for storing data that is accessed frequently.\n     */\n    BlockBlobTier[\"Hot\"] = \"Hot\";\n    /**\n     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.\n     */\n    BlockBlobTier[\"Cool\"] = \"Cool\";\n    /**\n     * Optimized for storing data that is rarely accessed.\n     */\n    BlockBlobTier[\"Cold\"] = \"Cold\";\n    /**\n     * Optimized for storing data that is rarely accessed and stored for at least 180 days\n     * with flexible latency requirements (on the order of hours).\n     */\n    BlockBlobTier[\"Archive\"] = \"Archive\";\n})(BlockBlobTier || (BlockBlobTier = {}));\n/**\n * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.\n * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}\n * for detailed information on the corresponding IOPS and throughput per PageBlobTier.\n */\nexport var PremiumPageBlobTier;\n(function (PremiumPageBlobTier) {\n    /**\n     * P4 Tier.\n     */\n    PremiumPageBlobTier[\"P4\"] = \"P4\";\n    /**\n     * P6 Tier.\n     */\n    PremiumPageBlobTier[\"P6\"] = \"P6\";\n    /**\n     * P10 Tier.\n     */\n    PremiumPageBlobTier[\"P10\"] = \"P10\";\n    /**\n     * P15 Tier.\n     */\n    PremiumPageBlobTier[\"P15\"] = \"P15\";\n    /**\n     * P20 Tier.\n     */\n    PremiumPageBlobTier[\"P20\"] = \"P20\";\n    /**\n     * P30 Tier.\n     */\n    PremiumPageBlobTier[\"P30\"] = \"P30\";\n    /**\n     * P40 Tier.\n     */\n    PremiumPageBlobTier[\"P40\"] = \"P40\";\n    /**\n     * P50 Tier.\n     */\n    PremiumPageBlobTier[\"P50\"] = \"P50\";\n    /**\n     * P60 Tier.\n     */\n    PremiumPageBlobTier[\"P60\"] = \"P60\";\n    /**\n     * P70 Tier.\n     */\n    PremiumPageBlobTier[\"P70\"] = \"P70\";\n    /**\n     * P80 Tier.\n     */\n    PremiumPageBlobTier[\"P80\"] = \"P80\";\n})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));\nexport function toAccessTier(tier) {\n    if (tier === undefined) {\n        return undefined;\n    }\n    return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).\n}\nexport function ensureCpkIfSpecified(cpk, isHttps) {\n    if (cpk && !isHttps) {\n        throw new RangeError(\"Customer-provided encryption key must be used over HTTPS.\");\n    }\n    if (cpk && !cpk.encryptionAlgorithm) {\n        cpk.encryptionAlgorithm = EncryptionAlgorithmAES25;\n    }\n}\n/**\n * Defines the known cloud audiences for Storage.\n */\nexport var StorageBlobAudience;\n(function (StorageBlobAudience) {\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Storage.\n     */\n    StorageBlobAudience[\"StorageOAuthScopes\"] = \"https://storage.azure.com/.default\";\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Disk.\n     */\n    StorageBlobAudience[\"DiskComputeOAuthScopes\"] = \"https://disk.compute.azure.com/.default\";\n})(StorageBlobAudience || (StorageBlobAudience = {}));\n/**\n *\n * To get OAuth audience for a storage account for blob service.\n */\nexport function getBlobServiceAccountAudience(storageAccountName) {\n    return `https://${storageAccountName}.blob.core.windows.net/.default`;\n}\n//# sourceMappingURL=models.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Function that converts PageRange and ClearRange to a common Range object.\n * PageRange and ClearRange have start and end while Range offset and count\n * this function normalizes to Range.\n * @param response - Model PageBlob Range response\n */\nexport function rangeResponseFromModel(response) {\n    const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    return Object.assign(Object.assign({}, response), { pageRange,\n        clearRange, _response: Object.assign(Object.assign({}, response._response), { parsedBody: {\n                pageRange,\n                clearRange,\n            } }) });\n}\n//# sourceMappingURL=PageBlobRangeResponse.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport class PollerStoppedError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerStoppedError\";\n        Object.setPrototypeOf(this, PollerStoppedError.prototype);\n    }\n}\n/**\n * When the operation is cancelled, the poller will be rejected with an instance\n * of the PollerCancelledError.\n */\nexport class PollerCancelledError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerCancelledError\";\n        Object.setPrototypeOf(this, PollerCancelledError.prototype);\n    }\n}\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nexport class Poller {\n    /**\n     * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n     *\n     * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n     * operation has already been defined, at least its basic properties. The code below shows how to approach\n     * the definition of the constructor of a new custom poller.\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor({\n     *     // Anything you might need outside of the basics\n     *   }) {\n     *     let state: MyOperationState = {\n     *       privateProperty: private,\n     *       publicProperty: public,\n     *     };\n     *\n     *     const operation = {\n     *       state,\n     *       update,\n     *       cancel,\n     *       toString\n     *     }\n     *\n     *     // Sending the operation to the parent's constructor.\n     *     super(operation);\n     *\n     *     // You can assign more local properties here.\n     *   }\n     * }\n     * ```\n     *\n     * Inside of this constructor, a new promise is created. This will be used to\n     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n     * resolve and reject methods are also used internally to control when to resolve\n     * or reject anyone waiting for the poller to finish.\n     *\n     * The constructor of a custom implementation of a poller is where any serialized version of\n     * a previous poller's operation should be deserialized into the operation sent to the\n     * base constructor. For example:\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor(\n     *     baseOperation: string | undefined\n     *   ) {\n     *     let state: MyOperationState = {};\n     *     if (baseOperation) {\n     *       state = {\n     *         ...JSON.parse(baseOperation).state,\n     *         ...state\n     *       };\n     *     }\n     *     const operation = {\n     *       state,\n     *       // ...\n     *     }\n     *     super(operation);\n     *   }\n     * }\n     * ```\n     *\n     * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n     */\n    constructor(operation) {\n        /** controls whether to throw an error if the operation failed or was canceled. */\n        this.resolveOnUnsuccessful = false;\n        this.stopped = true;\n        this.pollProgressCallbacks = [];\n        this.operation = operation;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n        // The above warning would get thrown if `poller.poll` is called, it returns an error,\n        // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n        this.promise.catch(() => {\n            /* intentionally blank */\n        });\n    }\n    /**\n     * Starts a loop that will break only if the poller is done\n     * or if the poller is stopped.\n     */\n    async startPolling(pollOptions = {}) {\n        if (this.stopped) {\n            this.stopped = false;\n        }\n        while (!this.isStopped() && !this.isDone()) {\n            await this.poll(pollOptions);\n            await this.delay();\n        }\n    }\n    /**\n     * pollOnce does one polling, by calling to the update method of the underlying\n     * poll operation to make any relevant change effective.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    async pollOnce(options = {}) {\n        if (!this.isDone()) {\n            this.operation = await this.operation.update({\n                abortSignal: options.abortSignal,\n                fireProgress: this.fireProgress.bind(this),\n            });\n        }\n        this.processUpdatedState();\n    }\n    /**\n     * fireProgress calls the functions passed in via onProgress the method of the poller.\n     *\n     * It loops over all of the callbacks received from onProgress, and executes them, sending them\n     * the current operation state.\n     *\n     * @param state - The current operation state.\n     */\n    fireProgress(state) {\n        for (const callback of this.pollProgressCallbacks) {\n            callback(state);\n        }\n    }\n    /**\n     * Invokes the underlying operation's cancel method.\n     */\n    async cancelOnce(options = {}) {\n        this.operation = await this.operation.cancel(options);\n    }\n    /**\n     * Returns a promise that will resolve once a single polling request finishes.\n     * It does this by calling the update method of the Poller's operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    poll(options = {}) {\n        if (!this.pollOncePromise) {\n            this.pollOncePromise = this.pollOnce(options);\n            const clearPollOncePromise = () => {\n                this.pollOncePromise = undefined;\n            };\n            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n        }\n        return this.pollOncePromise;\n    }\n    processUpdatedState() {\n        if (this.operation.state.error) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                this.reject(this.operation.state.error);\n                throw this.operation.state.error;\n            }\n        }\n        if (this.operation.state.isCancelled) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                const error = new PollerCancelledError(\"Operation was canceled\");\n                this.reject(error);\n                throw error;\n            }\n        }\n        if (this.isDone() && this.resolve) {\n            // If the poller has finished polling, this means we now have a result.\n            // However, it can be the case that TResult is instantiated to void, so\n            // we are not expecting a result anyway. To assert that we might not\n            // have a result eventually after finishing polling, we cast the result\n            // to TResult.\n            this.resolve(this.getResult());\n        }\n    }\n    /**\n     * Returns a promise that will resolve once the underlying operation is completed.\n     */\n    async pollUntilDone(pollOptions = {}) {\n        if (this.stopped) {\n            this.startPolling(pollOptions).catch(this.reject);\n        }\n        // This is needed because the state could have been updated by\n        // `cancelOperation`, e.g. the operation is canceled or an error occurred.\n        this.processUpdatedState();\n        return this.promise;\n    }\n    /**\n     * Invokes the provided callback after each polling is completed,\n     * sending the current state of the poller's operation.\n     *\n     * It returns a method that can be used to stop receiving updates on the given callback function.\n     */\n    onProgress(callback) {\n        this.pollProgressCallbacks.push(callback);\n        return () => {\n            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n        };\n    }\n    /**\n     * Returns true if the poller has finished polling.\n     */\n    isDone() {\n        const state = this.operation.state;\n        return Boolean(state.isCompleted || state.isCancelled || state.error);\n    }\n    /**\n     * Stops the poller from continuing to poll.\n     */\n    stopPolling() {\n        if (!this.stopped) {\n            this.stopped = true;\n            if (this.reject) {\n                this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n            }\n        }\n    }\n    /**\n     * Returns true if the poller is stopped.\n     */\n    isStopped() {\n        return this.stopped;\n    }\n    /**\n     * Attempts to cancel the underlying operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * If it's called again before it finishes, it will throw an error.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    cancelOperation(options = {}) {\n        if (!this.cancelPromise) {\n            this.cancelPromise = this.cancelOnce(options);\n        }\n        else if (options.abortSignal) {\n            throw new Error(\"A cancel request is currently pending\");\n        }\n        return this.cancelPromise;\n    }\n    /**\n     * Returns the state of the operation.\n     *\n     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n     * implementations of the pollers can customize what's shared with the public by writing their own\n     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n     * and a public type representing a safe to share subset of the properties of the internal state.\n     * Their definition of getOperationState can then return their public type.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Let's say we have our poller's operation state defined as:\n     * interface MyOperationState extends PollOperationState<ResultType> {\n     *   privateProperty?: string;\n     *   publicProperty?: string;\n     * }\n     *\n     * // To allow us to have a true separation of public and private state, we have to define another interface:\n     * interface PublicState extends PollOperationState<ResultType> {\n     *   publicProperty?: string;\n     * }\n     *\n     * // Then, we define our Poller as follows:\n     * export class MyPoller extends Poller<MyOperationState, ResultType> {\n     *   // ... More content is needed here ...\n     *\n     *   public getOperationState(): PublicState {\n     *     const state: PublicState = this.operation.state;\n     *     return {\n     *       // Properties from PollOperationState<TResult>\n     *       isStarted: state.isStarted,\n     *       isCompleted: state.isCompleted,\n     *       isCancelled: state.isCancelled,\n     *       error: state.error,\n     *       result: state.result,\n     *\n     *       // The only other property needed by PublicState.\n     *       publicProperty: state.publicProperty\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can see this in the tests of this repository, go to the file:\n     * `../test/utils/testPoller.ts`\n     * and look for the getOperationState implementation.\n     */\n    getOperationState() {\n        return this.operation.state;\n    }\n    /**\n     * Returns the result value of the operation,\n     * regardless of the state of the poller.\n     * It can return undefined or an incomplete form of the final TResult value\n     * depending on the implementation.\n     */\n    getResult() {\n        const state = this.operation.state;\n        return state.result;\n    }\n    /**\n     * Returns a serialized version of the poller's operation\n     * by invoking the operation's toString method.\n     */\n    toString() {\n        return this.operation.toString();\n    }\n}\n//# sourceMappingURL=poller.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"@azure/core-util\";\nimport { Poller } from \"@azure/core-lro\";\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport class BlobBeginCopyFromUrlPoller extends Poller {\n    constructor(options) {\n        const { blobClient, copySource, intervalInMs = 15000, onProgress, resumeFrom, startCopyFromURLOptions, } = options;\n        let state;\n        if (resumeFrom) {\n            state = JSON.parse(resumeFrom).state;\n        }\n        const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), { blobClient,\n            copySource,\n            startCopyFromURLOptions }));\n        super(operation);\n        if (typeof onProgress === \"function\") {\n            this.onProgress(onProgress);\n        }\n        this.intervalInMs = intervalInMs;\n    }\n    delay() {\n        return delay(this.intervalInMs);\n    }\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel = async function cancel(options = {}) {\n    const state = this.state;\n    const { copyId } = state;\n    if (state.isCompleted) {\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    if (!copyId) {\n        state.isCancelled = true;\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n    await state.blobClient.abortCopyFromURL(copyId, {\n        abortSignal: options.abortSignal,\n    });\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update = async function update(options = {}) {\n    const state = this.state;\n    const { blobClient, copySource, startCopyFromURLOptions } = state;\n    if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n        // copyId is needed to abort\n        state.copyId = result.copyId;\n        if (result.copyStatus === \"success\") {\n            state.result = result;\n            state.isCompleted = true;\n        }\n    }\n    else if (!state.isCompleted) {\n        try {\n            const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n            const { copyStatus, copyProgress } = result;\n            const prevCopyProgress = state.copyProgress;\n            if (copyProgress) {\n                state.copyProgress = copyProgress;\n            }\n            if (copyStatus === \"pending\" &&\n                copyProgress !== prevCopyProgress &&\n                typeof options.fireProgress === \"function\") {\n                // trigger in setTimeout, or swallow error?\n                options.fireProgress(state);\n            }\n            else if (copyStatus === \"success\") {\n                state.result = result;\n                state.isCompleted = true;\n            }\n            else if (copyStatus === \"failed\") {\n                state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n                state.isCompleted = true;\n            }\n        }\n        catch (err) {\n            state.error = err;\n            state.isCompleted = true;\n        }\n    }\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString = function toString() {\n    return JSON.stringify({ state: this.state }, (key, value) => {\n        // remove blobClient from serialized state since a client can't be hydrated from this info.\n        if (key === \"blobClient\") {\n            return undefined;\n        }\n        return value;\n    });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n    return {\n        state: Object.assign({}, state),\n        cancel,\n        toString,\n        update,\n    };\n}\n//# sourceMappingURL=BlobStartCopyFromUrlPoller.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @param iRange -\n */\nexport function rangeToString(iRange) {\n    if (iRange.offset < 0) {\n        throw new RangeError(`Range.offset cannot be smaller than 0.`);\n    }\n    if (iRange.count && iRange.count <= 0) {\n        throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);\n    }\n    return iRange.count\n        ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n        : `bytes=${iRange.offset}-`;\n}\n//# sourceMappingURL=Range.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n/**\n * States for Batch.\n */\nvar BatchStates;\n(function (BatchStates) {\n    BatchStates[BatchStates[\"Good\"] = 0] = \"Good\";\n    BatchStates[BatchStates[\"Error\"] = 1] = \"Error\";\n})(BatchStates || (BatchStates = {}));\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nexport class Batch {\n    /**\n     * Creates an instance of Batch.\n     * @param concurrency -\n     */\n    constructor(concurrency = 5) {\n        /**\n         * Number of active operations under execution.\n         */\n        this.actives = 0;\n        /**\n         * Number of completed operations under execution.\n         */\n        this.completed = 0;\n        /**\n         * Offset of next operation to be executed.\n         */\n        this.offset = 0;\n        /**\n         * Operation array to be executed.\n         */\n        this.operations = [];\n        /**\n         * States of Batch. When an error happens, state will turn into error.\n         * Batch will stop execute left operations.\n         */\n        this.state = BatchStates.Good;\n        if (concurrency < 1) {\n            throw new RangeError(\"concurrency must be larger than 0\");\n        }\n        this.concurrency = concurrency;\n        this.emitter = new EventEmitter();\n    }\n    /**\n     * Add a operation into queue.\n     *\n     * @param operation -\n     */\n    addOperation(operation) {\n        this.operations.push(async () => {\n            try {\n                this.actives++;\n                await operation();\n                this.actives--;\n                this.completed++;\n                this.parallelExecute();\n            }\n            catch (error) {\n                this.emitter.emit(\"error\", error);\n            }\n        });\n    }\n    /**\n     * Start execute operations in the queue.\n     *\n     */\n    async do() {\n        if (this.operations.length === 0) {\n            return Promise.resolve();\n        }\n        this.parallelExecute();\n        return new Promise((resolve, reject) => {\n            this.emitter.on(\"finish\", resolve);\n            this.emitter.on(\"error\", (error) => {\n                this.state = BatchStates.Error;\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Get next operation to be executed. Return null when reaching ends.\n     *\n     */\n    nextOperation() {\n        if (this.offset < this.operations.length) {\n            return this.operations[this.offset++];\n        }\n        return null;\n    }\n    /**\n     * Start execute operations. One one the most important difference between\n     * this method with do() is that do() wraps as an sync method.\n     *\n     */\n    parallelExecute() {\n        if (this.state === BatchStates.Error) {\n            return;\n        }\n        if (this.completed >= this.operations.length) {\n            this.emitter.emit(\"finish\");\n            return;\n        }\n        while (this.actives < this.concurrency) {\n            const operation = this.nextOperation();\n            if (operation) {\n                operation();\n            }\n            else {\n                return;\n            }\n        }\n    }\n}\n//# sourceMappingURL=Batch.js.map","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// This file is used as a shim of \"BufferScheduler\" for some browser bundlers\n// when trying to bundle \"BufferScheduler\"\n// \"BufferScheduler\" class is only available in Node.js runtime\nexport class BufferScheduler {\n}\n//# sourceMappingURL=BufferScheduler.browser.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { getDefaultProxySettings } from \"@azure/core-rest-pipeline\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { isNode } from \"@azure/core-util\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { BlobDownloadResponse } from \"./BlobDownloadResponse\";\nimport { BlobQueryResponse } from \"./BlobQueryResponse\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { ensureCpkIfSpecified, toAccessTier } from \"./models\";\nimport { rangeResponseFromModel } from \"./PageBlobRangeResponse\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { BlobBeginCopyFromUrlPoller } from \"./pollers/BlobStartCopyFromUrlPoller\";\nimport { rangeToString } from \"./Range\";\nimport { StorageClient } from \"./StorageClient\";\nimport { Batch } from \"./utils/Batch\";\nimport { BufferScheduler } from \"../../storage-common/src\";\nimport { BlobDoesNotUseCustomerSpecifiedEncryption, BlobUsesCustomerSpecifiedEncryptionMsg, BLOCK_BLOB_MAX_BLOCKS, BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES, BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES, DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES, DEFAULT_BLOCK_BUFFER_SIZE_BYTES, DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS, ETagAny, URLConstants, } from \"./utils/constants\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { appendToURLPath, appendToURLQuery, assertResponse, extractConnectionStringParts, ExtractPageRangeInfoItems, generateBlockID, getURLParameter, httpAuthorizationToString, isIpEndpointStyle, parseObjectReplicationRecord, setURLParameter, toBlobTags, toBlobTagsString, toQuerySerialization, toTags, } from \"./utils/utils.common\";\nimport { fsCreateReadStream, fsStat, readStreamToLocalFile, streamToBuffer, } from \"./utils/utils.node\";\nimport { generateBlobSASQueryParameters, generateBlobSASQueryParametersInternal, } from \"./sas/BlobSASSignatureValues\";\nimport { BlobLeaseClient } from \"./BlobLeaseClient\";\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n */\nexport class BlobClient extends StorageClient {\n    /**\n     * The name of the blob.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The name of the storage container the blob is associated with.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        let pipeline;\n        let url;\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        ({ blobName: this._name, containerName: this._containerName } =\n            this.getBlobAndContainerNamesFromUrl());\n        this.blobContext = this.storageClientContext.blob;\n        this._snapshot = getURLParameter(this.url, URLConstants.Parameters.SNAPSHOT);\n        this._versionId = getURLParameter(this.url, URLConstants.Parameters.VERSIONID);\n    }\n    /**\n     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp\n     */\n    withSnapshot(snapshot) {\n        return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a new BlobClient object pointing to a version of this blob.\n     * Provide \"\" will remove the versionId and return a Client to the base blob.\n     *\n     * @param versionId - The versionId.\n     * @returns A new BlobClient object pointing to the version of this blob.\n     */\n    withVersion(versionId) {\n        return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);\n    }\n    /**\n     * Creates a AppendBlobClient object.\n     *\n     */\n    getAppendBlobClient() {\n        return new AppendBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a BlockBlobClient object.\n     *\n     */\n    getBlockBlobClient() {\n        return new BlockBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a PageBlobClient object.\n     *\n     */\n    getPageBlobClient() {\n        return new PageBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Reads or downloads a blob from the system, including its metadata and properties.\n     * You can also call Get Blob to read a snapshot.\n     *\n     * * In Node.js, data returns in a Readable stream readableStreamBody\n     * * In browsers, data returns in a promise blobBody\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n     *\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Optional options to Blob Download operation.\n     *\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n     * console.log(\"Downloaded blob content:\", downloaded.toString());\n     *\n     * async function streamToBuffer(readableStream) {\n     * return new Promise((resolve, reject) => {\n     * const chunks = [];\n     * readableStream.on(\"data\", (data) => {\n     * chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     * });\n     * readableStream.on(\"end\", () => {\n     * resolve(Buffer.concat(chunks));\n     * });\n     * readableStream.on(\"error\", reject);\n     * });\n     * }\n     * ```\n     *\n     * Example usage (browser):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n     * console.log(\n     *   \"Downloaded blob content\",\n     *   downloaded\n     * );\n     *\n     * async function blobToString(blob: Blob): Promise<string> {\n     *   const fileReader = new FileReader();\n     *   return new Promise<string>((resolve, reject) => {\n     *     fileReader.onloadend = (ev: any) => {\n     *       resolve(ev.target!.result);\n     *     };\n     *     fileReader.onerror = reject;\n     *     fileReader.readAsText(blob);\n     *   });\n     * }\n     * ```\n     */\n    async download(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-download\", options, async (updatedOptions) => {\n            var _a;\n            const res = assertResponse(await this.blobContext.download({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onDownloadProgress: isNode ? undefined : options.onProgress, // for Node.js, progress is reported by RetriableReadableStream\n                },\n                range: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n                rangeGetContentMD5: options.rangeGetContentMD5,\n                rangeGetContentCRC64: options.rangeGetContentCrc64,\n                snapshot: options.snapshot,\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });\n            // Return browser response immediately\n            if (!isNode) {\n                return wrappedRes;\n            }\n            // We support retrying when download stream unexpected ends in Node.js runtime\n            // Following code shouldn't be bundled into browser build, however some\n            // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n            // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n            // The config is in package.json \"browser\" field\n            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n                // TODO: Default value or make it a required parameter?\n                options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n            }\n            if (res.contentLength === undefined) {\n                throw new RangeError(`File download response doesn't contain valid content length header`);\n            }\n            if (!res.etag) {\n                throw new RangeError(`File download response doesn't contain valid etag header`);\n            }\n            return new BlobDownloadResponse(wrappedRes, async (start) => {\n                var _a;\n                const updatedDownloadOptions = {\n                    leaseAccessConditions: options.conditions,\n                    modifiedAccessConditions: {\n                        ifMatch: options.conditions.ifMatch || res.etag,\n                        ifModifiedSince: options.conditions.ifModifiedSince,\n                        ifNoneMatch: options.conditions.ifNoneMatch,\n                        ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,\n                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions,\n                    },\n                    range: rangeToString({\n                        count: offset + res.contentLength - start,\n                        offset: start,\n                    }),\n                    rangeGetContentMD5: options.rangeGetContentMD5,\n                    rangeGetContentCRC64: options.rangeGetContentCrc64,\n                    snapshot: options.snapshot,\n                    cpkInfo: options.customerProvidedKey,\n                };\n                // Debug purpose only\n                // console.log(\n                //   `Read from internal stream, range: ${\n                //     updatedOptions.range\n                //   }, options: ${JSON.stringify(updatedOptions)}`\n                // );\n                return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;\n            }, offset, res.contentLength, {\n                maxRetryRequests: options.maxRetryRequests,\n                onProgress: options.onProgress,\n            });\n        });\n    }\n    /**\n     * Returns true if the Azure blob resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing blob might be deleted by other clients or\n     * applications. Vice versa new blobs might be added by other clients or applications after this\n     * function completes.\n     *\n     * @param options - options to Exists operation.\n     */\n    async exists(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-exists\", options, async (updatedOptions) => {\n            try {\n                ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    // Expected exception when checking blob existence\n                    return false;\n                }\n                else if (e.statusCode === 409 &&\n                    (e.details.errorCode === BlobUsesCustomerSpecifiedEncryptionMsg ||\n                        e.details.errorCode === BlobDoesNotUseCustomerSpecifiedEncryption)) {\n                    // Expected exception when checking blob existence\n                    return true;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Returns all user-defined metadata, standard HTTP properties, and system properties\n     * for the blob. It does not return the content of the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Optional options to Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-getProperties\", options, async (updatedOptions) => {\n            var _a;\n            const res = assertResponse(await this.blobContext.getProperties({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async delete(options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"BlobClient-delete\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.delete({\n                abortSignal: options.abortSignal,\n                deleteSnapshots: options.deleteSnapshots,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = assertResponse(await this.delete(updatedOptions));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Restores the contents and metadata of soft deleted blob and any associated\n     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n     * or later.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n     *\n     * @param options - Optional options to Blob Undelete operation.\n     */\n    async undelete(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-undelete\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.undelete({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets system properties on the blob.\n     *\n     * If no value provided, or no value provided for the specified blob HTTP headers,\n     * these blob HTTP headers without a value will be cleared.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param blobHTTPHeaders - If no value provided, or no value provided for\n     *                                                   the specified blob HTTP headers, these blob HTTP\n     *                                                   headers without a value will be cleared.\n     *                                                   A common header to set is `blobContentType`\n     *                                                   enabling the browser to provide functionality\n     *                                                   based on file type.\n     * @param options - Optional options to Blob Set HTTP Headers operation.\n     */\n    async setHTTPHeaders(blobHTTPHeaders, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-setHTTPHeaders\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setHttpHeaders({\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n     *\n     * If no option provided, or no metadata defined in the parameter, the blob\n     * metadata will be removed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                               If no value provided the existing metadata will be removed.\n     * @param options - Optional options to Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-setMetadata\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets tags on the underlying blob.\n     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.\n     * Valid tag key and value characters include lower and upper case letters, digits (0-9),\n     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').\n     *\n     * @param tags -\n     * @param options -\n     */\n    async setTags(tags, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setTags\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n                tags: toBlobTags(tags),\n            }));\n        });\n    }\n    /**\n     * Gets the tags associated with the underlying blob.\n     *\n     * @param options -\n     */\n    async getTags(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-getTags\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this.blobContext.getTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: toTags({ blobTagSet: response.blobTagSet }) || {} });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the blob.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the blob.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a read-only snapshot of a blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n     *\n     * @param options - Optional options to the Blob Create Snapshot operation.\n     */\n    async createSnapshot(options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-createSnapshot\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.createSnapshot({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * This method returns a long running operation poller that allows you to wait\n     * indefinitely until the copy is completed.\n     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n     * Note that the onProgress callback will not be invoked if the operation completes in the first\n     * request, and attempting to cancel a completed copy will result in an error being thrown.\n     *\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * Example using automatic polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using manual polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * while (!poller.isDone()) {\n     *    await poller.poll();\n     * }\n     * const result = copyPoller.getResult();\n     * ```\n     *\n     * Example using progress updates:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   onProgress(state) {\n     *     console.log(`Progress: ${state.copyProgress}`);\n     *   }\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using a changing polling interval (default 15 seconds):\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using copy cancellation:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * // cancel operation after starting it.\n     * try {\n     *   await copyPoller.cancelOperation();\n     *   // calls to get the result now throw PollerCancelledError\n     *   await copyPoller.getResult();\n     * } catch (err) {\n     *   if (err.name === 'PollerCancelledError') {\n     *     console.log('The copy was cancelled.');\n     *   }\n     * }\n     * ```\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async beginCopyFromURL(copySource, options = {}) {\n        const client = {\n            abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),\n            getProperties: (...args) => this.getProperties(...args),\n            startCopyFromURL: (...args) => this.startCopyFromURL(...args),\n        };\n        const poller = new BlobBeginCopyFromUrlPoller({\n            blobClient: client,\n            copySource,\n            intervalInMs: options.intervalInMs,\n            onProgress: options.onProgress,\n            resumeFrom: options.resumeFrom,\n            startCopyFromURLOptions: options,\n        });\n        // Trigger the startCopyFromURL call by calling poll.\n        // Any errors from this method should be surfaced to the user.\n        await poller.poll();\n        return poller;\n    }\n    /**\n     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n     * length and full metadata. Version 2012-02-12 and newer.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n     *\n     * @param copyId - Id of the Copy From URL operation.\n     * @param options - Optional options to the Blob Abort Copy From URL operation.\n     */\n    async abortCopyFromURL(copyId, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-abortCopyFromURL\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.abortCopyFromURL(copyId, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n     * return a response until the copy is complete.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n     *\n     * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n     * @param options -\n     */\n    async syncCopyFromURL(copySource, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        return tracingClient.withSpan(\"BlobClient-syncCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            return assertResponse(await this.blobContext.copyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                metadata: options.metadata,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                sourceContentMD5: options.sourceContentMD5,\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,\n                immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,\n                legalHold: options.legalHold,\n                encryptionScope: options.encryptionScope,\n                copySourceTags: options.copySourceTags,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant\n     * storage only). A premium page blob's tier determines the allowed size, IOPS,\n     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n     * storage type. This operation does not update the blob's ETag.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n     *\n     * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n     * @param options - Optional options to the Blob Set Tier operation.\n     */\n    async setAccessTier(tier, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setAccessTier\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setTier(toAccessTier(tier), {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                rehydratePriority: options.rehydratePriority,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    async downloadToBuffer(param1, param2, param3, param4 = {}) {\n        var _a;\n        let buffer;\n        let offset = 0;\n        let count = 0;\n        let options = param4;\n        if (param1 instanceof Buffer) {\n            buffer = param1;\n            offset = param2 || 0;\n            count = typeof param3 === \"number\" ? param3 : 0;\n        }\n        else {\n            offset = typeof param1 === \"number\" ? param1 : 0;\n            count = typeof param2 === \"number\" ? param2 : 0;\n            options = param3 || {};\n        }\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0) {\n            throw new RangeError(\"blockSize option must be >= 0\");\n        }\n        if (blockSize === 0) {\n            blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n        if (offset < 0) {\n            throw new RangeError(\"offset option must be >= 0\");\n        }\n        if (count && count <= 0) {\n            throw new RangeError(\"count option must be greater than 0\");\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"BlobClient-downloadToBuffer\", options, async (updatedOptions) => {\n            // Customer doesn't specify length, get it\n            if (!count) {\n                const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n                count = response.contentLength - offset;\n                if (count < 0) {\n                    throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);\n                }\n            }\n            // Allocate the buffer of size = count if the buffer is not provided\n            if (!buffer) {\n                try {\n                    buffer = Buffer.alloc(count);\n                }\n                catch (error) {\n                    throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\\t ${error.message}`);\n                }\n            }\n            if (buffer.length < count) {\n                throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);\n            }\n            let transferProgress = 0;\n            const batch = new Batch(options.concurrency);\n            for (let off = offset; off < offset + count; off = off + blockSize) {\n                batch.addOperation(async () => {\n                    // Exclusive chunk end position\n                    let chunkEnd = offset + count;\n                    if (off + blockSize < chunkEnd) {\n                        chunkEnd = off + blockSize;\n                    }\n                    const response = await this.download(off, chunkEnd - off, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        maxRetryRequests: options.maxRetryRequestsPerBlock,\n                        customerProvidedKey: options.customerProvidedKey,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    const stream = response.readableStreamBody;\n                    await streamToBuffer(stream, buffer, off - offset, chunkEnd - offset);\n                    // Update progress after block is downloaded, in case of block trying\n                    // Could provide finer grained progress updating inside HTTP requests,\n                    // only if convenience layer download try is enabled\n                    transferProgress += chunkEnd - off;\n                    if (options.onProgress) {\n                        options.onProgress({ loadedBytes: transferProgress });\n                    }\n                });\n            }\n            await batch.do();\n            return buffer;\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Downloads an Azure Blob to a local file.\n     * Fails if the the given file path already exits.\n     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n     *\n     * @param filePath -\n     * @param offset - From which position of the block blob to download.\n     * @param count - How much data to be downloaded. Will download to the end when passing undefined.\n     * @param options - Options to Blob download options.\n     * @returns The response data for blob download operation,\n     *                                                 but with readableStreamBody set to undefined since its\n     *                                                 content is already read and written into a local file\n     *                                                 at the specified path.\n     */\n    async downloadToFile(filePath, offset = 0, count, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-downloadToFile\", options, async (updatedOptions) => {\n            const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n            if (response.readableStreamBody) {\n                await readStreamToLocalFile(response.readableStreamBody, filePath);\n            }\n            // The stream is no longer accessible so setting it to undefined.\n            response.blobDownloadStream = undefined;\n            return response;\n        });\n    }\n    getBlobAndContainerNamesFromUrl() {\n        let containerName;\n        let blobName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n            // http://localhost:10001/devstoreaccount1/containername/blob\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.host.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            else if (isIpEndpointStyle(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n                // .getPath() -> /devstoreaccount1/containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)/([^/]*)(/(.*))?\");\n                containerName = pathComponents[2];\n                blobName = pathComponents[4];\n            }\n            else {\n                // \"https://customdomain.com/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n            containerName = decodeURIComponent(containerName);\n            blobName = decodeURIComponent(blobName);\n            // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n            //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n            blobName = blobName.replace(/\\\\/g, \"/\");\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return { blobName, containerName };\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n        }\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async startCopyFromURL(copySource, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-startCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            return assertResponse(await this.blobContext.startCopyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: options.sourceConditions.ifMatch,\n                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n                    sourceIfTags: options.sourceConditions.tagConditions,\n                },\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                rehydratePriority: options.rehydratePriority,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                sealBlob: options.sealBlob,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();\n            resolve(appendToURLQuery(this.url, sas));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    generateSasStringToSign(options) {\n        if (!(this.credential instanceof StorageSharedKeyCredential)) {\n            throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n        }\n        return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).stringToSign;\n    }\n    /**\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasUrl(options, userDelegationKey) {\n        return new Promise((resolve) => {\n            const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).toString();\n            resolve(appendToURLQuery(this.url, sas));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasStringToSign(options, userDelegationKey) {\n        return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).stringToSign;\n    }\n    /**\n     * Delete the immutablility policy on the blob.\n     *\n     * @param options - Optional options to delete immutability policy on the blob.\n     */\n    async deleteImmutabilityPolicy(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-deleteImmutabilityPolicy\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.deleteImmutabilityPolicy({\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set immutability policy on the blob.\n     *\n     * @param options - Optional options to set immutability policy on the blob.\n     */\n    async setImmutabilityPolicy(immutabilityPolicy, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setImmutabilityPolicy\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.setImmutabilityPolicy({\n                immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,\n                immutabilityPolicyMode: immutabilityPolicy.policyMode,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set legal hold on the blob.\n     *\n     * @param options - Optional options to set legal hold on the blob.\n     */\n    async setLegalHold(legalHoldEnabled, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setLegalHold\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.setLegalHold(legalHoldEnabled, {\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-getAccountInfo\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n */\nexport class AppendBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            // The second parameter is undefined. Use anonymous credential.\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.appendBlobContext = this.storageClientContext.appendBlob;\n    }\n    /**\n     * Creates a new AppendBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new AppendBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options - Options to the Append Block Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await appendBlobClient.create();\n     * ```\n     */\n    async create(options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"AppendBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.appendBlobContext.create(0, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        const conditions = { ifNoneMatch: ETagAny };\n        return tracingClient.withSpan(\"AppendBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = assertResponse(await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Seals the append blob, making it read only.\n     *\n     * @param options -\n     */\n    async seal(options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"AppendBlobClient-seal\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.appendBlobContext.seal({\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Commits a new block of data to the end of the existing append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n     *\n     * @param body - Data to be appended.\n     * @param contentLength - Length of the body in bytes.\n     * @param options - Options to the Append Block operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello World!\";\n     *\n     * // Create a new append blob and append data to the blob.\n     * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await newAppendBlobClient.create();\n     * await newAppendBlobClient.appendBlock(content, content.length);\n     *\n     * // Append data to an existing append blob.\n     * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await existingAppendBlobClient.appendBlock(content, content.length);\n     * ```\n     */\n    async appendBlock(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"AppendBlobClient-appendBlock\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.appendBlobContext.appendBlock(contentLength, body, {\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob\n     * where the contents are read from a source url.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n     *\n     * @param sourceURL -\n     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n     *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n     *                 public, no authentication is required to perform the operation.\n     * @param sourceOffset - Offset in source to be appended\n     * @param count - Number of bytes to be appended as a block\n     * @param options -\n     */\n    async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"AppendBlobClient-appendBlockFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return assertResponse(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n                abortSignal: options.abortSignal,\n                sourceRange: rangeToString({ offset: sourceOffset, count }),\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                appendPositionAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n */\nexport class BlockBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.blockBlobContext = this.storageClientContext.blockBlob;\n        this._blobContext = this.storageClientContext.blob;\n    }\n    /**\n     * Creates a new BlockBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a URL to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new BlockBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Quick query for a JSON or CSV formatted blob.\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Query and convert a blob to a string\n     * const queryBlockBlobResponse = await blockBlobClient.query(\"select * from BlobStorage\");\n     * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();\n     * console.log(\"Query blob content:\", downloaded);\n     *\n     * async function streamToBuffer(readableStream) {\n     *   return new Promise((resolve, reject) => {\n     *     const chunks = [];\n     *     readableStream.on(\"data\", (data) => {\n     *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     *     });\n     *     readableStream.on(\"end\", () => {\n     *       resolve(Buffer.concat(chunks));\n     *     });\n     *     readableStream.on(\"error\", reject);\n     *   });\n     * }\n     * ```\n     *\n     * @param query -\n     * @param options -\n     */\n    async query(query, options = {}) {\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        if (!isNode) {\n            throw new Error(\"This operation currently is only supported in Node.js.\");\n        }\n        return tracingClient.withSpan(\"BlockBlobClient-query\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this._blobContext.query({\n                abortSignal: options.abortSignal,\n                queryRequest: {\n                    queryType: \"SQL\",\n                    expression: query,\n                    inputSerialization: toQuerySerialization(options.inputTextConfiguration),\n                    outputSerialization: toQuerySerialization(options.outputTextConfiguration),\n                },\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return new BlobQueryResponse(response, {\n                abortSignal: options.abortSignal,\n                onProgress: options.onProgress,\n                onError: options.onError,\n            });\n        });\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link stageBlock} and {@link commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link uploadFile},\n     * {@link uploadStream} or {@link uploadBrowserData} for better performance\n     * with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to the Block Blob Upload operation.\n     * @returns Response data for the Block Blob Upload operation.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    async upload(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-upload\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.blockBlobContext.upload(contentLength, body, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a new Block Blob where the contents of the blob are read from a given URL.\n     * This API is supported beginning with the 2020-04-08 version. Partial updates\n     * are not supported with Put Blob from URL; the content of an existing blob is overwritten with\n     * the content of the new blob.  To perform partial updates to a block blob’s contents using a\n     * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.\n     *\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Optional parameters.\n     */\n    async syncUploadFromURL(sourceURL, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-syncUploadFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f;\n            return assertResponse(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }), sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                    sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions,\n                }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization), tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags), copySourceTags: options.copySourceTags, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Uploads the specified block to the block blob's \"staging area\" to be later\n     * committed by a call to commitBlockList.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param body - Data to upload to the staging area.\n     * @param contentLength - Number of bytes to upload.\n     * @param options - Options to the Block Blob Stage Block operation.\n     * @returns Response data for the Block Blob Stage Block operation.\n     */\n    async stageBlock(blockId, body, contentLength, options = {}) {\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-stageBlock\", options, async (updatedOptions) => {\n            return assertResponse(await this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Stage Block From URL operation creates a new block to be committed as part\n     * of a blob where the contents are read from a URL.\n     * This API is available starting in version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Options to the Block Blob Stage Block From URL operation.\n     * @returns Response data for the Block Blob Stage Block From URL operation.\n     */\n    async stageBlockFromURL(blockId, sourceURL, offset = 0, count, options = {}) {\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-stageBlockFromURL\", options, async (updatedOptions) => {\n            return assertResponse(await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                sourceRange: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Writes a blob by specifying the list of block IDs that make up the blob.\n     * In order to be written as part of a blob, a block must have been successfully written\n     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n     * update a blob by uploading only those blocks that have changed, then committing the new and existing\n     * blocks together. Any blocks not specified in the block list and permanently deleted.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n     *\n     * @param blocks -  Array of 64-byte value that is base64-encoded\n     * @param options - Options to the Block Blob Commit Block List operation.\n     * @returns Response data for the Block Blob Commit Block List operation.\n     */\n    async commitBlockList(blocks, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-commitBlockList\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.blockBlobContext.commitBlockList({ latest: blocks }, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of blocks that have been uploaded as part of a block blob\n     * using the specified block list filter.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n     *\n     * @param listType - Specifies whether to return the list of committed blocks,\n     *                                        the list of uncommitted blocks, or both lists together.\n     * @param options - Options to the Block Blob Get Block List operation.\n     * @returns Response data for the Block Blob Get Block List operation.\n     */\n    async getBlockList(listType, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-getBlockList\", options, async (updatedOptions) => {\n            var _a;\n            const res = assertResponse(await this.blockBlobContext.getBlockList(listType, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            if (!res.committedBlocks) {\n                res.committedBlocks = [];\n            }\n            if (!res.uncommittedBlocks) {\n                res.uncommittedBlocks = [];\n            }\n            return res;\n        });\n    }\n    // High level functions\n    /**\n     * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.\n     *\n     * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView\n     * @param options -\n     */\n    async uploadData(data, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-uploadData\", options, async (updatedOptions) => {\n            if (isNode) {\n                let buffer;\n                if (data instanceof Buffer) {\n                    buffer = data;\n                }\n                else if (data instanceof ArrayBuffer) {\n                    buffer = Buffer.from(data);\n                }\n                else {\n                    data = data;\n                    buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n                }\n                return this.uploadSeekableInternal((offset, size) => buffer.slice(offset, offset + size), buffer.byteLength, updatedOptions);\n            }\n            else {\n                const browserBlob = new Blob([data]);\n                return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n            }\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN BROWSERS.\n     *\n     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n     *\n     * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n     * {@link commitBlockList} to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @deprecated Use {@link uploadData} instead.\n     *\n     * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView\n     * @param options - Options to upload browser data.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadBrowserData(browserData, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-uploadBrowserData\", options, async (updatedOptions) => {\n            const browserBlob = new Blob([browserData]);\n            return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n        });\n    }\n    /**\n     *\n     * Uploads data to block blob. Requires a bodyFactory as the data source,\n     * which need to return a {@link HttpRequestBody} object with the offset and size provided.\n     *\n     * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * @param bodyFactory -\n     * @param size - size of the data to upload.\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadSeekableInternal(bodyFactory, size, options = {}) {\n        var _a, _b;\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0 || blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n            throw new RangeError(`blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);\n        }\n        const maxSingleShotSize = (_b = options.maxSingleShotSize) !== null && _b !== void 0 ? _b : BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n        if (maxSingleShotSize < 0 || maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n            throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);\n        }\n        if (blockSize === 0) {\n            if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`${size} is too larger to upload to a block blob.`);\n            }\n            if (size > maxSingleShotSize) {\n                blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n                if (blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                    blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n            }\n        }\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"BlockBlobClient-uploadSeekableInternal\", options, async (updatedOptions) => {\n            if (size <= maxSingleShotSize) {\n                return assertResponse(await this.upload(bodyFactory(0, size), size, updatedOptions));\n            }\n            const numBlocks = Math.floor((size - 1) / blockSize) + 1;\n            if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`The buffer's size is too big or the BlockSize is too small;` +\n                    `the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`);\n            }\n            const blockList = [];\n            const blockIDPrefix = randomUUID();\n            let transferProgress = 0;\n            const batch = new Batch(options.concurrency);\n            for (let i = 0; i < numBlocks; i++) {\n                batch.addOperation(async () => {\n                    const blockID = generateBlockID(blockIDPrefix, i);\n                    const start = blockSize * i;\n                    const end = i === numBlocks - 1 ? size : start + blockSize;\n                    const contentLength = end - start;\n                    blockList.push(blockID);\n                    await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        encryptionScope: options.encryptionScope,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    // Update progress after block is successfully uploaded to server, in case of block trying\n                    // TODO: Hook with convenience layer progress event in finer level\n                    transferProgress += contentLength;\n                    if (options.onProgress) {\n                        options.onProgress({\n                            loadedBytes: transferProgress,\n                        });\n                    }\n                });\n            }\n            await batch.do();\n            return this.commitBlockList(blockList, updatedOptions);\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a local file in blocks to a block blob.\n     *\n     * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n     * to commit the block list.\n     *\n     * @param filePath - Full path of local file\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadFile(filePath, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-uploadFile\", options, async (updatedOptions) => {\n            const size = (await fsStat(filePath)).size;\n            return this.uploadSeekableInternal((offset, count) => {\n                return () => fsCreateReadStream(filePath, {\n                    autoClose: true,\n                    end: count ? offset + count - 1 : Infinity,\n                    start: offset,\n                });\n            }, size, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a Node.js Readable stream into block blob.\n     *\n     * PERFORMANCE IMPROVEMENT TIPS:\n     * * Input stream highWaterMark is better to set a same value with bufferSize\n     *    parameter, which will avoid Buffer.concat() operations.\n     *\n     * @param stream - Node.js Readable stream\n     * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n     * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,\n     *                                 positive correlation with max uploading concurrency. Default value is 5\n     * @param options - Options to Upload Stream to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadStream(stream, bufferSize = DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"BlockBlobClient-uploadStream\", options, async (updatedOptions) => {\n            let blockNum = 0;\n            const blockIDPrefix = randomUUID();\n            let transferProgress = 0;\n            const blockList = [];\n            const scheduler = new BufferScheduler(stream, bufferSize, maxConcurrency, async (body, length) => {\n                const blockID = generateBlockID(blockIDPrefix, blockNum);\n                blockList.push(blockID);\n                blockNum++;\n                await this.stageBlock(blockID, body, length, {\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    encryptionScope: options.encryptionScope,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                // Update progress after block is successfully uploaded to server, in case of block trying\n                transferProgress += length;\n                if (options.onProgress) {\n                    options.onProgress({ loadedBytes: transferProgress });\n                }\n            }, \n            // concurrency should set a smaller value than maxConcurrency, which is helpful to\n            // reduce the possibility when a outgoing handler waits for stream data, in\n            // this situation, outgoing handlers are blocked.\n            // Outgoing queue shouldn't be empty.\n            Math.ceil((maxConcurrency / 4) * 3));\n            await scheduler.do();\n            return assertResponse(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n}\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n */\nexport class PageBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.pageBlobContext = this.storageClientContext.pageBlob;\n    }\n    /**\n     * Creates a new PageBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new PageBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options - Options to the Page Blob Create operation.\n     * @returns Response data for the Page Blob Create operation.\n     */\n    async create(size, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"PageBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.pageBlobContext.create(0, size, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                blobSequenceNumber: options.blobSequenceNumber,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob. If the blob with the same name already exists, the content\n     * of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options -\n     */\n    async createIfNotExists(size, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const conditions = { ifNoneMatch: ETagAny };\n                const res = assertResponse(await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param body - Data to upload\n     * @param offset - Offset of destination page blob\n     * @param count - Content length of the body, also number of bytes to be uploaded\n     * @param options - Options to the Page Blob Upload Pages operation.\n     * @returns Response data for the Page Blob Upload Pages operation.\n     */\n    async uploadPages(body, offset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"PageBlobClient-uploadPages\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.uploadPages(count, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                range: rangeToString({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the\n     * contents are read from a URL.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n     *\n     * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n     * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n     * @param destOffset - Offset of destination page blob\n     * @param count - Number of bytes to be uploaded from source page blob\n     * @param options -\n     */\n    async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"PageBlobClient-uploadPagesFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return assertResponse(await this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({ offset: sourceOffset, count }), 0, rangeToString({ offset: destOffset, count }), {\n                abortSignal: options.abortSignal,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                sequenceNumberAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Frees the specified pages from the page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param offset - Starting byte position of the pages to clear.\n     * @param count - Number of bytes to clear.\n     * @param options - Options to the Page Blob Clear Pages operation.\n     * @returns Response data for the Page Blob Clear Pages operation.\n     */\n    async clearPages(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-clearPages\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.clearPages(0, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: rangeToString({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns Response data for the Page Blob Get Ranges operation.\n     */\n    async getPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-getPageRanges\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: rangeToString({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return rangeResponseFromModel(response);\n        });\n    }\n    /**\n     * getPageRangesSegment returns a single segment of page ranges starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to PageBlob Get Page Ranges Segment operation.\n     */\n    async listPageRangesSegment(offset = 0, count, marker, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-getPageRangesSegment\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: rangeToString({ offset, count }),\n                marker: marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItemSegments() {\n        return __asyncGenerator(this, arguments, function* listPageRangeItemSegments_1(offset = 0, count, marker, options = {}) {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesSegment(offset, count, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield __await(yield __await(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItems() {\n        return __asyncGenerator(this, arguments, function* listPageRangeItems_1(offset = 0, count, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listPageRangeItemSegments(offset, count, marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges for a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRanges()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRanges();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeItems(offset, count, options);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-getPageRangesDiff\", options, async (updatedOptions) => {\n            var _a;\n            const result = assertResponse(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshot,\n                range: rangeToString({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return rangeResponseFromModel(result);\n        });\n    }\n    /**\n     * getPageRangesDiffSegment returns a single segment of page ranges starting from the\n     * specified Marker for difference between previous snapshot and the target page blob.\n     * Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesDiffSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-getPageRangesDiffSegment\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n                leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshotOrUrl,\n                range: rangeToString({\n                    offset: offset,\n                    count: count,\n                }),\n                marker: marker,\n                maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}\n     *\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {\n        return __asyncGenerator(this, arguments, function* listPageRangeDiffItemSegments_1() {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield __await(yield __await(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {\n        return __asyncGenerator(this, arguments, function* listPageRangeDiffItems_1() {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRangesDiff();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-GetPageRangesDiffForManagedDisks\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevSnapshotUrl,\n                range: rangeToString({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return rangeResponseFromModel(response);\n        });\n    }\n    /**\n     * Resizes the page blob to the specified size (which must be a multiple of 512).\n     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n     *\n     * @param size - Target size\n     * @param options - Options to the Page Blob Resize operation.\n     * @returns Response data for the Page Blob Resize operation.\n     */\n    async resize(size, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-resize\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.resize(size, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets a page blob's sequence number.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.\n     * @param sequenceNumber - Required if sequenceNumberAction is max or update\n     * @param options - Options to the Page Blob Update Sequence Number operation.\n     * @returns Response data for the Page Blob Update Sequence Number operation.\n     */\n    async updateSequenceNumber(sequenceNumberAction, sequenceNumber, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-updateSequenceNumber\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n                abortSignal: options.abortSignal,\n                blobSequenceNumber: sequenceNumber,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n     * The snapshot is copied such that only the differential changes between the previously\n     * copied snapshot are transferred to the destination.\n     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n     *\n     * @param copySource - Specifies the name of the source page blob snapshot. For example,\n     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Options to the Page Blob Copy Incremental operation.\n     * @returns Response data for the Page Blob Copy Incremental operation.\n     */\n    async startCopyIncremental(copySource, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-startCopyIncremental\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.copyIncremental(copySource, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n//# sourceMappingURL=Clients.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// This file is used as a shim of \"BlobDownloadResponse\" for some browser bundlers\n// when trying to bundle \"BlobDownloadResponse\"\n// \"BlobDownloadResponse\" class is only available in Node.js runtime\nexport const BlobDownloadResponse = 1;\n//# sourceMappingURL=BlobDownloadResponse.browser.js.map"],"names":["ValidPhaseNames","Set","HttpPipeline","constructor","policies","_a","this","_policies","slice","_orderedPolicies","undefined","addPolicy","policy","options","phase","afterPhase","Error","has","push","removePolicy","removedPolicies","filter","policyDescriptor","name","sendRequest","httpClient","request","getOrderedPolicies","reduceRight","next","req","pipeline","orderPolicies","clone","create","result","policyMap","Map","createPhase","hasRun","hasAfterPolicies","serializePhase","noPhase","deserializePhase","retryPhase","signPhase","orderedPhases","getPhase","descriptor","policyName","node","dependsOn","dependants","set","add","get","afterPolicies","afterPolicyName","afterNode","beforePolicies","beforePolicyName","beforeNode","walkPhase","size","dependant","delete","walkPhases","iteration","initialResultLength","length","debugEnvVariable","process","env","DEBUG","enabledString","enabledNamespaces","skippedNamespaces","debuggers","enable","debugObj","Object","assign","namespace","createDebugger","enabled","disable","log","args","firstArg","String","includes","console","error","warn","info","debug","namespaces","wildcard","namespaceList","split","map","ns","trim","replace","startsWith","RegExp","substr","instance","endsWith","skipped","test","enabledNamespace","newDebugger","destroy","extend","index","indexOf","splice","registeredLoggers","logLevelFromEnv","AZURE_LOG_LEVEL","azureLogLevel","AzureLogger","AZURE_LOG_LEVELS","isAzureLogLevel","level","join","logger","shouldEnable","setLogLevel","levelMap","verbose","warning","createClientLogger","clientRootLogger","patchLogMethod","createLogger","parent","child","Boolean","logLevel","AbortError","message","super","delay","timeInMs","token","abortSignal","abortErrorMsg","buildPromise","cleanupBeforeAbort","Promise","resolve","reject","rejectOnAbort","removeListeners","removeEventListener","onAbort","aborted","x","err","addEventListener","createAbortablePromise","setTimeout","clearTimeout","calculateRetryDelay","retryAttempt","config","exponentialDelay","retryDelayInMs","Math","pow","clampedDelay","min","maxRetryDelayInMs","max","retryAfterInMs","ceil","floor","random","isObject","input","Array","isArray","Date","isError","e","hasName","hasMessage","getErrorMessage","stringified","JSON","stringify","stringToUint8Array","value","format","TextEncoder","encode","utf8StringToUint8Array","base64ToUint8Array","base64String","base64UrlToUint8Array","bytes","Uint8Array","i","highNibble","lowNibble","hexDigits","parseInt","hexStringToUint8Array","atob","charCodeAt","uuidFunction","globalThis","crypto","randomUUID","bind","uuid","randomNumber","toString","_b","_c","_d","self","importScripts","Deno","version","deno","Bun","isNodeLike","versions","isNode","RedactedString","defaultAllowedHeaderNames","defaultAllowedQueryParameters","Sanitizer","additionalAllowedHeaderNames","allowedHeaderNames","additionalAllowedQueryParameters","allowedQueryParameters","concat","n","toLowerCase","p","sanitize","obj","seen","key","sanitizeHeaders","sanitizeUrl","sanitizeQuery","url","URL","search","searchParams","sanitized","keys","k","redirectPolicyName","allowedRedirect","redirectPolicy","maxRetries","response","handleRedirect","async","currentRetries","status","headers","locationHeader","method","body","res","SDK_VERSION","getUserAgentValue","prefix","runtimeInfo","localNavigator","navigator","osPlatform","userAgentData","entropyValues","getHighEntropyValues","architecture","platform","platformVersion","brand","brands","brandOrder","foundBrand","find","b","getBrandVersionString","userAgent","browserRegexes","regex","browser","match","getBrowserInfo","EdgeRuntime","setPlatformSpecificData","defaultAgent","telemetryInfo","parts","getUserAgentString","UserAgentHeaderName","isNodeReadableStream","isWebReadableStream","getReader","tee","rawContent","Symbol","getRawContent","blob","stream","toBlobPart","source","Blob","Response","encodeHeaders","getLength","byteLength","buildRequestBody","boundary","sources","flatMap","part","contentLength","total","partLength","getTotalLength","multipartPolicyName","validBoundaryCharacters","multipartPolicy","multipartBody","contentTypeHeader","parsedHeader","contentType","parsedBoundary","from","some","assertValidBoundary","delayInMs","timer","onAborted","parseHeaderValueAsNumber","headerName","valueAsNum","Number","isNaN","RetryAfterHeader","AllRetryAfterHeaders","getRetryAfterInMs","header","retryAfterValue","retryAfterHeader","diff","parse","now","isFinite","exponentialRetryStrategy","retryInterval","maxRetryInterval","retry","retryCount","responseError","matchedSystemError","code","isSystemError","ignoreSystemErrors","isExponential","isExponentialRetryResponse","ignoreExponentialResponse","ignoreHttpStatusCodes","unknownResponse","isThrottlingRetryResponse","skipStrategy","errorToThrow","retryPolicyLogger","retryPolicy","strategies","retryRequest","requestId","strategiesLoop","strategy","strategyLogger","modifiers","redirectTo","normalizeName","HttpHeadersImpl","rawHeaders","_headersMap","toJSON","preserveCase","entry","values","normalizedName","iterator","headerIterator","createHttpHeaders","formDataPolicy","FormData","formData","formDataMap","entries","formDataToFormDataMap","urlSearchParams","URLSearchParams","subValue","append","wwwFormUrlEncode","fieldName","fileName","type","prepareFormData","errorMessage","getDefaultProxySettings","knownContextKeys","span","for","createTracingContext","context","TracingContextImpl","parentContext","setValue","initialContext","_contextMap","newContext","getValue","deleteValue","state","instrumenterImplementation","getInstrumenter","createRequestHeaders","parseTraceparentHeader","startSpan","_name","spanOptions","end","isRecording","recordException","setAttribute","setStatus","addEvent","tracingContext","withContext","_context","callback","callbackArgs","createTracingClient","packageName","packageVersion","operationOptions","startSpanResult","tracingOptions","updatedOptions","withSpan","traceparentHeader","custom","errorSanitizer","RestError","statusCode","defineProperty","enumerable","setPrototypeOf","prototype","isRestError","REQUEST_SEND_ERROR","PARSE_ERROR","tracingPolicy","userAgentPromise","userAgentPrefix","sanitizer","tracingClient","tryCreateTracingClient","spanAttributes","spanKind","tryCreateSpan","serviceRequestId","tryProcessResponse","tryProcessError","createPipelineFromOptions","tlsSettings","tlsOptions","proxyPolicy","proxyOptions","decompressResponsePolicy","userAgentValue","userAgentPolicy","userAgentOptions","requestIdHeaderName","setClientRequestIdPolicy","telemetryOptions","clientRequestIdHeaderName","defaultRetryPolicy","retryOptions","loggingOptions","redirectOptions","coreLogger","logPolicy","FetchHttpClient","protocol","allowInsecureConnection","proxySettings","abortController","abortControllerCleanup","AbortController","abortListener","event","abort","timeout","setupAbortSignal","pipelineHeaders","Headers","buildFetchHeaders","streaming","requestBody","buildBodyStream","onProgress","onUploadProgress","requestInit","signal","Request","credentials","withCredentials","cache","duplex","fetch","isBlob","loadedBytes","httpResponse","responseHeaders","buildPipelineHeaders","bodyStream","onDownloadProgress","onEnd","streamResponseStatusCodes","POSITIVE_INFINITY","enableBrowserStreams","browserStreamBody","responseStream","blobBody","bodyAsText","text","buildPipelineResponse","makeRequest","getError","readableStream","pipeThrough","TransformStream","isTransformStreamSupported","transform","chunk","controller","enqueue","terminate","flush","reader","ReadableStream","pull","done","read","close","releaseLock","cancel","reason","createDefaultHttpClient","PipelineRequestImpl","_e","_f","_g","disableKeepAlive","createPipelineRequest","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","createTokenCycler","credential","tokenCyclerOptions","tenantId","refreshWorker","cycler","isRefreshing","shouldRefresh","refreshAfterTimestamp","expiresOnTimestamp","mustRefresh","refresh","scopes","getTokenOptions","getAccessToken","refreshTimeout","tryGetAccessToken","finalToken","beginRefresh","getToken","then","_token","catch","tokenOptions","hasClaimChallenge","claims","tenantIdChanged","trySendRequest","defaultAuthorizeRequest","enableCae","accessToken","isChallengeResponse","authorizeRequestOnCaeChallenge","onChallengeOptions","caeClaims","tokenType","bearerTokenAuthenticationPolicy","challengeCallbacks","callbacks","authorizeRequest","authorizeRequestOnChallenge","shouldSendRequest","getCaeChallengeClaims","parsedClaim","challenges","parsedChallenges","challengeRegex","paramRegex","exec","scheme","paramsString","params","paramMatch","parseChallenges","isTokenCredential","castCredential","signRequest","disableKeepAlivePolicyName","encodeByteArray","str","fromCharCode","btoa","decodeString","byteString","arr","XML_ATTRKEY","XML_CHARKEY","validateISODuration","validUuidRegex","flattenResponse","fullResponse","responseSpec","parsedHeaders","parsedBody","bodyMapper","isNullable","nullable","expectedBodyTypeName","readableStreamBody","modelProperties","isPageableResponse","serializedName","arrayResponse","getOwnPropertyNames","responseObject","combinedHeadersAndBody","hasNullableType","shouldWrapBody","handleNullableResponseAndWrappableBody","mapperTypeName","SerializerImpl","modelMappers","isXML","validateConstraints","mapper","objectName","failValidation","constraintName","constraintValue","constraints","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","pattern","item","ar","serialize","object","xml","rootName","includeRoot","xmlCharKey","payload","mapperType","isConstant","defaultValue","required","typeName","valueOf","objectType","pipe","ArrayBuffer","isView","serializeBasicTypes","allowedValues","serializeEnumType","toISOString","substring","toUTCString","d","getTime","dateToUnixTime","isDuration","serializeDateTypes","base64.encodeByteArray","serializeByteArrayType","buffer","ch","len","trimEnd","bufferToBase64Url","serializeBase64UrlType","serializer","isXml","elementType","element","className","tempArray","serializedValue","xmlNamespace","xmlnsKey","xmlNamespacePrefix","serializeSequenceType","valueType","tempDictionary","getXmlObjectValue","serializeDictionaryType","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","modelProps","resolveModelProperties","propertyMapper","readOnly","propName","parentObject","xmlIsWrapped","xmlName","xmlElementName","paths","splitSerializeName","pop","pathName","childObject","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","xmlIsAttribute","additionalPropertiesMapper","additionalProperties","modelMapper","resolveReferencedMapper","resolveAdditionalProperties","propNames","clientPropName","every","pn","serializeCompositeType","deserialize","responseBody","ignoreUnknownProperties","handledPropertyNames","headerCollectionPrefix","dictionary","headerKey","xmlIsMsText","propertyName","wrapped","elementList","property","propertyInstance","steps","arrayInstance","v","hasOwnProperty","call","isAdditionalProperty","responsePropName","isSpecialXmlProperty","deserializeCompositeType","parseFloat","unixTimeToDate","base64.decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","createSerializer","prop","classes","partialclass","subwords","charAt","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","polymorphicMapper","discriminators","typeNamesToCheck","currentName","shift","indexDiscriminator","getIndexDiscriminator","getPolymorphicDiscriminatorSafely","MapperTypeNames","operationRequestMap","WeakMap","getOperationArgumentValueFromParameter","operationArguments","parameter","fallbackObject","parameterPath","parameterMapper","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathPart","originalRequestSymbol","getOperationRequestInfo","hasOriginalRequest","defaultJsonContentTypes","defaultXmlContentTypes","deserializationPolicy","jsonContentTypes","expectedContentTypes","json","xmlContentTypes","parseXML","serializerOptions","parsedResponse","operationResponse","opts","contentComponents","component","msg","errCode","operationInfo","shouldDeserialize","shouldDeserializeResponse","operationSpec","responses","operationResponseGetter","getOperationResponseMap","shouldReturnResponse","isSuccessByStatus","isExpectedStatusCode","expectedStatusCodes","isOperationSpecEmpty","errorResponseSpec","default","initialErrorMessage","defaultBodyMapper","defaultHeadersMapper","headersMapper","deserializedError","valueToDeserialize","elementName","internalError","defaultError","handleErrorResponse","deserializeError","httpMethod","deserializeResponseBody","getPathStringFromParameter","serializationPolicy","stringifyXML","headerParameters","headerParameter","headerValue","customHeaders","requestOptions","customHeaderName","serializeHeaders","requestBodyParameterPathString","isStream","getXmlValueWithNamespace","xmlNamespaceKey","prepareXMLRootList","mediaType","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializeRequestBody","createClientPipeline","credentialOptions","credentialScopes","serializationOptions","deserializationOptions","cachedHttpClient","CollectionFormatToDelimiterMap","CSV","SSV","Multi","TSV","Pipes","getRequestUrl","baseUri","urlReplacements","urlParameters","urlParameter","urlParameterValue","parameterPathString","skipEncoding","encodeURIComponent","calculateUrlReplacements","isAbsolutePath","requestUrl","replaceAll","path","isAbsoluteUrl","pathToAppend","parsedUrl","newPath","pathname","searchStart","appendPath","queryParams","sequenceParams","queryParameters","queryParameter","queryParameterValue","delimiter","collectionFormat","calculateQueryParameters","noOverwrite","combinedParams","queryString","pairs","pair","existingValue","simpleParseQueryParams","valueSet","unshift","searchPieces","appendQueryParams","replacements","searchValue","replaceValue","ServiceClient","_requestContentType","requestContentType","_endpoint","endpoint","_allowInsecureConnection","_httpClient","getCredentialScopes","createDefaultPipeline","additionalPolicies","position","sendOperationRequest","baseUrl","getStreamingResponseStatusCodes","rawResponse","flatResponse","onResponse","details","Constants","AUTHORIZATION","authorizeRequestOnTenantChallenge","challengeOptions","challenge","getChallenge","challengeInfo","bearerChallenge","challengeParts","keyValue","reduce","a","parseChallenge","challengeScopes","resource_id","scope","buildScopes","parsedAuthUri","authorization_uri","extractTenantId","originalClientRequestSymbol","toPipelineRequest","webResource","toJson","newRequest","keepAlive","originalRequest","toWebResourceLike","toHttpHeadersLike","prepare","validateRequestProperties","createProxy","Proxy","target","receiver","Reflect","HttpHeaders","getHeaderKey","contains","remove","headersArray","headerNames","headerValues","resultPreservingCasing","originalResponse","toCompatResponse","toPipelineResponse","compatResponse","ExtendedServiceClient","keepAliveOptions","handleRedirects","userProvidedCallBack","lastResponse","HttpPipelineLogLevel","mockRequestPolicyOptions","_logLevel","_message","shouldLog","createRequestPolicyFactoryPolicy","factories","orderedFactories","reverse","httpPipeline","httpRequest","factory","webResourceLike","document","DOMParser","Node","XMLSerializer","ttPolicy","trustedTypes","createPolicy","createHTML","s","doc","implementation","createDocument","parser","cdataPropName","stopNodes","dom","parseFromString","parserErrors","getElementsByTagName","errorNS","invalidXML","namespaceURI","ignored","getErrorNamespace","innerHTML","throwIfError","domToObject","childNodes","childNodeCount","firstChildNode","onlyChildTextValue","nodeType","TEXT_NODE","nodeValue","elementWithAttributes","attributes","isElement","hasAttributes","asElementWithAttributes","attr","nodeName","CDATA_SECTION_NODE","textContent","firstChild","content","buildNode","serializeToString","buildAttributes","attrs","createAttribute","elem","createElement","arrayElem","createElementNS","setNamedItem","cdataElement","createCDATASection","appendChild","BaseRequestPolicy","_nextPolicy","_options","SERVICE_VERSION","BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES","BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES","BLOCK_BLOB_MAX_BLOCKS","DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES","URLConstants","FORCE_BROWSER_NO_CACHE","SIGNATURE","SNAPSHOT","VERSIONID","TIMEOUT","HeaderConstants","ETagNone","StorageBlobLoggingAllowedHeaderNames","StorageBlobLoggingAllowedQueryParameters","PathStylePorts","escapeURLPath","urlParsed","getValueInConnString","connectionString","argument","elements","extractConnectionStringParts","proxyUri","matchCredentials","getProxyUriFromDevConnString","blobEndpoint","defaultEndpointsProtocol","accountName","accountKey","Buffer","endpointSuffix","kind","accountSas","getAccountNameFromUrl","appendToURLPath","setURLParameter","encodedName","encodedValue","searchString","getURLParameter","setURLHost","host","hostname","appendToURLQuery","queryParts","query","truncatedISO8061Date","date","withMilliseconds","dateString","generateBlockID","blockIDPrefix","blockIndex","maxSourceStringLength","currentString","targetLength","padString","padStart","repeat","aborter","abortError","abortHandler","isIpEndpointStyle","port","toBlobTagsString","tags","tagPairs","toBlobTags","blobTagSet","toTags","blobTag","toQuerySerialization","textConfiguration","delimitedTextConfiguration","columnSeparator","fieldQuote","recordSeparator","escapeChar","escapeCharacter","headersPresent","hasHeaders","jsonTextConfiguration","arrowConfiguration","schema","parseObjectReplicationRecord","objectReplicationRecord","orProperties","ids","policyPrefix","rule","ruleId","replicationStatus","policyIndex","findIndex","policyId","rules","httpAuthorizationToString","httpAuthorization","ExtractPageRangeInfoItems","getPageRangesSegment","pageRange","clearRange","pageRangeIndex","clearRangeIndex","start","isClear","assertResponse","TypeError","StorageRetryPolicyType","DEFAULT_RETRY_OPTIONS","maxTries","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","RETRY_ABORT_ERROR","StorageRetryPolicy","nextPolicy","attemptSendRequest","secondaryHas404","attempt","isPrimaryRetry","shouldRetry","retriableErrors","retriableError","toUpperCase","delayTimeInMs","FIXED","StorageRetryPolicyFactory","StorageSharedKeyCredential","CredentialPolicy","AnonymousCredentialPolicy","Credential","AnonymousCredential","_defaultHttpClient","StorageBrowserPolicy","StorageBrowserPolicyFactory","isPipelineLike","castPipeline","toServiceClientOptions","Pipeline","requestPolicyFactories","newPipeline","pipelineOptions","_credential","getCoreClientOptions","v1Client","restOptions","__rest","_coreHttpClient","requestPolicyClient","corePipeline","_corePipeline","packageDetails","calculateDelay","primaryUrl","secondaryUrl","retryAgain","storageRetryPolicy","downlevelResults","knownFactoryFunctions","isAnonymousCredential","isStorageSharedKeyCredential","isCoreHttpBearerTokenFactory","isStorageBrowserPolicyFactory","isStorageRetryPolicyFactory","isStorageTelemetryPolicyFactory","isCoreHttpPolicyFactory","novelFactories","knownFactory","hasInjector","isInjectorPolicyFactory","wrappedPolicies","afterRetry","processDownlevelPipeline","getCredentialFromPipeline","audience","knownPolicyName","BlobServiceProperties","blobAnalyticsLogging","hourMetrics","minuteMetrics","cors","defaultServiceVersion","deleteRetentionPolicy","staticWebsite","StorageError","authenticationErrorDetail","BlobServiceStatistics","geoReplication","ListContainersSegmentResponse","serviceEndpoint","marker","maxPageSize","containerItems","continuationToken","KeyInfo","startsOn","expiresOn","UserDelegationKey","signedObjectId","signedTenantId","signedStartsOn","signedExpiresOn","signedService","signedVersion","FilterBlobSegment","where","blobs","BlobTags","ListBlobsFlatSegmentResponse","containerName","segment","ListBlobsHierarchySegmentResponse","BlockLookupList","committed","uncommitted","latest","BlockList","committedBlocks","uncommittedBlocks","PageList","QueryRequest","queryType","expression","inputSerialization","outputSerialization","ServiceSetPropertiesHeaders","clientRequestId","errorCode","ServiceSetPropertiesExceptionHeaders","ServiceGetPropertiesHeaders","ServiceGetPropertiesExceptionHeaders","ServiceGetStatisticsHeaders","ServiceGetStatisticsExceptionHeaders","ServiceListContainersSegmentHeaders","ServiceListContainersSegmentExceptionHeaders","ServiceGetUserDelegationKeyHeaders","ServiceGetUserDelegationKeyExceptionHeaders","ServiceGetAccountInfoHeaders","skuName","accountKind","isHierarchicalNamespaceEnabled","ServiceGetAccountInfoExceptionHeaders","ServiceSubmitBatchHeaders","ServiceSubmitBatchExceptionHeaders","ServiceFilterBlobsHeaders","ServiceFilterBlobsExceptionHeaders","ContainerCreateHeaders","etag","lastModified","ContainerCreateExceptionHeaders","ContainerGetPropertiesHeaders","metadata","leaseDuration","leaseState","leaseStatus","blobPublicAccess","hasImmutabilityPolicy","hasLegalHold","defaultEncryptionScope","denyEncryptionScopeOverride","isImmutableStorageWithVersioningEnabled","ContainerGetPropertiesExceptionHeaders","ContainerDeleteHeaders","ContainerDeleteExceptionHeaders","ContainerSetMetadataHeaders","ContainerSetMetadataExceptionHeaders","ContainerGetAccessPolicyHeaders","ContainerGetAccessPolicyExceptionHeaders","ContainerSetAccessPolicyHeaders","ContainerSetAccessPolicyExceptionHeaders","ContainerRestoreHeaders","ContainerRestoreExceptionHeaders","ContainerRenameHeaders","ContainerRenameExceptionHeaders","ContainerSubmitBatchHeaders","ContainerSubmitBatchExceptionHeaders","ContainerFilterBlobsHeaders","ContainerFilterBlobsExceptionHeaders","ContainerAcquireLeaseHeaders","leaseId","ContainerAcquireLeaseExceptionHeaders","ContainerReleaseLeaseHeaders","ContainerReleaseLeaseExceptionHeaders","ContainerRenewLeaseHeaders","ContainerRenewLeaseExceptionHeaders","ContainerBreakLeaseHeaders","leaseTime","ContainerBreakLeaseExceptionHeaders","ContainerChangeLeaseHeaders","ContainerChangeLeaseExceptionHeaders","ContainerListBlobFlatSegmentHeaders","ContainerListBlobFlatSegmentExceptionHeaders","ContainerListBlobHierarchySegmentHeaders","ContainerListBlobHierarchySegmentExceptionHeaders","ContainerGetAccountInfoHeaders","ContainerGetAccountInfoExceptionHeaders","BlobDownloadHeaders","createdOn","objectReplicationPolicyId","objectReplicationRules","contentRange","contentMD5","contentEncoding","cacheControl","contentDisposition","contentLanguage","blobSequenceNumber","blobType","copyCompletedOn","copyStatusDescription","copyId","copyProgress","copySource","copyStatus","versionId","isCurrentVersion","acceptRanges","blobCommittedBlockCount","isServerEncrypted","encryptionKeySha256","encryptionScope","blobContentMD5","tagCount","isSealed","lastAccessed","immutabilityPolicyExpiresOn","immutabilityPolicyMode","legalHold","contentCrc64","BlobDownloadExceptionHeaders","BlobGetPropertiesHeaders","isIncrementalCopy","destinationSnapshot","accessTier","accessTierInferred","archiveStatus","accessTierChangedOn","rehydratePriority","BlobGetPropertiesExceptionHeaders","BlobDeleteHeaders","BlobDeleteExceptionHeaders","BlobUndeleteHeaders","BlobUndeleteExceptionHeaders","BlobSetExpiryHeaders","BlobSetExpiryExceptionHeaders","BlobSetHttpHeadersHeaders","BlobSetHttpHeadersExceptionHeaders","BlobSetImmutabilityPolicyHeaders","immutabilityPolicyExpiry","BlobSetImmutabilityPolicyExceptionHeaders","BlobDeleteImmutabilityPolicyHeaders","BlobDeleteImmutabilityPolicyExceptionHeaders","BlobSetLegalHoldHeaders","BlobSetLegalHoldExceptionHeaders","BlobSetMetadataHeaders","BlobSetMetadataExceptionHeaders","BlobAcquireLeaseHeaders","BlobAcquireLeaseExceptionHeaders","BlobReleaseLeaseHeaders","BlobReleaseLeaseExceptionHeaders","BlobRenewLeaseHeaders","BlobRenewLeaseExceptionHeaders","BlobChangeLeaseHeaders","BlobChangeLeaseExceptionHeaders","BlobBreakLeaseHeaders","BlobBreakLeaseExceptionHeaders","BlobCreateSnapshotHeaders","snapshot","BlobCreateSnapshotExceptionHeaders","BlobStartCopyFromURLHeaders","BlobStartCopyFromURLExceptionHeaders","BlobCopyFromURLHeaders","xMsContentCrc64","BlobCopyFromURLExceptionHeaders","BlobAbortCopyFromURLHeaders","BlobAbortCopyFromURLExceptionHeaders","BlobSetTierHeaders","BlobSetTierExceptionHeaders","BlobGetAccountInfoHeaders","BlobGetAccountInfoExceptionHeaders","BlobQueryHeaders","copyCompletionTime","BlobQueryExceptionHeaders","BlobGetTagsHeaders","BlobGetTagsExceptionHeaders","BlobSetTagsHeaders","BlobSetTagsExceptionHeaders","PageBlobCreateHeaders","PageBlobCreateExceptionHeaders","PageBlobUploadPagesHeaders","PageBlobUploadPagesExceptionHeaders","PageBlobClearPagesHeaders","PageBlobClearPagesExceptionHeaders","PageBlobUploadPagesFromURLHeaders","PageBlobUploadPagesFromURLExceptionHeaders","PageBlobGetPageRangesHeaders","blobContentLength","PageBlobGetPageRangesExceptionHeaders","PageBlobGetPageRangesDiffHeaders","PageBlobGetPageRangesDiffExceptionHeaders","PageBlobResizeHeaders","PageBlobResizeExceptionHeaders","PageBlobUpdateSequenceNumberHeaders","PageBlobUpdateSequenceNumberExceptionHeaders","PageBlobCopyIncrementalHeaders","PageBlobCopyIncrementalExceptionHeaders","AppendBlobCreateHeaders","AppendBlobCreateExceptionHeaders","AppendBlobAppendBlockHeaders","blobAppendOffset","AppendBlobAppendBlockExceptionHeaders","AppendBlobAppendBlockFromUrlHeaders","AppendBlobAppendBlockFromUrlExceptionHeaders","AppendBlobSealHeaders","AppendBlobSealExceptionHeaders","BlockBlobUploadHeaders","BlockBlobUploadExceptionHeaders","BlockBlobPutBlobFromUrlHeaders","BlockBlobPutBlobFromUrlExceptionHeaders","BlockBlobStageBlockHeaders","BlockBlobStageBlockExceptionHeaders","BlockBlobStageBlockFromURLHeaders","BlockBlobStageBlockFromURLExceptionHeaders","BlockBlobCommitBlockListHeaders","BlockBlobCommitBlockListExceptionHeaders","BlockBlobGetBlockListHeaders","BlockBlobGetBlockListExceptionHeaders","permissions","precision","scale","blobItems","blobPrefixes","deleted","properties","blobTags","objectReplicationMetadata","hasVersionsOnly","encoded","serverEncrypted","incrementalCopy","deletedOn","remainingRetentionDays","customerProvidedKeySha256","lastAccessedOn","publicAccess","preventEncryptionScopeOverride","allowedOrigins","allowedMethods","allowedHeaders","exposedHeaders","maxAgeInSeconds","lastSyncOn","deleteProperty","write","retentionPolicy","includeAPIs","parquetTextConfiguration","days","id","accessPolicy","indexDocument","errorDocument404Path","defaultIndexDocumentPath","blobServiceProperties","BlobServicePropertiesMapper","accept","restype","comp","timeoutInSeconds","accept1","comp2","keyInfo","KeyInfoMapper","restype1","comp4","multipartContentType","comp5","restype2","access","ifModifiedSince","ifUnmodifiedSince","comp6","comp7","comp8","comp10","action","duration","proposedLeaseId","action1","leaseId1","action2","action3","breakPeriod","action4","proposedLeaseId1","include1","range","encryptionKey","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","blobCacheControl","blobContentType","blobContentEncoding","blobContentLanguage","blobContentDisposition","comp12","tier","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceIfTags","blobTagsString","legalHold1","sourceContentMD5","copySourceAuthorization","copySourceTags","queryRequest","QueryRequestMapper","comp18","BlobTagsMapper","transactionalContentMD5","transactionalContentCrc64","contentType1","body1","accept2","comp19","pageWrite","ifSequenceNumberLessThanOrEqualTo","ifSequenceNumberLessThan","ifSequenceNumberEqualTo","sourceUrl","sourceContentCrc64","comp20","comp22","maxSize","appendPosition","sourceRange1","blobType2","comp24","blockId","blocks","BlockLookupListMapper","comp25","ServiceImpl","client","setProperties","setPropertiesOperationSpec","getProperties","getPropertiesOperationSpec","getStatistics","getStatisticsOperationSpec","listContainersSegment","listContainersSegmentOperationSpec","getUserDelegationKey","getUserDelegationKeyOperationSpec","getAccountInfo","getAccountInfoOperationSpec","submitBatch","submitBatchOperationSpec","filterBlobs","filterBlobsOperationSpec","xmlSerializer","coreClient.createSerializer","Mappers","Mappers.ServiceSetPropertiesHeaders","Mappers.StorageError","Mappers.ServiceSetPropertiesExceptionHeaders","Parameters.blobServiceProperties","Parameters.restype","Parameters.comp","Parameters.timeoutInSeconds","Parameters.url","Parameters.contentType","Parameters.accept","Parameters.version","Parameters.requestId","Mappers.BlobServiceProperties","Mappers.ServiceGetPropertiesHeaders","Mappers.ServiceGetPropertiesExceptionHeaders","Parameters.accept1","Mappers.BlobServiceStatistics","Mappers.ServiceGetStatisticsHeaders","Mappers.ServiceGetStatisticsExceptionHeaders","Mappers.ListContainersSegmentResponse","Mappers.ServiceListContainersSegmentHeaders","Mappers.ServiceListContainersSegmentExceptionHeaders","Parameters.comp2","Parameters.prefix","Parameters.marker","Parameters.maxPageSize","Mappers.UserDelegationKey","Mappers.ServiceGetUserDelegationKeyHeaders","Mappers.ServiceGetUserDelegationKeyExceptionHeaders","Parameters.keyInfo","Mappers.ServiceGetAccountInfoHeaders","Mappers.ServiceGetAccountInfoExceptionHeaders","Parameters.restype1","Mappers.ServiceSubmitBatchHeaders","Mappers.ServiceSubmitBatchExceptionHeaders","Parameters.body","Parameters.comp4","Parameters.contentLength","Parameters.multipartContentType","Mappers.FilterBlobSegment","Mappers.ServiceFilterBlobsHeaders","Mappers.ServiceFilterBlobsExceptionHeaders","Parameters.comp5","Parameters.where","ContainerImpl","createOperationSpec","deleteOperationSpec","setMetadata","setMetadataOperationSpec","getAccessPolicy","getAccessPolicyOperationSpec","setAccessPolicy","setAccessPolicyOperationSpec","restore","restoreOperationSpec","rename","sourceContainerName","renameOperationSpec","acquireLease","acquireLeaseOperationSpec","releaseLease","releaseLeaseOperationSpec","renewLease","renewLeaseOperationSpec","breakLease","breakLeaseOperationSpec","changeLease","changeLeaseOperationSpec","listBlobFlatSegment","listBlobFlatSegmentOperationSpec","listBlobHierarchySegment","listBlobHierarchySegmentOperationSpec","Mappers.ContainerCreateHeaders","Mappers.ContainerCreateExceptionHeaders","Parameters.restype2","Parameters.metadata","Parameters.access","Mappers.ContainerGetPropertiesHeaders","Mappers.ContainerGetPropertiesExceptionHeaders","Parameters.leaseId","Mappers.ContainerDeleteHeaders","Mappers.ContainerDeleteExceptionHeaders","Parameters.ifModifiedSince","Parameters.ifUnmodifiedSince","Mappers.ContainerSetMetadataHeaders","Mappers.ContainerSetMetadataExceptionHeaders","Parameters.comp6","Mappers.ContainerGetAccessPolicyHeaders","Mappers.ContainerGetAccessPolicyExceptionHeaders","Parameters.comp7","Mappers.ContainerSetAccessPolicyHeaders","Mappers.ContainerSetAccessPolicyExceptionHeaders","Mappers.ContainerRestoreHeaders","Mappers.ContainerRestoreExceptionHeaders","Parameters.comp8","Mappers.ContainerRenameHeaders","Mappers.ContainerRenameExceptionHeaders","Mappers.ContainerSubmitBatchHeaders","Mappers.ContainerSubmitBatchExceptionHeaders","Mappers.ContainerFilterBlobsHeaders","Mappers.ContainerFilterBlobsExceptionHeaders","Mappers.ContainerAcquireLeaseHeaders","Mappers.ContainerAcquireLeaseExceptionHeaders","Parameters.comp10","Parameters.action","Parameters.duration","Parameters.proposedLeaseId","Mappers.ContainerReleaseLeaseHeaders","Mappers.ContainerReleaseLeaseExceptionHeaders","Parameters.action1","Parameters.leaseId1","Mappers.ContainerRenewLeaseHeaders","Mappers.ContainerRenewLeaseExceptionHeaders","Parameters.action2","Mappers.ContainerBreakLeaseHeaders","Mappers.ContainerBreakLeaseExceptionHeaders","Parameters.action3","Parameters.breakPeriod","Mappers.ContainerChangeLeaseHeaders","Mappers.ContainerChangeLeaseExceptionHeaders","Parameters.action4","Parameters.proposedLeaseId1","Mappers.ListBlobsFlatSegmentResponse","Mappers.ContainerListBlobFlatSegmentHeaders","Mappers.ContainerListBlobFlatSegmentExceptionHeaders","Parameters.include1","Mappers.ListBlobsHierarchySegmentResponse","Mappers.ContainerListBlobHierarchySegmentHeaders","Mappers.ContainerListBlobHierarchySegmentExceptionHeaders","Mappers.ContainerGetAccountInfoHeaders","Mappers.ContainerGetAccountInfoExceptionHeaders","BlobImpl","download","downloadOperationSpec","undelete","undeleteOperationSpec","setExpiry","expiryOptions","setExpiryOperationSpec","setHttpHeaders","setHttpHeadersOperationSpec","setImmutabilityPolicy","setImmutabilityPolicyOperationSpec","deleteImmutabilityPolicy","deleteImmutabilityPolicyOperationSpec","setLegalHold","setLegalHoldOperationSpec","createSnapshot","createSnapshotOperationSpec","startCopyFromURL","startCopyFromURLOperationSpec","copyFromURL","copyFromURLOperationSpec","abortCopyFromURL","abortCopyFromURLOperationSpec","setTier","setTierOperationSpec","queryOperationSpec","getTags","getTagsOperationSpec","setTags","setTagsOperationSpec","Mappers.BlobDownloadHeaders","Mappers.BlobDownloadExceptionHeaders","Parameters.snapshot","Parameters.versionId","Parameters.range","Parameters.encryptionKey","Parameters.encryptionKeySha256","Parameters.encryptionAlgorithm","Parameters.ifMatch","Parameters.ifNoneMatch","Parameters.ifTags","Mappers.BlobGetPropertiesHeaders","Mappers.BlobGetPropertiesExceptionHeaders","Mappers.BlobDeleteHeaders","Mappers.BlobDeleteExceptionHeaders","Mappers.BlobUndeleteHeaders","Mappers.BlobUndeleteExceptionHeaders","Mappers.BlobSetExpiryHeaders","Mappers.BlobSetExpiryExceptionHeaders","Mappers.BlobSetHttpHeadersHeaders","Mappers.BlobSetHttpHeadersExceptionHeaders","Parameters.blobCacheControl","Parameters.blobContentType","Parameters.blobContentMD5","Parameters.blobContentEncoding","Parameters.blobContentLanguage","Parameters.blobContentDisposition","Mappers.BlobSetImmutabilityPolicyHeaders","Mappers.BlobSetImmutabilityPolicyExceptionHeaders","Parameters.comp12","Parameters.immutabilityPolicyExpiry","Parameters.immutabilityPolicyMode","Mappers.BlobDeleteImmutabilityPolicyHeaders","Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders","Mappers.BlobSetLegalHoldHeaders","Mappers.BlobSetLegalHoldExceptionHeaders","Mappers.BlobSetMetadataHeaders","Mappers.BlobSetMetadataExceptionHeaders","Parameters.encryptionScope","Mappers.BlobAcquireLeaseHeaders","Mappers.BlobAcquireLeaseExceptionHeaders","Mappers.BlobReleaseLeaseHeaders","Mappers.BlobReleaseLeaseExceptionHeaders","Mappers.BlobRenewLeaseHeaders","Mappers.BlobRenewLeaseExceptionHeaders","Mappers.BlobChangeLeaseHeaders","Mappers.BlobChangeLeaseExceptionHeaders","Mappers.BlobBreakLeaseHeaders","Mappers.BlobBreakLeaseExceptionHeaders","Mappers.BlobCreateSnapshotHeaders","Mappers.BlobCreateSnapshotExceptionHeaders","Mappers.BlobStartCopyFromURLHeaders","Mappers.BlobStartCopyFromURLExceptionHeaders","Parameters.tier","Parameters.rehydratePriority","Parameters.sourceIfModifiedSince","Parameters.sourceIfUnmodifiedSince","Parameters.sourceIfMatch","Parameters.sourceIfNoneMatch","Parameters.sourceIfTags","Parameters.copySource","Parameters.blobTagsString","Parameters.legalHold1","Mappers.BlobCopyFromURLHeaders","Mappers.BlobCopyFromURLExceptionHeaders","Parameters.sourceContentMD5","Parameters.copySourceAuthorization","Parameters.copySourceTags","Mappers.BlobAbortCopyFromURLHeaders","Mappers.BlobAbortCopyFromURLExceptionHeaders","Mappers.BlobSetTierHeaders","Mappers.BlobSetTierExceptionHeaders","Mappers.BlobGetAccountInfoHeaders","Mappers.BlobGetAccountInfoExceptionHeaders","Mappers.BlobQueryHeaders","Mappers.BlobQueryExceptionHeaders","Parameters.queryRequest","Mappers.BlobTags","Mappers.BlobGetTagsHeaders","Mappers.BlobGetTagsExceptionHeaders","Parameters.comp18","Mappers.BlobSetTagsHeaders","Mappers.BlobSetTagsExceptionHeaders","Parameters.tags","Parameters.transactionalContentMD5","Parameters.transactionalContentCrc64","PageBlobImpl","uploadPages","uploadPagesOperationSpec","clearPages","clearPagesOperationSpec","uploadPagesFromURL","sourceRange","uploadPagesFromURLOperationSpec","getPageRanges","getPageRangesOperationSpec","getPageRangesDiff","getPageRangesDiffOperationSpec","resize","resizeOperationSpec","updateSequenceNumber","sequenceNumberAction","updateSequenceNumberOperationSpec","copyIncremental","copyIncrementalOperationSpec","Mappers.PageBlobCreateHeaders","Mappers.PageBlobCreateExceptionHeaders","Parameters.blobContentLength","Parameters.blobSequenceNumber","Mappers.PageBlobUploadPagesHeaders","Mappers.PageBlobUploadPagesExceptionHeaders","Parameters.body1","Parameters.comp19","Parameters.contentType1","Parameters.accept2","Parameters.pageWrite","Parameters.ifSequenceNumberLessThanOrEqualTo","Parameters.ifSequenceNumberLessThan","Parameters.ifSequenceNumberEqualTo","Mappers.PageBlobClearPagesHeaders","Mappers.PageBlobClearPagesExceptionHeaders","Mappers.PageBlobUploadPagesFromURLHeaders","Mappers.PageBlobUploadPagesFromURLExceptionHeaders","Parameters.sourceUrl","Parameters.sourceContentCrc64","Mappers.PageList","Mappers.PageBlobGetPageRangesHeaders","Mappers.PageBlobGetPageRangesExceptionHeaders","Parameters.comp20","Mappers.PageBlobGetPageRangesDiffHeaders","Mappers.PageBlobGetPageRangesDiffExceptionHeaders","Mappers.PageBlobResizeHeaders","Mappers.PageBlobResizeExceptionHeaders","Mappers.PageBlobUpdateSequenceNumberHeaders","Mappers.PageBlobUpdateSequenceNumberExceptionHeaders","Mappers.PageBlobCopyIncrementalHeaders","Mappers.PageBlobCopyIncrementalExceptionHeaders","AppendBlobImpl","appendBlock","appendBlockOperationSpec","appendBlockFromUrl","appendBlockFromUrlOperationSpec","seal","sealOperationSpec","Mappers.AppendBlobCreateHeaders","Mappers.AppendBlobCreateExceptionHeaders","Mappers.AppendBlobAppendBlockHeaders","Mappers.AppendBlobAppendBlockExceptionHeaders","Parameters.comp22","Parameters.maxSize","Parameters.appendPosition","Mappers.AppendBlobAppendBlockFromUrlHeaders","Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders","Parameters.sourceRange1","Mappers.AppendBlobSealHeaders","Mappers.AppendBlobSealExceptionHeaders","BlockBlobImpl","upload","uploadOperationSpec","putBlobFromUrl","putBlobFromUrlOperationSpec","stageBlock","stageBlockOperationSpec","stageBlockFromURL","stageBlockFromURLOperationSpec","commitBlockList","commitBlockListOperationSpec","getBlockList","listType","getBlockListOperationSpec","Mappers.BlockBlobUploadHeaders","Mappers.BlockBlobUploadExceptionHeaders","Parameters.blobType2","Mappers.BlockBlobPutBlobFromUrlHeaders","Mappers.BlockBlobPutBlobFromUrlExceptionHeaders","Mappers.BlockBlobStageBlockHeaders","Mappers.BlockBlobStageBlockExceptionHeaders","Parameters.comp24","Parameters.blockId","Mappers.BlockBlobStageBlockFromURLHeaders","Mappers.BlockBlobStageBlockFromURLExceptionHeaders","Mappers.BlockBlobCommitBlockListHeaders","Mappers.BlockBlobCommitBlockListExceptionHeaders","Parameters.blocks","Parameters.comp25","Mappers.BlockList","Mappers.BlockBlobGetBlockListHeaders","Mappers.BlockBlobGetBlockListExceptionHeaders","coreHttpCompat.ExtendedServiceClient","service","container","pageBlob","appendBlob","blockBlob","StorageContextClient","StorageClient","operationSpecToSend","str1","str2","storageClientContext","isHttps","getURLScheme","toLocaleLowerCase","BlobSASPermissions","deleteVersion","tag","move","execute","permanentDelete","blobSASPermissions","char","RangeError","permissionLike","ContainerSASPermissions","list","filterByTags","containerSASPermissions","UserDelegationKeyCredential","ipRangeToString","ipRange","SASProtocol","SASQueryParameters","ipRangeInner","signature","permissionsOrOptions","services","resourceTypes","identifier","resource","userDelegationKey","preauthorizedAgentObjectId","correlationId","signedOid","queries","param","tryAppendQueryParameter","generateBlobSASQueryParameters","blobSASSignatureValues","sharedKeyCredentialOrUserDelegationKey","generateBlobSASQueryParametersInternal","sasQueryParameters","sharedKeyCredential","userDelegationKeyCredential","SASSignatureValuesSanityCheckAndAutofill","verifiedPermissions","timestamp","snapshotTime","blobName","stringToSign","getCanonicalName","computeHMACSHA256","generateBlobSASQueryParameters20201206","generateBlobSASQueryParametersUDK20201206","generateBlobSASQueryParameters20181109","generateBlobSASQueryParametersUDK20200210","generateBlobSASQueryParametersUDK20181109","generateBlobSASQueryParameters20150405","BlobLeaseClient","_leaseId","_url","clientContext","_isContainer","_containerOrBlobOperation","conditions","tagConditions","modifiedAccessConditions","BlobQueryResponse","_response","BlockBlobTier","PremiumPageBlobTier","StorageBlobAudience","toAccessTier","ensureCpkIfSpecified","cpk","rangeResponseFromModel","offset","count","PollerStoppedError","PollerCancelledError","Poller","operation","resolveOnUnsuccessful","stopped","pollProgressCallbacks","promise","startPolling","pollOptions","isStopped","isDone","poll","pollOnce","update","fireProgress","processUpdatedState","cancelOnce","pollOncePromise","clearPollOncePromise","isCancelled","getResult","pollUntilDone","c","isCompleted","stopPolling","cancelOperation","cancelPromise","getOperationState","BlobBeginCopyFromUrlPoller","blobClient","intervalInMs","resumeFrom","startCopyFromURLOptions","makeBlobBeginCopyFromURLPollOperation","isStarted","prevCopyProgress","rangeToString","iRange","BatchStates","ReflectOwnKeys","R","ReflectApply","apply","Function","ownKeys","getOwnPropertySymbols","NumberIsNaN","EventEmitter","init","eventsModule","exports","once","emitter","errorListener","removeListener","resolver","arguments","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","_getMaxListeners","that","_addListener","prepend","m","events","existing","newListener","emit","warned","w","onceWrapper","fired","wrapFn","_onceWrap","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","wrapListener","arg","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","addListener","prependListener","prependOnceListener","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","Batch","concurrency","actives","completed","operations","Good","addOperation","parallelExecute","nextOperation","BufferScheduler","BlobClient","_containerName","urlOrConnectionString","credentialOrPipelineOrContainerName","blobNameOrOptions","extractedCreds","getBlobAndContainerNamesFromUrl","blobContext","_snapshot","_versionId","withSnapshot","withVersion","getAppendBlobClient","AppendBlobClient","getBlockBlobClient","BlockBlobClient","getPageBlobClient","PageBlobClient","customerProvidedKey","leaseAccessConditions","rangeGetContentMD5","rangeGetContentCRC64","rangeGetContentCrc64","cpkInfo","wrappedRes","objectReplicationDestinationPolicyId","objectReplicationSourceProperties","maxRetryRequests","updatedDownloadOptions","exists","deleteSnapshots","deleteIfExists","succeeded","setHTTPHeaders","blobHTTPHeaders","blobHttpHeaders","getBlobLeaseClient","proposeLeaseId","beginCopyFromURL","poller","syncCopyFromURL","sourceConditions","sourceModifiedAccessConditions","sourceAuthorization","immutabilityPolicy","expiriesOn","policyMode","setAccessTier","downloadToBuffer","param1","param2","param3","param4","blockSize","alloc","transferProgress","batch","chunkEnd","maxRetryRequestsPerBlock","streamToBuffer","do","downloadToFile","filePath","blobDownloadStream","pathComponents","decodeURIComponent","sealBlob","generateSasUrl","sas","generateSasStringToSign","generateUserDelegationSasUrl","generateUserDelegationSasStringToSign","legalHoldEnabled","appendBlobContext","createIfNotExists","appendPositionAccessConditions","appendBlockFromURL","sourceURL","sourceOffset","blockBlobContext","_blobContext","inputTextConfiguration","outputTextConfiguration","onError","syncUploadFromURL","uploadData","data","byteOffset","uploadSeekableInternal","browserBlob","uploadBrowserData","browserData","bodyFactory","maxSingleShotSize","numBlocks","blockList","blockID","uploadFile","fsStat","uploadStream","bufferSize","maxConcurrency","blockNum","scheduler","pageBlobContext","sequenceNumberAccessConditions","destOffset","listPageRangesSegment","listPageRangeItemSegments","__asyncGenerator","getPageRangeItemSegmentsResponse","__await","listPageRangeItems","e_1","__asyncValues","__asyncDelegator","e_1_1","return","listPageRanges","iter","asyncIterator","byPage","settings","prevSnapshot","prevsnapshot","listPageRangesDiffSegment","prevSnapshotOrUrl","listPageRangeDiffItemSegments","listPageRangeDiffItems","e_2","e_2_1","listPageRangesDiff","getPageRangesDiffForManagedDisks","prevSnapshotUrl","sequenceNumber","startCopyIncremental"],"mappings":"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,CACRC,uBAAwB,IACxBC,UAAW,MACXC,SAAU,WACVC,UAAW,YACXC,QAAS,WAUJC,GAMO,iBANPA,GAUD,SAgBCC,GAAW,GASXC,GAAuC,CAChD,8BACA,gBACA,iBACA,eACA,OACA,aACA,cACA,oBACA,aACA,yBACA,YACA,kBACA,kBACA,gCACA,eACA,gBACA,sBACA,mBACA,mBACA,cACA,gBACA,OACA,gBACA,SACA,OACA,qBACA,mBACA,4BACA,eACA,qBACA,mBACA,+BACA,sBACA,mBACA,oBACA,aACA,gCACA,wBACA,gBACA,oBACA,WACA,oBACA,gBACA,sBACA,mBACA,+BACA,4BACA,oBACA,sBACA,0BACA,0BACA,kCACA,gCACA,8BACA,gCACA,6BACA,6BACA,2BACA,wBACA,yBACA,0BACA,4BACA,iBACA,iCACA,qBACA,gCACA,wBACA,6BACA,sCACA,4BACA,6BACA,6BACA,6BACA,wBACA,oBACA,0BACA,sBACA,gBACA,kBACA,kBACA,yBACA,6BACA,0BACA,8BACA,gBACA,0BACA,uBACA,gCACA,4BACA,kCACA,iBACA,6BACA,8BACA,+BACA,eACA,uBAESC,GAA2C,CACpD,OACA,aACA,OACA,OACA,OACA,OACA,OACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,UACA,SACA,SACA,SACA,UACA,UACA,gBACA,YACA,eACA,MACA,QACA,MACA,MACA,QACA,MACA,YAMSC,GAAiB,CAC1B,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SCtKG,SAASC,GAAcj2B,GAC1B,MAAMk2B,EAAY,IAAIj2B,IAAID,GAC1B,IAAIkqB,EAAOgM,EAAU3L,SAIrB,OAHAL,EAAOA,GAAQ,IACfA,EA+GOL,mBA/GOK,GAgHTtzB,QAAQ,OAAQ,KAChBA,QAAQ,KAAM,OACdA,QAAQ,MAAO,OACfA,QAAQ,OAAQ,KAlHrBs/B,EAAU3L,SAAWL,EACdgM,EAAUl4B,UACrB,CAg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CLvN,WAAY6/B,GACZlyB,cAAemnC,KAGvBr9C,YAAao5C,GACbh/B,gBAAiB,CACbquB,GACA6U,GACAC,IAEJvkC,cAAe,CAAC0vB,IAChB3xB,iBAAkB,CACd8xB,GACAC,GACA0B,GACA0C,GACAwF,GACAC,GACAC,GACA+B,GACA8C,GACAC,GACA4B,GACAC,IAEJ9vC,OAAO,EACP5U,YAAa,iCACb8iB,UAAW,SACXxK,WAAY66B,IAEVyU,GAAiC,CACnC/iC,KAAM,0BACNhD,WAAY,MACZrB,UAAW,CACP,IAAK,CACDa,cAAesnC,IAEnB1nC,QAAS,CACLvN,WAAY6/B,GACZlyB,cAAeunC,KAGvBrjC,gBAAiB,CACbquB,GACA6U,GACAC,IAEJvkC,cAAe,CAAC0vB,IAChB3xB,iBAAkB,CACd8xB,GACAC,GACAI,GACAsB,GACA0C,GACAwF,GACAC,GACAC,GACA+B,GACAiB,GACAC,GACAC,GACAC,GACAO,GACAC,GACAyD,GACAC,GACA6B,IAEJryC,OAAO,EACP0D,WAAY66B,IAEV2U,GAA+B,CACjCjjC,KAAM,0BACNhD,WAAY,MACZrB,UAAW,CACP,IAAK,CACDa,cAAewnC,IAEnB5nC,QAAS,CACLvN,WAAY6/B,GACZlyB,cAAeynC,KAGvB39C,YAAa49C,GACbxjC,gBAAiB,CAACquB,GAA6BoV,IAC/C7kC,cAAe,CAAC0vB,IAChB3xB,iBAAkB,CACd4xB,GACAC,GACAC,GACAC,GACAgE,GACAI,GACAG,GACAC,GACAoF,GACAC,GACAC,GACAC,GACAC,GACAC,GACAW,GACAC,GACAC,GACAC,GACAC,GACAC,GACAI,GACAC,GACAO,GACAe,GACAQ,GACAC,GACAsB,GACAC,IAEJjuC,OAAO,EACP5U,YAAa,iCACb8iB,UAAW,MACXxK,WAAY66B,IAEV8U,GAA4B,CAC9BpjC,KAAM,0BACNhD,WAAY,MACZrB,UAAW,CACP,IAAK,CACD9M,WAAYu1C,GACZ5nC,cAAe6nC,IAEnBjoC,QAAS,CACLvN,WAAY6/B,GACZlyB,cAAe8nC,KAGvB5jC,gBAAiB,CACbquB,GACA8J,GACA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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122]}